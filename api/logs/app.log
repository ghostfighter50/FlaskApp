2025-02-04 10:56:59,354 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:56:59,396 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:56:59,405 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:56:59,405 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:56:59,414 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-04 10:56:59,416 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-04 10:56:59,417 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-04 10:56:59,421 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-04 10:56:59,959 - [WARNING] - app.controllers.auth_controller - register() - Missing fields: ['role']
2025-02-04 10:57:00,039 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:00,040 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:00,043 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:00,044 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:00,620 - [WARNING] - app.controllers.auth_controller - register() - Invalid email format during registration.
2025-02-04 10:57:00,694 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:00,695 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:00,698 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:00,699 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:01,224 - [WARNING] - app.controllers.auth_controller - register() - Password requirements not met during registration.
2025-02-04 10:57:01,299 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:01,300 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:01,304 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:01,304 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:01,828 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8c1323e3-e816-400e-beb0-5989fd3a0784
2025-02-04 10:57:01,828 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 8c1323e3-e816-400e-beb0-5989fd3a0784)
2025-02-04 10:57:01,829 - [WARNING] - app.controllers.auth_controller - register() - Unauthorized registration attempt by user ID: 8c1323e3-e816-400e-beb0-5989fd3a0784
2025-02-04 10:57:01,906 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:01,907 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:01,910 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:01,911 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:02,439 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4abf1c58-abae-4530-b2bf-2aa6a212c039
2025-02-04 10:57:02,439 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 4abf1c58-abae-4530-b2bf-2aa6a212c039)
2025-02-04 10:57:02,439 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newprofadmin@example.com
2025-02-04 10:57:02,444 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newprofadmin@example.com
2025-02-04 10:57:02,444 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Professor Admin, Email: newprofadmin@example.com, Role: Professor
2025-02-04 10:57:02,567 - [INFO] - app.services.user_service - create_user() - User created with ID: e2a279d3-4662-46a3-8b0c-f1421cc72d42
2025-02-04 10:57:02,567 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: e2a279d3-4662-46a3-8b0c-f1421cc72d42
2025-02-04 10:57:02,643 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:02,644 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:02,647 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:02,648 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:03,167 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c5c9a97b-0db2-4506-8e92-800aec3ba2fb
2025-02-04 10:57:03,167 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: c5c9a97b-0db2-4506-8e92-800aec3ba2fb)
2025-02-04 10:57:03,168 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-04 10:57:03,174 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: conflict@example.com
2025-02-04 10:57:03,174 - [DEBUG] - app.services.user_service - create_user() - Creating user: Conflict User, Email: conflict@example.com, Role: Student
2025-02-04 10:57:03,290 - [INFO] - app.services.user_service - create_user() - User created with ID: b0d19afb-5689-429f-9cfe-7f5776dccced
2025-02-04 10:57:03,290 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: b0d19afb-5689-429f-9cfe-7f5776dccced
2025-02-04 10:57:03,292 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c5c9a97b-0db2-4506-8e92-800aec3ba2fb
2025-02-04 10:57:03,292 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: c5c9a97b-0db2-4506-8e92-800aec3ba2fb)
2025-02-04 10:57:03,293 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-04 10:57:03,293 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: Conflict User (ID: b0d19afb-5689-429f-9cfe-7f5776dccced)
2025-02-04 10:57:03,294 - [WARNING] - app.controllers.auth_controller - register() - Email already in use during registration.
2025-02-04 10:57:03,367 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:03,368 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:03,371 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:03,371 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:03,893 - [WARNING] - app.controllers.auth_controller - login() - Login failed: Missing credentials.
2025-02-04 10:57:03,974 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:03,975 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:03,978 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:03,979 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:04,494 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: doesnotexist@example.com
2025-02-04 10:57:04,494 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: doesnotexist@example.com
2025-02-04 10:57:04,499 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: doesnotexist@example.com
2025-02-04 10:57:04,499 - [WARNING] - app.services.auth_service - authenticate_user() - No user found with email: doesnotexist@example.com
2025-02-04 10:57:04,499 - [WARNING] - app.controllers.auth_controller - login() - Invalid credentials during login.
2025-02-04 10:57:04,586 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:04,587 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:04,591 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:04,591 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:05,103 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-04 10:57:05,103 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 10:57:05,108 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 5f35fed9-ff08-43f3-aa45-966a1d85d3ea)
2025-02-04 10:57:05,217 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: 5f35fed9-ff08-43f3-aa45-966a1d85d3ea) authenticated successfully.
2025-02-04 10:57:05,217 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: 5f35fed9-ff08-43f3-aa45-966a1d85d3ea
2025-02-04 10:57:05,217 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '5f35fed9-ff08-43f3-aa45-966a1d85d3ea', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-04T09:57:05', 'updated_at': '2025-02-04T09:57:05', 'courses_enrolled': []}
2025-02-04 10:57:05,288 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:05,289 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:05,292 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:05,293 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:05,839 - [WARNING] - app.controllers.auth_controller - change_password() - Change password failed: Missing required fields.
2025-02-04 10:57:05,915 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:05,916 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:05,920 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:05,921 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:06,458 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 10:57:06,462 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 87358646-f312-4dca-a172-3b9297f5e940)
2025-02-04 10:57:06,575 - [WARNING] - app.controllers.auth_controller - change_password() - Incorrect current password during password change.
2025-02-04 10:57:06,645 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:06,646 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:06,651 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:06,651 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:07,204 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 10:57:07,209 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 5977bb85-576b-43ba-82bb-c64eb932dfc4)
2025-02-04 10:57:07,317 - [WARNING] - app.controllers.auth_controller - change_password() - New password requirements not met.
2025-02-04 10:57:07,387 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:07,388 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:07,391 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:07,391 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:07,916 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 10:57:07,920 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 77879969-f0f0-42d9-84b3-ee30b807abb9)
2025-02-04 10:57:08,028 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: 77879969-f0f0-42d9-84b3-ee30b807abb9
2025-02-04 10:57:08,254 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: 77879969-f0f0-42d9-84b3-ee30b807abb9
2025-02-04 10:57:08,254 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: 77879969-f0f0-42d9-84b3-ee30b807abb9
2025-02-04 10:57:08,256 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-04 10:57:08,256 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 10:57:08,256 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 77879969-f0f0-42d9-84b3-ee30b807abb9)
2025-02-04 10:57:08,366 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: 77879969-f0f0-42d9-84b3-ee30b807abb9) authenticated successfully.
2025-02-04 10:57:08,367 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: 77879969-f0f0-42d9-84b3-ee30b807abb9
2025-02-04 10:57:08,367 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '77879969-f0f0-42d9-84b3-ee30b807abb9', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-04T09:57:08', 'updated_at': '2025-02-04T09:57:08', 'courses_enrolled': []}
2025-02-04 10:57:08,368 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 10:57:08,369 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 77879969-f0f0-42d9-84b3-ee30b807abb9)
2025-02-04 10:57:08,477 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: 77879969-f0f0-42d9-84b3-ee30b807abb9
2025-02-04 10:57:08,733 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: 77879969-f0f0-42d9-84b3-ee30b807abb9
2025-02-04 10:57:08,733 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: 77879969-f0f0-42d9-84b3-ee30b807abb9
2025-02-04 10:57:08,806 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:08,807 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:08,811 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:08,811 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:09,375 - [INFO] - app.controllers.course_controller - list_courses() - Listing courses - Page: 1, Per Page: 10
2025-02-04 10:57:09,375 - [DEBUG] - app.services.course_service - get_all_courses_paginated() - Fetching courses - Page: 1, Per Page: 10
2025-02-04 10:57:09,378 - [INFO] - app.services.course_service - get_all_courses_paginated() - Retrieved 1 courses on page 1.
2025-02-04 10:57:09,379 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 918a4650-81e6-4ece-a0dd-b4148c135857
2025-02-04 10:57:09,379 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '918a4650-81e6-4ece-a0dd-b4148c135857', 'name': 'Test Course', 'professor_id': '756014c0-8299-4f5f-a5c2-f7b122e7b6de', 'created_at': '2025-02-04T09:57:09', 'updated_at': '2025-02-04T09:57:09'}
2025-02-04 10:57:09,453 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:09,454 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:09,457 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:09,457 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:09,988 - [INFO] - app.controllers.course_controller - get_course() - Retrieving course with ID: fa11ed0f-d8f2-41a0-976d-711940533cfb
2025-02-04 10:57:09,988 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: fa11ed0f-d8f2-41a0-976d-711940533cfb
2025-02-04 10:57:09,988 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: fa11ed0f-d8f2-41a0-976d-711940533cfb)
2025-02-04 10:57:09,988 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: fa11ed0f-d8f2-41a0-976d-711940533cfb
2025-02-04 10:57:09,988 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'fa11ed0f-d8f2-41a0-976d-711940533cfb', 'name': 'Test Course', 'professor_id': '3c957e85-0855-443b-b8ff-3ffb7da8c40e', 'created_at': '2025-02-04T09:57:10', 'updated_at': '2025-02-04T09:57:10'}
2025-02-04 10:57:10,067 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:10,068 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:10,071 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:10,071 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:10,608 - [INFO] - app.controllers.course_controller - search_courses() - Searching courses with query: 'Test'
2025-02-04 10:57:10,608 - [DEBUG] - app.services.course_service - search_courses_by_name() - Searching courses with name containing: Test
2025-02-04 10:57:10,611 - [INFO] - app.services.course_service - search_courses_by_name() - Found 1 courses matching query 'Test'.
2025-02-04 10:57:10,611 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 3a47d608-6c2b-4545-884b-5c73bc25a379
2025-02-04 10:57:10,611 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '3a47d608-6c2b-4545-884b-5c73bc25a379', 'name': 'Test Course', 'professor_id': '1b2ebe25-3e0f-4122-b715-7ccaa427d100', 'created_at': '2025-02-04T09:57:11', 'updated_at': '2025-02-04T09:57:11'}
2025-02-04 10:57:10,687 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:10,689 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:10,693 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:10,693 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:11,208 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5080b66a-5a81-4179-8c85-352bc5d14fab
2025-02-04 10:57:11,208 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 5080b66a-5a81-4179-8c85-352bc5d14fab)
2025-02-04 10:57:11,208 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 78984f63-8924-4815-8699-91c72dae9853
2025-02-04 10:57:11,208 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 78984f63-8924-4815-8699-91c72dae9853)
2025-02-04 10:57:11,208 - [DEBUG] - app.services.course_service - get_students_in_course() - Fetching students in course ID: 78984f63-8924-4815-8699-91c72dae9853
2025-02-04 10:57:11,210 - [INFO] - app.services.course_service - get_students_in_course() - Retrieved 0 students for course ID: 78984f63-8924-4815-8699-91c72dae9853.
2025-02-04 10:57:11,289 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:11,290 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:11,293 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:11,294 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:11,834 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 67685eae-23d1-4c76-9d4d-870ccf912b0a
2025-02-04 10:57:11,834 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 67685eae-23d1-4c76-9d4d-870ccf912b0a)
2025-02-04 10:57:11,834 - [WARNING] - app.controllers.course_controller - create_course() - Unauthorized course creation attempt by user ID: 67685eae-23d1-4c76-9d4d-870ccf912b0a
2025-02-04 10:57:11,918 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:11,919 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:11,923 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:11,923 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:12,448 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: da0cf1ce-9102-4854-bad8-71013c0dad0c
2025-02-04 10:57:12,448 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: da0cf1ce-9102-4854-bad8-71013c0dad0c)
2025-02-04 10:57:12,448 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 88e6ddf2-295f-4a23-a379-730b66bb40c7
2025-02-04 10:57:12,448 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 88e6ddf2-295f-4a23-a379-730b66bb40c7)
2025-02-04 10:57:12,448 - [DEBUG] - app.services.course_service - update_course() - Updating course ID: 88e6ddf2-295f-4a23-a379-730b66bb40c7 with new name: Updated Test Course
2025-02-04 10:57:12,452 - [INFO] - app.services.course_service - update_course() - Course ID: 88e6ddf2-295f-4a23-a379-730b66bb40c7 updated successfully.
2025-02-04 10:57:12,453 - [INFO] - app.controllers.course_controller - update_course() - Course updated successfully with ID: 88e6ddf2-295f-4a23-a379-730b66bb40c7
2025-02-04 10:57:12,453 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 88e6ddf2-295f-4a23-a379-730b66bb40c7
2025-02-04 10:57:12,453 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '88e6ddf2-295f-4a23-a379-730b66bb40c7', 'name': 'Updated Test Course', 'professor_id': 'da0cf1ce-9102-4854-bad8-71013c0dad0c', 'created_at': '2025-02-04T09:57:12', 'updated_at': '2025-02-04T09:57:12'}
2025-02-04 10:57:12,525 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:12,526 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:12,529 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:12,530 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:13,061 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e11abecd-a2eb-406a-8dfa-d99d1cb705ff
2025-02-04 10:57:13,061 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: e11abecd-a2eb-406a-8dfa-d99d1cb705ff)
2025-02-04 10:57:13,061 - [WARNING] - app.controllers.course_controller - delete_course() - Unauthorized course deletion attempt by user ID: e11abecd-a2eb-406a-8dfa-d99d1cb705ff
2025-02-04 10:57:13,134 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:13,135 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:13,139 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:13,139 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:13,693 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c5505828-80ec-479f-9bbf-ff87cbc59a9e
2025-02-04 10:57:13,694 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: c5505828-80ec-479f-9bbf-ff87cbc59a9e)
2025-02-04 10:57:13,694 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 38ee1a47-53bd-44cd-9637-1d8f8abef12e
2025-02-04 10:57:13,694 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 38ee1a47-53bd-44cd-9637-1d8f8abef12e)
2025-02-04 10:57:13,694 - [DEBUG] - app.services.course_service - delete_course() - Deleting course ID: 38ee1a47-53bd-44cd-9637-1d8f8abef12e
2025-02-04 10:57:13,704 - [INFO] - app.services.course_service - delete_course() - Course ID: 38ee1a47-53bd-44cd-9637-1d8f8abef12e deleted successfully.
2025-02-04 10:57:13,704 - [INFO] - app.controllers.course_controller - delete_course() - Course deleted successfully with ID: 38ee1a47-53bd-44cd-9637-1d8f8abef12e
2025-02-04 10:57:13,778 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:13,779 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:13,783 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:13,783 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:14,326 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7cd3c6d3-5412-49d5-bdf2-7bc8174d0a31
2025-02-04 10:57:14,326 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 7cd3c6d3-5412-49d5-bdf2-7bc8174d0a31)
2025-02-04 10:57:14,326 - [WARNING] - app.controllers.grade_controller - list_grades() - Unauthorized access attempt by user ID: 7cd3c6d3-5412-49d5-bdf2-7bc8174d0a31
2025-02-04 10:57:14,408 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:14,409 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:14,413 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:14,413 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:14,928 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 79f138e1-a99a-4764-8573-cac5311509fd
2025-02-04 10:57:14,928 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 79f138e1-a99a-4764-8573-cac5311509fd)
2025-02-04 10:57:14,929 - [DEBUG] - app.services.grade_service - list_grades() - Retrieving all grades from the database.
2025-02-04 10:57:14,929 - [INFO] - app.services.grade_service - list_grades() - Retrieved 1 grades.
2025-02-04 10:57:14,929 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: ce00a4a2-1c3d-4531-afd3-c73806b72b55
2025-02-04 10:57:14,929 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'ce00a4a2-1c3d-4531-afd3-c73806b72b55', 'course_id': '8403bf77-74bb-4657-9694-ff1768ee063d', 'student_id': 'fe835f2d-b07f-49f1-ba88-882cebeda27c', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-04T09:57:15', 'updated_at': '2025-02-04T09:57:15'}
2025-02-04 10:57:15,004 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:15,005 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:15,008 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:15,009 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:15,509 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0617238c-a207-419d-a7ca-36b6f6cd71f2
2025-02-04 10:57:15,509 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 0617238c-a207-419d-a7ca-36b6f6cd71f2)
2025-02-04 10:57:15,509 - [WARNING] - app.controllers.grade_controller - assign_grade() - Missing required fields in grade assignment: {}
2025-02-04 10:57:15,585 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:15,586 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:15,591 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:15,591 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:16,127 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3f83ec4c-9bff-437b-ac65-eeee904756f4
2025-02-04 10:57:16,127 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 3f83ec4c-9bff-437b-ac65-eeee904756f4)
2025-02-04 10:57:16,127 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: e7c39320-d661-475c-a397-b1063581be60
2025-02-04 10:57:16,127 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: e7c39320-d661-475c-a397-b1063581be60)
2025-02-04 10:57:16,127 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: invalid_student_id
2025-02-04 10:57:16,131 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: invalid_student_id
2025-02-04 10:57:16,131 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=e7c39320-d661-475c-a397-b1063581be60, student_id=invalid_student_id
2025-02-04 10:57:16,207 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:16,208 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:16,211 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:16,212 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:16,769 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2a0b6f2a-c17d-4382-80e1-84ab0723eb7b
2025-02-04 10:57:16,769 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 2a0b6f2a-c17d-4382-80e1-84ab0723eb7b)
2025-02-04 10:57:16,769 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: invalid_course_id
2025-02-04 10:57:16,770 - [DEBUG] - app.services.course_service - get_course_by_id() - No course found with ID: invalid_course_id
2025-02-04 10:57:16,770 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: eaa27922-90d7-4003-a29f-e39992713e53
2025-02-04 10:57:16,770 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: eaa27922-90d7-4003-a29f-e39992713e53)
2025-02-04 10:57:16,771 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=invalid_course_id, student_id=eaa27922-90d7-4003-a29f-e39992713e53
2025-02-04 10:57:16,843 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:16,844 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:16,848 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:16,848 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:17,402 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 112b2524-f403-45af-a35f-8907d75b8b8d
2025-02-04 10:57:17,402 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 112b2524-f403-45af-a35f-8907d75b8b8d)
2025-02-04 10:57:17,402 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 6a6002aa-7730-4df6-a104-802aaa52bac4
2025-02-04 10:57:17,402 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 6a6002aa-7730-4df6-a104-802aaa52bac4)
2025-02-04 10:57:17,402 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: bf1b4a29-c9ea-4822-b968-f2557eae062d
2025-02-04 10:57:17,402 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: bf1b4a29-c9ea-4822-b968-f2557eae062d)
2025-02-04 10:57:17,402 - [DEBUG] - app.services.grade_service - assign_grade() - Assigning grade 90 to student bf1b4a29-c9ea-4822-b968-f2557eae062d for course 6a6002aa-7730-4df6-a104-802aaa52bac4.
2025-02-04 10:57:17,408 - [INFO] - app.services.grade_service - assign_grade() - Grade assigned: 8ac1a8a5-6ab7-4517-902f-417014091e27, Value: 90.0
2025-02-04 10:57:17,408 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 8ac1a8a5-6ab7-4517-902f-417014091e27
2025-02-04 10:57:17,408 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '8ac1a8a5-6ab7-4517-902f-417014091e27', 'course_id': '6a6002aa-7730-4df6-a104-802aaa52bac4', 'student_id': 'bf1b4a29-c9ea-4822-b968-f2557eae062d', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-04T09:57:17', 'updated_at': '2025-02-04T09:57:17'}
2025-02-04 10:57:17,485 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:17,487 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:17,491 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:17,491 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:18,010 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8dd3767a-1552-4388-9804-b750dbeedfa9
2025-02-04 10:57:18,010 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 8dd3767a-1552-4388-9804-b750dbeedfa9)
2025-02-04 10:57:18,010 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 472774c6-4903-4ccf-9ae7-77161c3165f3
2025-02-04 10:57:18,010 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 472774c6-4903-4ccf-9ae7-77161c3165f3, Grade Value: 90.0
2025-02-04 10:57:18,010 - [WARNING] - app.controllers.grade_controller - get_grade() - Unauthorized grade access attempt by user ID: 8dd3767a-1552-4388-9804-b750dbeedfa9
2025-02-04 10:57:18,091 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:18,093 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:18,096 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:18,096 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:18,613 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4ba1e687-ecd6-4b76-ab74-330c297affba
2025-02-04 10:57:18,614 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 4ba1e687-ecd6-4b76-ab74-330c297affba)
2025-02-04 10:57:18,614 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 71ae1148-491a-4147-8b62-d4366eb7e4d3
2025-02-04 10:57:18,614 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 71ae1148-491a-4147-8b62-d4366eb7e4d3, Grade Value: 90.0
2025-02-04 10:57:18,614 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 71ae1148-491a-4147-8b62-d4366eb7e4d3
2025-02-04 10:57:18,614 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '71ae1148-491a-4147-8b62-d4366eb7e4d3', 'course_id': '44aadef8-bcaf-4c5c-ae87-7dec00c930c5', 'student_id': '9e0071f2-a2e2-4bed-9552-02194632a33a', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-04T09:57:19', 'updated_at': '2025-02-04T09:57:19'}
2025-02-04 10:57:18,692 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:18,693 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:18,698 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:18,698 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:19,206 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c3da4a0e-5d9c-4223-8872-af84f4aac912
2025-02-04 10:57:19,206 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: c3da4a0e-5d9c-4223-8872-af84f4aac912)
2025-02-04 10:57:19,206 - [WARNING] - app.controllers.grade_controller - update_grade() - Unauthorized grade update attempt by user ID: c3da4a0e-5d9c-4223-8872-af84f4aac912
2025-02-04 10:57:19,312 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:19,314 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:19,317 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:19,317 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:19,844 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 54f8781d-ae25-4854-a801-0bc5c622c496
2025-02-04 10:57:19,845 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 54f8781d-ae25-4854-a801-0bc5c622c496)
2025-02-04 10:57:19,845 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: e574686a-3eee-4ff0-a03d-a95404ad0810
2025-02-04 10:57:19,845 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: e574686a-3eee-4ff0-a03d-a95404ad0810, Grade Value: 90.0
2025-02-04 10:57:19,845 - [WARNING] - app.controllers.grade_controller - update_grade() - Missing grade value for update: {}
2025-02-04 10:57:19,921 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:19,922 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:19,926 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:19,926 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:20,458 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 67e281c5-37e1-49fa-8aa6-4a41cdfac133
2025-02-04 10:57:20,458 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 67e281c5-37e1-49fa-8aa6-4a41cdfac133)
2025-02-04 10:57:20,458 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: e9824f03-c36e-46ce-9d04-4cb1e79dc45b
2025-02-04 10:57:20,458 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: e9824f03-c36e-46ce-9d04-4cb1e79dc45b, Grade Value: 90.0
2025-02-04 10:57:20,458 - [DEBUG] - app.services.grade_service - update_grade() - Updating grade ID: e9824f03-c36e-46ce-9d04-4cb1e79dc45b to new value: 95.
2025-02-04 10:57:20,463 - [INFO] - app.services.grade_service - update_grade() - Grade ID: e9824f03-c36e-46ce-9d04-4cb1e79dc45b updated to value: 95.
2025-02-04 10:57:20,464 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: e9824f03-c36e-46ce-9d04-4cb1e79dc45b
2025-02-04 10:57:20,464 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'e9824f03-c36e-46ce-9d04-4cb1e79dc45b', 'course_id': 'd36d0a7e-a480-4358-927e-0b5c56785642', 'student_id': 'a11b648a-93f0-4d7e-80a7-e2c4a018e8c2', 'grade': 95.0, 'name': 'DM', 'created_at': '2025-02-04T09:57:20', 'updated_at': '2025-02-04T09:57:20'}
2025-02-04 10:57:20,539 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:20,539 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:20,543 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:20,543 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:21,122 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0a2bbdd6-89f6-4b2c-b2a6-df1a197265ad
2025-02-04 10:57:21,122 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 0a2bbdd6-89f6-4b2c-b2a6-df1a197265ad)
2025-02-04 10:57:21,122 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 911e6da0-a455-48d8-bcf2-ac2417fc1e27
2025-02-04 10:57:21,122 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 911e6da0-a455-48d8-bcf2-ac2417fc1e27)
2025-02-04 10:57:21,122 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: a1b6800e-adb7-40ad-8f1e-155a34fb6e8e
2025-02-04 10:57:21,122 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: a1b6800e-adb7-40ad-8f1e-155a34fb6e8e)
2025-02-04 10:57:21,122 - [DEBUG] - app.services.grade_service - get_student_grades() - Fetching grades for student ID: a1b6800e-adb7-40ad-8f1e-155a34fb6e8e in course ID: 911e6da0-a455-48d8-bcf2-ac2417fc1e27.
2025-02-04 10:57:21,123 - [INFO] - app.services.grade_service - get_student_grades() - Retrieved 1 grades for student ID: a1b6800e-adb7-40ad-8f1e-155a34fb6e8e in course ID: 911e6da0-a455-48d8-bcf2-ac2417fc1e27.
2025-02-04 10:57:21,123 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 1bdbb168-d3ae-4dc6-994e-73759dee9d88
2025-02-04 10:57:21,124 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '1bdbb168-d3ae-4dc6-994e-73759dee9d88', 'course_id': '911e6da0-a455-48d8-bcf2-ac2417fc1e27', 'student_id': 'a1b6800e-adb7-40ad-8f1e-155a34fb6e8e', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-04T09:57:21', 'updated_at': '2025-02-04T09:57:21'}
2025-02-04 10:57:21,197 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:21,198 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:21,201 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:21,202 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:21,733 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2d94dfd6-4afb-4203-b7b2-edd8b0a2d56c
2025-02-04 10:57:21,733 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 2d94dfd6-4afb-4203-b7b2-edd8b0a2d56c)
2025-02-04 10:57:21,733 - [WARNING] - app.controllers.grade_controller - delete_grade() - Unauthorized grade deletion attempt by user ID: 2d94dfd6-4afb-4203-b7b2-edd8b0a2d56c
2025-02-04 10:57:21,808 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:21,809 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:21,813 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:21,813 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:22,338 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 76d95dbd-a97a-4dda-8049-fa11af6747e4
2025-02-04 10:57:22,338 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 76d95dbd-a97a-4dda-8049-fa11af6747e4)
2025-02-04 10:57:22,338 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 56b11874-c105-4029-933d-cf6a4ac90155
2025-02-04 10:57:22,338 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 56b11874-c105-4029-933d-cf6a4ac90155, Grade Value: 90.0
2025-02-04 10:57:22,338 - [DEBUG] - app.services.grade_service - delete_grade() - Deleting grade ID: 56b11874-c105-4029-933d-cf6a4ac90155.
2025-02-04 10:57:22,343 - [INFO] - app.services.grade_service - delete_grade() - Grade ID: 56b11874-c105-4029-933d-cf6a4ac90155 deleted successfully.
2025-02-04 10:57:22,419 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:22,420 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:22,423 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:22,424 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:22,952 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e6d31e4d-f828-4675-9b01-d81528732df4
2025-02-04 10:57:22,952 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: e6d31e4d-f828-4675-9b01-d81528732df4)
2025-02-04 10:57:22,952 - [DEBUG] - app.services.user_service - get_all_users() - Fetching all users from the database.
2025-02-04 10:57:22,957 - [INFO] - app.services.user_service - get_all_users() - Fetched 3 users from the database.
2025-02-04 10:57:22,957 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '160c7590-983e-43f3-8f66-60786b36f2c0', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-04T09:57:23', 'updated_at': '2025-02-04T09:57:23', 'courses_enrolled': []}
2025-02-04 10:57:22,957 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '3c47a6a8-2230-4dfb-8a52-ea78e1953cf3', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-04T09:57:23', 'updated_at': '2025-02-04T09:57:23', 'courses_enrolled': []}
2025-02-04 10:57:22,957 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'e6d31e4d-f828-4675-9b01-d81528732df4', 'name': 'admin', 'email': 'admin@example.com', 'role': 'Administrator', 'created_at': '2025-02-04T09:57:23', 'updated_at': '2025-02-04T09:57:23', 'courses_enrolled': []}
2025-02-04 10:57:23,031 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:23,032 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:23,036 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:23,036 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:23,597 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b140911b-7992-4f5e-b675-715efbc357d0
2025-02-04 10:57:23,597 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: b140911b-7992-4f5e-b675-715efbc357d0)
2025-02-04 10:57:23,597 - [WARNING] - app.controllers.user_controller - list_users() - Unauthorized access attempt by user ID: b140911b-7992-4f5e-b675-715efbc357d0
2025-02-04 10:57:23,672 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:23,674 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:23,677 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:23,678 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:24,205 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2ecbc4fb-cc72-44a0-ad74-6f5d734f547a
2025-02-04 10:57:24,205 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 2ecbc4fb-cc72-44a0-ad74-6f5d734f547a)
2025-02-04 10:57:24,205 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4e11bfb2-1d31-407f-9010-1a63d27c037c
2025-02-04 10:57:24,205 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 4e11bfb2-1d31-407f-9010-1a63d27c037c)
2025-02-04 10:57:24,205 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '4e11bfb2-1d31-407f-9010-1a63d27c037c', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-04T09:57:24', 'updated_at': '2025-02-04T09:57:24', 'courses_enrolled': []}
2025-02-04 10:57:24,289 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:24,290 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:24,293 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:24,294 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:24,819 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 11e1df3e-b3fe-48fb-ae63-24173635dc57
2025-02-04 10:57:24,819 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 11e1df3e-b3fe-48fb-ae63-24173635dc57)
2025-02-04 10:57:24,819 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 11e1df3e-b3fe-48fb-ae63-24173635dc57
2025-02-04 10:57:24,819 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 11e1df3e-b3fe-48fb-ae63-24173635dc57)
2025-02-04 10:57:24,819 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '11e1df3e-b3fe-48fb-ae63-24173635dc57', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-04T09:57:25', 'updated_at': '2025-02-04T09:57:25', 'courses_enrolled': []}
2025-02-04 10:57:24,891 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:24,892 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:24,895 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:24,896 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:25,422 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3e101caf-4844-4a4a-bf13-c0466bf54cd2
2025-02-04 10:57:25,422 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 3e101caf-4844-4a4a-bf13-c0466bf54cd2)
2025-02-04 10:57:25,422 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: nonexistent-user-id
2025-02-04 10:57:25,426 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: nonexistent-user-id
2025-02-04 10:57:25,426 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID nonexistent-user-id
2025-02-04 10:57:25,498 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:25,500 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:25,503 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:25,503 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:26,028 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2f7d0c66-702a-4eff-bb1f-253a213679c3
2025-02-04 10:57:26,028 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 2f7d0c66-702a-4eff-bb1f-253a213679c3)
2025-02-04 10:57:26,028 - [DEBUG] - app.services.user_service - search_users() - Searching users with query: student
2025-02-04 10:57:26,032 - [INFO] - app.services.user_service - search_users() - Found 1 users matching query 'student'.
2025-02-04 10:57:26,032 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'bbc4a60c-789c-4746-b7f9-68d9b23766f8', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-04T09:57:26', 'updated_at': '2025-02-04T09:57:26', 'courses_enrolled': []}
2025-02-04 10:57:26,112 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:26,113 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:26,117 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:26,117 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:26,676 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2332bf4a-e894-49c5-9c58-4ec826a98895
2025-02-04 10:57:26,676 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 2332bf4a-e894-49c5-9c58-4ec826a98895)
2025-02-04 10:57:26,676 - [WARNING] - app.controllers.user_controller - search_users() - Unauthorized access attempt by user ID: 2332bf4a-e894-49c5-9c58-4ec826a98895
2025-02-04 10:57:26,767 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:26,768 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:26,771 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:26,772 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:27,306 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 63f4733c-66aa-43f0-84c6-b705029c1c9f
2025-02-04 10:57:27,306 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 63f4733c-66aa-43f0-84c6-b705029c1c9f)
2025-02-04 10:57:27,307 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Missing fields.
2025-02-04 10:57:27,384 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:27,385 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:27,388 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:27,389 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:27,918 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 71a92424-5a69-4c51-8baa-861de1461b29
2025-02-04 10:57:27,918 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 71a92424-5a69-4c51-8baa-861de1461b29)
2025-02-04 10:57:27,918 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Invalid role 'Administrator'.
2025-02-04 10:57:27,998 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:27,999 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:28,002 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:28,003 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:28,521 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 49ac1715-7e4f-48f3-a5e7-5995a1f30b6e
2025-02-04 10:57:28,521 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 49ac1715-7e4f-48f3-a5e7-5995a1f30b6e)
2025-02-04 10:57:28,521 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newstudent@example.com
2025-02-04 10:57:28,525 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newstudent@example.com
2025-02-04 10:57:28,526 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Student, Email: newstudent@example.com, Role: Student
2025-02-04 10:57:28,643 - [INFO] - app.services.user_service - create_user() - User created with ID: 8f86d542-8ef9-47aa-a93d-5734b3f89833
2025-02-04 10:57:28,643 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8f86d542-8ef9-47aa-a93d-5734b3f89833
2025-02-04 10:57:28,643 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: 8f86d542-8ef9-47aa-a93d-5734b3f89833)
2025-02-04 10:57:28,643 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '8f86d542-8ef9-47aa-a93d-5734b3f89833', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-04T09:57:29', 'updated_at': '2025-02-04T09:57:29', 'courses_enrolled': []}
2025-02-04 10:57:28,645 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 49ac1715-7e4f-48f3-a5e7-5995a1f30b6e
2025-02-04 10:57:28,646 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 49ac1715-7e4f-48f3-a5e7-5995a1f30b6e)
2025-02-04 10:57:28,646 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8f86d542-8ef9-47aa-a93d-5734b3f89833
2025-02-04 10:57:28,649 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: 8f86d542-8ef9-47aa-a93d-5734b3f89833)
2025-02-04 10:57:28,649 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '8f86d542-8ef9-47aa-a93d-5734b3f89833', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-04T09:57:29', 'updated_at': '2025-02-04T09:57:29', 'courses_enrolled': []}
2025-02-04 10:57:28,721 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:28,722 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:28,726 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:28,726 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:29,239 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 151225b5-421a-4ace-b555-36fbdf8105f8
2025-02-04 10:57:29,239 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 151225b5-421a-4ace-b555-36fbdf8105f8)
2025-02-04 10:57:29,239 - [WARNING] - app.controllers.user_controller - update_user() - Unauthorized access attempt by user ID: 151225b5-421a-4ace-b555-36fbdf8105f8
2025-02-04 10:57:29,319 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:29,320 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:29,324 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:29,325 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:29,848 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4295225a-57f1-4cb6-8c01-e6b0f292ba42
2025-02-04 10:57:29,848 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 4295225a-57f1-4cb6-8c01-e6b0f292ba42)
2025-02-04 10:57:29,848 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4295225a-57f1-4cb6-8c01-e6b0f292ba42
2025-02-04 10:57:29,848 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 4295225a-57f1-4cb6-8c01-e6b0f292ba42)
2025-02-04 10:57:29,848 - [DEBUG] - app.services.user_service - update_user() - Updating user ID: 4295225a-57f1-4cb6-8c01-e6b0f292ba42 with Name: Updated Professor Name, Email: unchanged
2025-02-04 10:57:29,858 - [INFO] - app.services.user_service - update_user() - User ID: 4295225a-57f1-4cb6-8c01-e6b0f292ba42 updated successfully.
2025-02-04 10:57:29,858 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4295225a-57f1-4cb6-8c01-e6b0f292ba42
2025-02-04 10:57:29,858 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Updated Professor Name (ID: 4295225a-57f1-4cb6-8c01-e6b0f292ba42)
2025-02-04 10:57:29,858 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '4295225a-57f1-4cb6-8c01-e6b0f292ba42', 'name': 'Updated Professor Name', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-04T09:57:30', 'updated_at': '2025-02-04T09:57:30', 'courses_enrolled': []}
2025-02-04 10:57:29,929 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 10:57:29,930 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 10:57:29,935 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 10:57:29,935 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 10:57:30,465 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7faeed14-69a3-48f7-a44a-2d4530568176
2025-02-04 10:57:30,465 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 7faeed14-69a3-48f7-a44a-2d4530568176)
2025-02-04 10:57:30,466 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: tempstudent@example.com
2025-02-04 10:57:30,470 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: tempstudent@example.com
2025-02-04 10:57:30,470 - [DEBUG] - app.services.user_service - create_user() - Creating user: Temp Student, Email: tempstudent@example.com, Role: Student
2025-02-04 10:57:30,587 - [INFO] - app.services.user_service - create_user() - User created with ID: cc842a33-ed9c-4ea2-8b2f-8ae352947f75
2025-02-04 10:57:30,587 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: cc842a33-ed9c-4ea2-8b2f-8ae352947f75
2025-02-04 10:57:30,587 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: cc842a33-ed9c-4ea2-8b2f-8ae352947f75)
2025-02-04 10:57:30,587 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'cc842a33-ed9c-4ea2-8b2f-8ae352947f75', 'name': 'Temp Student', 'email': 'tempstudent@example.com', 'role': 'Student', 'created_at': '2025-02-04T09:57:31', 'updated_at': '2025-02-04T09:57:31', 'courses_enrolled': []}
2025-02-04 10:57:30,589 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7faeed14-69a3-48f7-a44a-2d4530568176
2025-02-04 10:57:30,590 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 7faeed14-69a3-48f7-a44a-2d4530568176)
2025-02-04 10:57:30,590 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: cc842a33-ed9c-4ea2-8b2f-8ae352947f75
2025-02-04 10:57:30,594 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: cc842a33-ed9c-4ea2-8b2f-8ae352947f75)
2025-02-04 10:57:30,594 - [DEBUG] - app.services.user_service - delete_user() - Deleting user ID: cc842a33-ed9c-4ea2-8b2f-8ae352947f75
2025-02-04 10:57:30,599 - [INFO] - app.services.user_service - delete_user() - User ID: cc842a33-ed9c-4ea2-8b2f-8ae352947f75 deleted successfully.
2025-02-04 10:57:30,600 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7faeed14-69a3-48f7-a44a-2d4530568176
2025-02-04 10:57:30,601 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 7faeed14-69a3-48f7-a44a-2d4530568176)
2025-02-04 10:57:30,601 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: cc842a33-ed9c-4ea2-8b2f-8ae352947f75
2025-02-04 10:57:30,602 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: cc842a33-ed9c-4ea2-8b2f-8ae352947f75
2025-02-04 10:57:30,602 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID cc842a33-ed9c-4ea2-8b2f-8ae352947f75
2025-02-04 11:22:50,963 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:22:58,848 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:23:16,689 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:23:39,164 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:23:45,988 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:23:46,028 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:23:46,036 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:23:46,037 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:23:46,066 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-04 11:23:46,071 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-04 11:23:46,075 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-04 11:23:46,082 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-04 11:23:46,092 - [INFO] - app - main() - Starting Flask application.
2025-02-04 11:38:56,232 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:38:56,269 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:38:56,278 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:38:56,279 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:38:56,299 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-04 11:38:56,308 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-04 11:38:56,309 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-04 11:38:56,312 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-04 11:38:56,322 - [INFO] - app - main() - Starting Flask application.
2025-02-04 11:59:36,520 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:36,562 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:36,574 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:36,574 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:36,589 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-04 11:59:36,597 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-04 11:59:36,601 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-04 11:59:36,608 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-04 11:59:37,199 - [WARNING] - app.controllers.auth_controller - register() - Missing fields: ['role']
2025-02-04 11:59:37,279 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:37,280 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:37,284 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:37,284 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:37,848 - [WARNING] - app.controllers.auth_controller - register() - Invalid email format during registration.
2025-02-04 11:59:37,923 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:37,924 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:37,928 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:37,929 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:38,509 - [WARNING] - app.controllers.auth_controller - register() - Password requirements not met during registration.
2025-02-04 11:59:38,590 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:38,591 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:38,596 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:38,597 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:39,196 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 04956848-9602-459c-8f74-af9ebd1ce880
2025-02-04 11:59:39,196 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 04956848-9602-459c-8f74-af9ebd1ce880)
2025-02-04 11:59:39,196 - [WARNING] - app.controllers.auth_controller - register() - Unauthorized registration attempt by user ID: 04956848-9602-459c-8f74-af9ebd1ce880
2025-02-04 11:59:39,281 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:39,282 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:39,287 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:39,287 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:39,840 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 12144609-b7a6-4437-8905-657fbde6aca6
2025-02-04 11:59:39,841 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 12144609-b7a6-4437-8905-657fbde6aca6)
2025-02-04 11:59:39,841 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newprofadmin@example.com
2025-02-04 11:59:39,846 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newprofadmin@example.com
2025-02-04 11:59:39,846 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Professor Admin, Email: newprofadmin@example.com, Role: Professor
2025-02-04 11:59:39,967 - [INFO] - app.services.user_service - create_user() - User created with ID: 666b80b3-81a3-4b99-9330-54ca4bad671f
2025-02-04 11:59:39,967 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: 666b80b3-81a3-4b99-9330-54ca4bad671f
2025-02-04 11:59:40,046 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:40,047 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:40,052 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:40,053 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:40,593 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 299b9c4a-08f1-43cc-8285-bbdb929fab4b
2025-02-04 11:59:40,593 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 299b9c4a-08f1-43cc-8285-bbdb929fab4b)
2025-02-04 11:59:40,593 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-04 11:59:40,598 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: conflict@example.com
2025-02-04 11:59:40,598 - [DEBUG] - app.services.user_service - create_user() - Creating user: Conflict User, Email: conflict@example.com, Role: Student
2025-02-04 11:59:40,720 - [INFO] - app.services.user_service - create_user() - User created with ID: bbb0a8c7-a8b4-4cbf-a13e-d4f55060a39e
2025-02-04 11:59:40,721 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: bbb0a8c7-a8b4-4cbf-a13e-d4f55060a39e
2025-02-04 11:59:40,722 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 299b9c4a-08f1-43cc-8285-bbdb929fab4b
2025-02-04 11:59:40,723 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 299b9c4a-08f1-43cc-8285-bbdb929fab4b)
2025-02-04 11:59:40,723 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-04 11:59:40,724 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: Conflict User (ID: bbb0a8c7-a8b4-4cbf-a13e-d4f55060a39e)
2025-02-04 11:59:40,724 - [WARNING] - app.controllers.auth_controller - register() - Email already in use during registration.
2025-02-04 11:59:40,800 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:40,801 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:40,806 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:40,806 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:41,373 - [WARNING] - app.controllers.auth_controller - login() - Login failed: Missing credentials.
2025-02-04 11:59:41,446 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:41,447 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:41,451 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:41,452 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:41,993 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: doesnotexist@example.com
2025-02-04 11:59:41,994 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: doesnotexist@example.com
2025-02-04 11:59:41,998 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: doesnotexist@example.com
2025-02-04 11:59:41,998 - [WARNING] - app.services.auth_service - authenticate_user() - No user found with email: doesnotexist@example.com
2025-02-04 11:59:41,998 - [WARNING] - app.controllers.auth_controller - login() - Invalid credentials during login.
2025-02-04 11:59:42,079 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:42,080 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:42,084 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:42,084 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:42,617 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-04 11:59:42,617 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 11:59:42,622 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 83a1e5a8-bbd2-4591-8f34-eef265ea1c3a)
2025-02-04 11:59:42,731 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: 83a1e5a8-bbd2-4591-8f34-eef265ea1c3a) authenticated successfully.
2025-02-04 11:59:42,731 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: 83a1e5a8-bbd2-4591-8f34-eef265ea1c3a
2025-02-04 11:59:42,732 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '83a1e5a8-bbd2-4591-8f34-eef265ea1c3a', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-04T10:59:43', 'updated_at': '2025-02-04T10:59:43', 'courses_enrolled': []}
2025-02-04 11:59:42,809 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:42,810 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:42,815 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:42,816 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:43,369 - [WARNING] - app.controllers.auth_controller - change_password() - Change password failed: Missing required fields.
2025-02-04 11:59:43,447 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:43,448 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:43,451 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:43,451 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:44,041 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 11:59:44,045 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: ead6f52a-c9e0-4a60-9d5f-ee47beca151f)
2025-02-04 11:59:44,153 - [WARNING] - app.controllers.auth_controller - change_password() - Incorrect current password during password change.
2025-02-04 11:59:44,231 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:44,232 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:44,235 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:44,236 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:44,768 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 11:59:44,773 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 839d6b16-bbcb-4829-8c9a-df9b2f726ff8)
2025-02-04 11:59:44,885 - [WARNING] - app.controllers.auth_controller - change_password() - New password requirements not met.
2025-02-04 11:59:44,961 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:44,962 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:44,966 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:44,966 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:45,510 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 11:59:45,514 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55)
2025-02-04 11:59:45,623 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55
2025-02-04 11:59:45,857 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55
2025-02-04 11:59:45,857 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55
2025-02-04 11:59:45,859 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-04 11:59:45,859 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 11:59:45,860 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55)
2025-02-04 11:59:45,969 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55) authenticated successfully.
2025-02-04 11:59:45,969 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55
2025-02-04 11:59:45,969 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'fcda15b0-8d7c-4505-96bc-cc1adaf80f55', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-04T10:59:45', 'updated_at': '2025-02-04T10:59:46', 'courses_enrolled': []}
2025-02-04 11:59:45,971 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-04 11:59:45,972 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55)
2025-02-04 11:59:46,082 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55
2025-02-04 11:59:46,350 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55
2025-02-04 11:59:46,351 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: fcda15b0-8d7c-4505-96bc-cc1adaf80f55
2025-02-04 11:59:46,423 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:46,424 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:46,427 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:46,428 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:46,974 - [INFO] - app.controllers.course_controller - list_courses() - Listing courses - Page: 1, Per Page: 10
2025-02-04 11:59:46,974 - [DEBUG] - app.services.course_service - get_all_courses_paginated() - Fetching courses - Page: 1, Per Page: 10
2025-02-04 11:59:46,977 - [INFO] - app.services.course_service - get_all_courses_paginated() - Retrieved 1 courses on page 1.
2025-02-04 11:59:46,978 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: a21163b2-a0bd-45f3-8dbb-e4a370122ae6
2025-02-04 11:59:46,978 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'a21163b2-a0bd-45f3-8dbb-e4a370122ae6', 'name': 'Test Course', 'professor_id': '5f3e74e2-020a-40b5-a8ab-0e85e713febe', 'created_at': '2025-02-04T10:59:47', 'updated_at': '2025-02-04T10:59:47'}
2025-02-04 11:59:47,052 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:47,053 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:47,057 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:47,058 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:47,637 - [INFO] - app.controllers.course_controller - get_course() - Retrieving course with ID: 496f740b-e111-41fb-865f-2a5a9eedbc7a
2025-02-04 11:59:47,637 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 496f740b-e111-41fb-865f-2a5a9eedbc7a
2025-02-04 11:59:47,637 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 496f740b-e111-41fb-865f-2a5a9eedbc7a)
2025-02-04 11:59:47,637 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 496f740b-e111-41fb-865f-2a5a9eedbc7a
2025-02-04 11:59:47,637 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '496f740b-e111-41fb-865f-2a5a9eedbc7a', 'name': 'Test Course', 'professor_id': '22c74fc5-09b0-4001-a089-912b2c4ddeb2', 'created_at': '2025-02-04T10:59:48', 'updated_at': '2025-02-04T10:59:48'}
2025-02-04 11:59:47,809 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:47,811 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:47,816 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:47,816 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:48,353 - [INFO] - app.controllers.course_controller - search_courses() - Searching courses with query: 'Test'
2025-02-04 11:59:48,354 - [DEBUG] - app.services.course_service - search_courses_by_name() - Searching courses with name containing: Test
2025-02-04 11:59:48,355 - [INFO] - app.services.course_service - search_courses_by_name() - Found 1 courses matching query 'Test'.
2025-02-04 11:59:48,355 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 0481b34a-45dc-423b-b650-a8bb508ad374
2025-02-04 11:59:48,355 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '0481b34a-45dc-423b-b650-a8bb508ad374', 'name': 'Test Course', 'professor_id': 'cf81e448-3b36-4746-983b-929793675ad4', 'created_at': '2025-02-04T10:59:48', 'updated_at': '2025-02-04T10:59:48'}
2025-02-04 11:59:48,428 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:48,428 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:48,432 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:48,433 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:49,001 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: d4a78505-a44b-47a3-93cf-f91ddad67d5c
2025-02-04 11:59:49,001 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: d4a78505-a44b-47a3-93cf-f91ddad67d5c)
2025-02-04 11:59:49,001 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: f555cfcd-eb3e-48fa-9241-96bd7c4c0a7f
2025-02-04 11:59:49,001 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: f555cfcd-eb3e-48fa-9241-96bd7c4c0a7f)
2025-02-04 11:59:49,001 - [DEBUG] - app.services.course_service - get_students_in_course() - Fetching students in course ID: f555cfcd-eb3e-48fa-9241-96bd7c4c0a7f
2025-02-04 11:59:49,002 - [INFO] - app.services.course_service - get_students_in_course() - Retrieved 0 students for course ID: f555cfcd-eb3e-48fa-9241-96bd7c4c0a7f.
2025-02-04 11:59:49,097 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:49,098 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:49,102 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:49,102 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:49,640 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3cd35c58-bb6e-4b1c-bd1c-25f2a59f100f
2025-02-04 11:59:49,641 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 3cd35c58-bb6e-4b1c-bd1c-25f2a59f100f)
2025-02-04 11:59:49,641 - [WARNING] - app.controllers.course_controller - create_course() - Unauthorized course creation attempt by user ID: 3cd35c58-bb6e-4b1c-bd1c-25f2a59f100f
2025-02-04 11:59:49,742 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:49,743 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:49,746 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:49,747 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:50,284 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: f7152a2b-22fc-4f61-8879-0a89d91bfc07
2025-02-04 11:59:50,284 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: f7152a2b-22fc-4f61-8879-0a89d91bfc07)
2025-02-04 11:59:50,284 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: d9b6b39a-2ec3-4748-afa9-e8cbe3d7f35b
2025-02-04 11:59:50,284 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: d9b6b39a-2ec3-4748-afa9-e8cbe3d7f35b)
2025-02-04 11:59:50,284 - [DEBUG] - app.services.course_service - update_course() - Updating course ID: d9b6b39a-2ec3-4748-afa9-e8cbe3d7f35b with new name: Updated Test Course
2025-02-04 11:59:50,290 - [INFO] - app.services.course_service - update_course() - Course ID: d9b6b39a-2ec3-4748-afa9-e8cbe3d7f35b updated successfully.
2025-02-04 11:59:50,290 - [INFO] - app.controllers.course_controller - update_course() - Course updated successfully with ID: d9b6b39a-2ec3-4748-afa9-e8cbe3d7f35b
2025-02-04 11:59:50,290 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: d9b6b39a-2ec3-4748-afa9-e8cbe3d7f35b
2025-02-04 11:59:50,290 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'd9b6b39a-2ec3-4748-afa9-e8cbe3d7f35b', 'name': 'Updated Test Course', 'professor_id': 'f7152a2b-22fc-4f61-8879-0a89d91bfc07', 'created_at': '2025-02-04T10:59:50', 'updated_at': '2025-02-04T10:59:50'}
2025-02-04 11:59:50,365 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:50,366 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:50,370 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:50,370 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:50,894 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3bc489fa-5754-4b66-8020-2bc87cd134b8
2025-02-04 11:59:50,894 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 3bc489fa-5754-4b66-8020-2bc87cd134b8)
2025-02-04 11:59:50,894 - [WARNING] - app.controllers.course_controller - delete_course() - Unauthorized course deletion attempt by user ID: 3bc489fa-5754-4b66-8020-2bc87cd134b8
2025-02-04 11:59:50,972 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:50,973 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:50,977 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:50,977 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:51,510 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 31f8cf69-f2c4-4087-ad3c-a7ba42ecbc77
2025-02-04 11:59:51,510 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 31f8cf69-f2c4-4087-ad3c-a7ba42ecbc77)
2025-02-04 11:59:51,510 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 6cd57e08-510f-469d-8b6d-7a443bed3da9
2025-02-04 11:59:51,511 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 6cd57e08-510f-469d-8b6d-7a443bed3da9)
2025-02-04 11:59:51,511 - [DEBUG] - app.services.course_service - delete_course() - Deleting course ID: 6cd57e08-510f-469d-8b6d-7a443bed3da9
2025-02-04 11:59:51,521 - [INFO] - app.services.course_service - delete_course() - Course ID: 6cd57e08-510f-469d-8b6d-7a443bed3da9 deleted successfully.
2025-02-04 11:59:51,521 - [INFO] - app.controllers.course_controller - delete_course() - Course deleted successfully with ID: 6cd57e08-510f-469d-8b6d-7a443bed3da9
2025-02-04 11:59:51,603 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:51,605 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:51,608 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:51,608 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:52,172 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: d1a575c6-92fe-4678-9613-d93f4704148f
2025-02-04 11:59:52,172 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: d1a575c6-92fe-4678-9613-d93f4704148f)
2025-02-04 11:59:52,172 - [WARNING] - app.controllers.grade_controller - list_grades() - Unauthorized access attempt by user ID: d1a575c6-92fe-4678-9613-d93f4704148f
2025-02-04 11:59:52,258 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:52,260 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:52,264 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:52,264 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:52,799 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 449e0063-f283-453f-a2e8-6a5f703b04f5
2025-02-04 11:59:52,799 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 449e0063-f283-453f-a2e8-6a5f703b04f5)
2025-02-04 11:59:52,800 - [DEBUG] - app.services.grade_service - list_grades() - Retrieving all grades from the database.
2025-02-04 11:59:52,800 - [INFO] - app.services.grade_service - list_grades() - Retrieved 1 grades.
2025-02-04 11:59:52,801 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 442fb899-0876-4228-86b2-b74a50acb507
2025-02-04 11:59:52,801 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '442fb899-0876-4228-86b2-b74a50acb507', 'course_id': 'ea49fa1f-f65f-4787-9922-a4ecf333b295', 'student_id': '5a69100e-d97f-4653-a4ac-cfe74dca53f7', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-04T10:59:53', 'updated_at': '2025-02-04T10:59:53'}
2025-02-04 11:59:52,871 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:52,871 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:52,875 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:52,876 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:53,401 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8cf07ca2-45d2-47f2-a325-8c530521e3c4
2025-02-04 11:59:53,401 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 8cf07ca2-45d2-47f2-a325-8c530521e3c4)
2025-02-04 11:59:53,402 - [WARNING] - app.controllers.grade_controller - assign_grade() - Missing required fields in grade assignment: {}
2025-02-04 11:59:53,476 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:53,477 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:53,481 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:53,481 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:54,017 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 37024676-04f4-44a5-96f5-70f23ef2d522
2025-02-04 11:59:54,017 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 37024676-04f4-44a5-96f5-70f23ef2d522)
2025-02-04 11:59:54,017 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: fc2982cb-613f-48c3-8c8b-38ef9bf71a0a
2025-02-04 11:59:54,017 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: fc2982cb-613f-48c3-8c8b-38ef9bf71a0a)
2025-02-04 11:59:54,018 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: invalid_student_id
2025-02-04 11:59:54,021 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: invalid_student_id
2025-02-04 11:59:54,021 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=fc2982cb-613f-48c3-8c8b-38ef9bf71a0a, student_id=invalid_student_id
2025-02-04 11:59:54,090 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:54,091 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:54,095 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:54,095 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:54,623 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6950aea4-d8e2-407c-b312-10a23e2fd3b7
2025-02-04 11:59:54,623 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 6950aea4-d8e2-407c-b312-10a23e2fd3b7)
2025-02-04 11:59:54,624 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: invalid_course_id
2025-02-04 11:59:54,625 - [DEBUG] - app.services.course_service - get_course_by_id() - No course found with ID: invalid_course_id
2025-02-04 11:59:54,625 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: d45436e8-9617-496a-bcbd-91fa7afe6553
2025-02-04 11:59:54,625 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: d45436e8-9617-496a-bcbd-91fa7afe6553)
2025-02-04 11:59:54,625 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=invalid_course_id, student_id=d45436e8-9617-496a-bcbd-91fa7afe6553
2025-02-04 11:59:54,716 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:54,717 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:54,721 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:54,721 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:55,284 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: d5690f59-5c26-4e64-9493-68ac252f584d
2025-02-04 11:59:55,284 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: d5690f59-5c26-4e64-9493-68ac252f584d)
2025-02-04 11:59:55,284 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 297e1000-c822-43bb-8f37-7e374b6b163d
2025-02-04 11:59:55,284 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 297e1000-c822-43bb-8f37-7e374b6b163d)
2025-02-04 11:59:55,285 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8b96933c-2975-4ec7-b53c-80e3ca1f5484
2025-02-04 11:59:55,285 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 8b96933c-2975-4ec7-b53c-80e3ca1f5484)
2025-02-04 11:59:55,285 - [DEBUG] - app.services.grade_service - assign_grade() - Assigning grade 90 to student 8b96933c-2975-4ec7-b53c-80e3ca1f5484 for course 297e1000-c822-43bb-8f37-7e374b6b163d.
2025-02-04 11:59:55,291 - [INFO] - app.services.grade_service - assign_grade() - Grade assigned: b66afb48-df84-4d40-8d7a-9aeeb5ba3d25, Value: 90.0
2025-02-04 11:59:55,291 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: b66afb48-df84-4d40-8d7a-9aeeb5ba3d25
2025-02-04 11:59:55,291 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'b66afb48-df84-4d40-8d7a-9aeeb5ba3d25', 'course_id': '297e1000-c822-43bb-8f37-7e374b6b163d', 'student_id': '8b96933c-2975-4ec7-b53c-80e3ca1f5484', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-04T10:59:55', 'updated_at': '2025-02-04T10:59:55'}
2025-02-04 11:59:55,364 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:55,364 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:55,369 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:55,369 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:55,904 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c1c3549b-2f40-4151-b87a-5e2d447c9cfd
2025-02-04 11:59:55,904 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: c1c3549b-2f40-4151-b87a-5e2d447c9cfd)
2025-02-04 11:59:55,904 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: bfdb0944-ec7a-4479-8156-2ff862375390
2025-02-04 11:59:55,904 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: bfdb0944-ec7a-4479-8156-2ff862375390, Grade Value: 90.0
2025-02-04 11:59:55,904 - [WARNING] - app.controllers.grade_controller - get_grade() - Unauthorized grade access attempt by user ID: c1c3549b-2f40-4151-b87a-5e2d447c9cfd
2025-02-04 11:59:55,982 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:55,983 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:55,987 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:55,987 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:56,514 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 979f5ded-870a-4921-845f-541efffaec06
2025-02-04 11:59:56,514 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 979f5ded-870a-4921-845f-541efffaec06)
2025-02-04 11:59:56,515 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: d19a1fd7-83ec-411e-8c0d-cb80b14e03c8
2025-02-04 11:59:56,515 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: d19a1fd7-83ec-411e-8c0d-cb80b14e03c8, Grade Value: 90.0
2025-02-04 11:59:56,515 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: d19a1fd7-83ec-411e-8c0d-cb80b14e03c8
2025-02-04 11:59:56,515 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'd19a1fd7-83ec-411e-8c0d-cb80b14e03c8', 'course_id': 'e48ea3ee-dfe5-4f91-ab96-d128210bef75', 'student_id': 'eb7c839f-481b-419b-b86e-7ef2a253cac8', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-04T10:59:57', 'updated_at': '2025-02-04T10:59:57'}
2025-02-04 11:59:56,597 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:56,598 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:56,601 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:56,602 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:57,152 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b09162ea-48a0-4440-b0be-343c6d511933
2025-02-04 11:59:57,152 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: b09162ea-48a0-4440-b0be-343c6d511933)
2025-02-04 11:59:57,153 - [WARNING] - app.controllers.grade_controller - update_grade() - Unauthorized grade update attempt by user ID: b09162ea-48a0-4440-b0be-343c6d511933
2025-02-04 11:59:57,227 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:57,228 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:57,232 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:57,232 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:57,758 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3092284c-3b6b-4ddb-aabe-4f4cbc301466
2025-02-04 11:59:57,758 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 3092284c-3b6b-4ddb-aabe-4f4cbc301466)
2025-02-04 11:59:57,758 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: a21ac4a3-bddc-441b-99b5-a27aa5ec2112
2025-02-04 11:59:57,758 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: a21ac4a3-bddc-441b-99b5-a27aa5ec2112, Grade Value: 90.0
2025-02-04 11:59:57,758 - [WARNING] - app.controllers.grade_controller - update_grade() - Missing grade value for update: {}
2025-02-04 11:59:57,836 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:57,837 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:57,841 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:57,842 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:58,417 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 48d7cdc8-dc3c-498f-88ac-cf45cd164733
2025-02-04 11:59:58,417 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 48d7cdc8-dc3c-498f-88ac-cf45cd164733)
2025-02-04 11:59:58,417 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 260f7ece-db60-4c77-b721-5dd07bf2c9a2
2025-02-04 11:59:58,417 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 260f7ece-db60-4c77-b721-5dd07bf2c9a2, Grade Value: 90.0
2025-02-04 11:59:58,417 - [DEBUG] - app.services.grade_service - update_grade() - Updating grade ID: 260f7ece-db60-4c77-b721-5dd07bf2c9a2 to new value: 95.
2025-02-04 11:59:58,422 - [INFO] - app.services.grade_service - update_grade() - Grade ID: 260f7ece-db60-4c77-b721-5dd07bf2c9a2 updated to value: 95.
2025-02-04 11:59:58,423 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 260f7ece-db60-4c77-b721-5dd07bf2c9a2
2025-02-04 11:59:58,423 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '260f7ece-db60-4c77-b721-5dd07bf2c9a2', 'course_id': '7efc2e54-98d9-4a82-b3cc-4bef2a0a2d1b', 'student_id': 'ccb2dc18-1fab-431b-ba51-7f76de3f3b15', 'grade': 95.0, 'name': 'DM', 'created_at': '2025-02-04T10:59:58', 'updated_at': '2025-02-04T10:59:58'}
2025-02-04 11:59:58,500 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:58,501 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:58,505 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:58,505 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:59,055 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: f0b8988a-e47b-4f0b-a4dc-c958609f6a35
2025-02-04 11:59:59,055 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: f0b8988a-e47b-4f0b-a4dc-c958609f6a35)
2025-02-04 11:59:59,055 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: ff6637af-b3c3-4624-9982-c940efcadc67
2025-02-04 11:59:59,055 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: ff6637af-b3c3-4624-9982-c940efcadc67)
2025-02-04 11:59:59,055 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 80189ca2-109e-48d5-a346-11fb0e7a17e2
2025-02-04 11:59:59,055 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 80189ca2-109e-48d5-a346-11fb0e7a17e2)
2025-02-04 11:59:59,055 - [DEBUG] - app.services.grade_service - get_student_grades() - Fetching grades for student ID: 80189ca2-109e-48d5-a346-11fb0e7a17e2 in course ID: ff6637af-b3c3-4624-9982-c940efcadc67.
2025-02-04 11:59:59,056 - [INFO] - app.services.grade_service - get_student_grades() - Retrieved 1 grades for student ID: 80189ca2-109e-48d5-a346-11fb0e7a17e2 in course ID: ff6637af-b3c3-4624-9982-c940efcadc67.
2025-02-04 11:59:59,057 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: bd315a79-b6a4-46a5-baf3-fcd900673b1f
2025-02-04 11:59:59,057 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'bd315a79-b6a4-46a5-baf3-fcd900673b1f', 'course_id': 'ff6637af-b3c3-4624-9982-c940efcadc67', 'student_id': '80189ca2-109e-48d5-a346-11fb0e7a17e2', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-04T10:59:59', 'updated_at': '2025-02-04T10:59:59'}
2025-02-04 11:59:59,129 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:59,130 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:59,134 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:59,134 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 11:59:59,703 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 768a4a83-6c9c-4d65-b5f8-2e9a508cba8a
2025-02-04 11:59:59,703 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 768a4a83-6c9c-4d65-b5f8-2e9a508cba8a)
2025-02-04 11:59:59,703 - [WARNING] - app.controllers.grade_controller - delete_grade() - Unauthorized grade deletion attempt by user ID: 768a4a83-6c9c-4d65-b5f8-2e9a508cba8a
2025-02-04 11:59:59,798 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 11:59:59,799 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 11:59:59,802 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 11:59:59,802 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:00,351 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 12f42279-6ebc-4c6f-90ca-76fee9ef87a8
2025-02-04 12:00:00,351 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 12f42279-6ebc-4c6f-90ca-76fee9ef87a8)
2025-02-04 12:00:00,351 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 0f5ecbce-20cf-4e38-8f5d-d00bfbb7177c
2025-02-04 12:00:00,351 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 0f5ecbce-20cf-4e38-8f5d-d00bfbb7177c, Grade Value: 90.0
2025-02-04 12:00:00,351 - [DEBUG] - app.services.grade_service - delete_grade() - Deleting grade ID: 0f5ecbce-20cf-4e38-8f5d-d00bfbb7177c.
2025-02-04 12:00:00,357 - [INFO] - app.services.grade_service - delete_grade() - Grade ID: 0f5ecbce-20cf-4e38-8f5d-d00bfbb7177c deleted successfully.
2025-02-04 12:00:00,430 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:00,431 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:00,434 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:00,435 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:00,953 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: da358a6a-4024-4b32-8567-b65f0841440e
2025-02-04 12:00:00,953 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: da358a6a-4024-4b32-8567-b65f0841440e)
2025-02-04 12:00:00,953 - [DEBUG] - app.services.user_service - get_all_users() - Fetching all users from the database.
2025-02-04 12:00:00,958 - [INFO] - app.services.user_service - get_all_users() - Fetched 3 users from the database.
2025-02-04 12:00:00,958 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '5880c999-0c2d-437e-87b3-ee1986e5a96d', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-04T11:00:01', 'updated_at': '2025-02-04T11:00:01', 'courses_enrolled': []}
2025-02-04 12:00:00,958 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'a2fe0661-3811-459d-8685-533c7dcef276', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-04T11:00:01', 'updated_at': '2025-02-04T11:00:01', 'courses_enrolled': []}
2025-02-04 12:00:00,958 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'da358a6a-4024-4b32-8567-b65f0841440e', 'name': 'admin', 'email': 'admin@example.com', 'role': 'Administrator', 'created_at': '2025-02-04T11:00:01', 'updated_at': '2025-02-04T11:00:01', 'courses_enrolled': []}
2025-02-04 12:00:01,034 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:01,035 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:01,039 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:01,039 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:01,563 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7c138268-4d01-4a24-96b1-276465c32695
2025-02-04 12:00:01,563 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 7c138268-4d01-4a24-96b1-276465c32695)
2025-02-04 12:00:01,564 - [WARNING] - app.controllers.user_controller - list_users() - Unauthorized access attempt by user ID: 7c138268-4d01-4a24-96b1-276465c32695
2025-02-04 12:00:01,635 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:01,636 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:01,640 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:01,640 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:02,181 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 97eb8342-4e98-4ffd-8e4c-a91c690d8b15
2025-02-04 12:00:02,182 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 97eb8342-4e98-4ffd-8e4c-a91c690d8b15)
2025-02-04 12:00:02,182 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b6b63362-f526-4c78-a171-222394cb3618
2025-02-04 12:00:02,182 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: b6b63362-f526-4c78-a171-222394cb3618)
2025-02-04 12:00:02,182 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'b6b63362-f526-4c78-a171-222394cb3618', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-04T11:00:02', 'updated_at': '2025-02-04T11:00:02', 'courses_enrolled': []}
2025-02-04 12:00:02,256 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:02,257 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:02,261 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:02,262 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:02,790 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 90a12e74-5966-432e-92ba-d664d964b5de
2025-02-04 12:00:02,791 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 90a12e74-5966-432e-92ba-d664d964b5de)
2025-02-04 12:00:02,791 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 90a12e74-5966-432e-92ba-d664d964b5de
2025-02-04 12:00:02,791 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 90a12e74-5966-432e-92ba-d664d964b5de)
2025-02-04 12:00:02,791 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '90a12e74-5966-432e-92ba-d664d964b5de', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-04T11:00:03', 'updated_at': '2025-02-04T11:00:03', 'courses_enrolled': []}
2025-02-04 12:00:02,864 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:02,866 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:02,869 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:02,869 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:03,427 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b423d233-fdfb-48a3-a252-c410294cc96d
2025-02-04 12:00:03,427 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: b423d233-fdfb-48a3-a252-c410294cc96d)
2025-02-04 12:00:03,427 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: nonexistent-user-id
2025-02-04 12:00:03,431 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: nonexistent-user-id
2025-02-04 12:00:03,431 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID nonexistent-user-id
2025-02-04 12:00:03,503 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:03,504 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:03,507 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:03,508 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:04,040 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5be475c3-c4da-47ba-aa25-23721b707efe
2025-02-04 12:00:04,040 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 5be475c3-c4da-47ba-aa25-23721b707efe)
2025-02-04 12:00:04,040 - [DEBUG] - app.services.user_service - search_users() - Searching users with query: student
2025-02-04 12:00:04,044 - [INFO] - app.services.user_service - search_users() - Found 1 users matching query 'student'.
2025-02-04 12:00:04,044 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '05cfa9c2-ea07-4489-8c80-4bc40bacca57', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-04T11:00:04', 'updated_at': '2025-02-04T11:00:04', 'courses_enrolled': []}
2025-02-04 12:00:04,118 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:04,119 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:04,122 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:04,122 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:04,678 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5b80c5af-08f6-4b07-af3f-627e24e4a21a
2025-02-04 12:00:04,678 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 5b80c5af-08f6-4b07-af3f-627e24e4a21a)
2025-02-04 12:00:04,678 - [WARNING] - app.controllers.user_controller - search_users() - Unauthorized access attempt by user ID: 5b80c5af-08f6-4b07-af3f-627e24e4a21a
2025-02-04 12:00:04,769 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:04,771 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:04,775 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:04,775 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:05,318 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 40d073e4-13aa-40e1-9fc0-36f8f19aacf9
2025-02-04 12:00:05,318 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 40d073e4-13aa-40e1-9fc0-36f8f19aacf9)
2025-02-04 12:00:05,318 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Missing fields.
2025-02-04 12:00:05,394 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:05,395 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:05,399 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:05,399 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:05,929 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 84c59c37-f8ba-4ff8-9566-78be879257fe
2025-02-04 12:00:05,930 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 84c59c37-f8ba-4ff8-9566-78be879257fe)
2025-02-04 12:00:05,930 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Invalid role 'Administrator'.
2025-02-04 12:00:06,023 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:06,024 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:06,027 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:06,028 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:06,565 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 558d8288-575f-470f-b7ae-dddeed995496
2025-02-04 12:00:06,565 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 558d8288-575f-470f-b7ae-dddeed995496)
2025-02-04 12:00:06,565 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newstudent@example.com
2025-02-04 12:00:06,569 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newstudent@example.com
2025-02-04 12:00:06,569 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Student, Email: newstudent@example.com, Role: Student
2025-02-04 12:00:06,684 - [INFO] - app.services.user_service - create_user() - User created with ID: 0ba3a5af-bad9-4acf-af58-08d24180a168
2025-02-04 12:00:06,684 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0ba3a5af-bad9-4acf-af58-08d24180a168
2025-02-04 12:00:06,685 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: 0ba3a5af-bad9-4acf-af58-08d24180a168)
2025-02-04 12:00:06,685 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '0ba3a5af-bad9-4acf-af58-08d24180a168', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-04T11:00:07', 'updated_at': '2025-02-04T11:00:07', 'courses_enrolled': []}
2025-02-04 12:00:06,686 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 558d8288-575f-470f-b7ae-dddeed995496
2025-02-04 12:00:06,687 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 558d8288-575f-470f-b7ae-dddeed995496)
2025-02-04 12:00:06,687 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0ba3a5af-bad9-4acf-af58-08d24180a168
2025-02-04 12:00:06,690 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: 0ba3a5af-bad9-4acf-af58-08d24180a168)
2025-02-04 12:00:06,690 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '0ba3a5af-bad9-4acf-af58-08d24180a168', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-04T11:00:07', 'updated_at': '2025-02-04T11:00:07', 'courses_enrolled': []}
2025-02-04 12:00:06,792 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:06,793 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:06,797 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:06,797 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:07,342 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3370ea4f-ff9f-49c9-8924-e99807968ff9
2025-02-04 12:00:07,343 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 3370ea4f-ff9f-49c9-8924-e99807968ff9)
2025-02-04 12:00:07,343 - [WARNING] - app.controllers.user_controller - update_user() - Unauthorized access attempt by user ID: 3370ea4f-ff9f-49c9-8924-e99807968ff9
2025-02-04 12:00:07,420 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:07,421 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:07,425 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:07,425 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:07,935 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: d60c4e1f-9f67-43b1-a1bc-d53bb4db4067
2025-02-04 12:00:07,935 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: d60c4e1f-9f67-43b1-a1bc-d53bb4db4067)
2025-02-04 12:00:07,935 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: d60c4e1f-9f67-43b1-a1bc-d53bb4db4067
2025-02-04 12:00:07,935 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: d60c4e1f-9f67-43b1-a1bc-d53bb4db4067)
2025-02-04 12:00:07,935 - [DEBUG] - app.services.user_service - update_user() - Updating user ID: d60c4e1f-9f67-43b1-a1bc-d53bb4db4067 with Name: Updated Professor Name, Email: unchanged
2025-02-04 12:00:07,944 - [INFO] - app.services.user_service - update_user() - User ID: d60c4e1f-9f67-43b1-a1bc-d53bb4db4067 updated successfully.
2025-02-04 12:00:07,944 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: d60c4e1f-9f67-43b1-a1bc-d53bb4db4067
2025-02-04 12:00:07,944 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Updated Professor Name (ID: d60c4e1f-9f67-43b1-a1bc-d53bb4db4067)
2025-02-04 12:00:07,944 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'd60c4e1f-9f67-43b1-a1bc-d53bb4db4067', 'name': 'Updated Professor Name', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-04T11:00:08', 'updated_at': '2025-02-04T11:00:08', 'courses_enrolled': []}
2025-02-04 12:00:08,016 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:00:08,017 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:00:08,021 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:00:08,021 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:00:08,560 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 95eb8333-ec09-465c-9afa-e42c48f979c2
2025-02-04 12:00:08,560 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 95eb8333-ec09-465c-9afa-e42c48f979c2)
2025-02-04 12:00:08,561 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: tempstudent@example.com
2025-02-04 12:00:08,566 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: tempstudent@example.com
2025-02-04 12:00:08,566 - [DEBUG] - app.services.user_service - create_user() - Creating user: Temp Student, Email: tempstudent@example.com, Role: Student
2025-02-04 12:00:08,683 - [INFO] - app.services.user_service - create_user() - User created with ID: c9547043-fe39-4403-97c5-ae3098486b03
2025-02-04 12:00:08,683 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c9547043-fe39-4403-97c5-ae3098486b03
2025-02-04 12:00:08,683 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: c9547043-fe39-4403-97c5-ae3098486b03)
2025-02-04 12:00:08,683 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'c9547043-fe39-4403-97c5-ae3098486b03', 'name': 'Temp Student', 'email': 'tempstudent@example.com', 'role': 'Student', 'created_at': '2025-02-04T11:00:09', 'updated_at': '2025-02-04T11:00:09', 'courses_enrolled': []}
2025-02-04 12:00:08,685 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 95eb8333-ec09-465c-9afa-e42c48f979c2
2025-02-04 12:00:08,686 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 95eb8333-ec09-465c-9afa-e42c48f979c2)
2025-02-04 12:00:08,686 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c9547043-fe39-4403-97c5-ae3098486b03
2025-02-04 12:00:08,689 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: c9547043-fe39-4403-97c5-ae3098486b03)
2025-02-04 12:00:08,689 - [DEBUG] - app.services.user_service - delete_user() - Deleting user ID: c9547043-fe39-4403-97c5-ae3098486b03
2025-02-04 12:00:08,694 - [INFO] - app.services.user_service - delete_user() - User ID: c9547043-fe39-4403-97c5-ae3098486b03 deleted successfully.
2025-02-04 12:00:08,695 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 95eb8333-ec09-465c-9afa-e42c48f979c2
2025-02-04 12:00:08,696 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 95eb8333-ec09-465c-9afa-e42c48f979c2)
2025-02-04 12:00:08,696 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c9547043-fe39-4403-97c5-ae3098486b03
2025-02-04 12:00:08,697 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: c9547043-fe39-4403-97c5-ae3098486b03
2025-02-04 12:00:08,697 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID c9547043-fe39-4403-97c5-ae3098486b03
2025-02-04 12:34:33,738 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-04 12:34:33,785 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-04 12:34:33,796 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-04 12:34:33,796 - [INFO] - app - create_app() - MySQL is connected!
2025-02-04 12:34:33,806 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-04 12:34:33,806 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-04 12:34:33,806 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-04 12:34:33,806 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-04 12:34:33,827 - [INFO] - app - main() - Starting Flask application.
2025-02-05 09:11:22,760 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:22,848 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:22,872 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:22,872 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:22,880 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-05 09:11:22,886 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-05 09:11:22,888 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-05 09:11:22,891 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-05 09:11:23,521 - [WARNING] - app.controllers.auth_controller - register() - Missing fields: ['role']
2025-02-05 09:11:23,599 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:23,600 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:23,604 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:23,604 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:24,156 - [WARNING] - app.controllers.auth_controller - register() - Invalid email format during registration.
2025-02-05 09:11:24,229 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:24,231 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:24,235 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:24,235 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:24,819 - [WARNING] - app.controllers.auth_controller - register() - Password requirements not met during registration.
2025-02-05 09:11:24,892 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:24,893 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:24,897 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:24,897 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:25,487 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5690af8a-29d0-49df-8c4f-8ae6e3e8b5be
2025-02-05 09:11:25,487 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 5690af8a-29d0-49df-8c4f-8ae6e3e8b5be)
2025-02-05 09:11:25,487 - [WARNING] - app.controllers.auth_controller - register() - Unauthorized registration attempt by user ID: 5690af8a-29d0-49df-8c4f-8ae6e3e8b5be
2025-02-05 09:11:25,577 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:25,578 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:25,582 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:25,583 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:26,146 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4157234a-7801-46a7-bd87-f02d8a56c43a
2025-02-05 09:11:26,146 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 4157234a-7801-46a7-bd87-f02d8a56c43a)
2025-02-05 09:11:26,147 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newprofadmin@example.com
2025-02-05 09:11:26,152 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newprofadmin@example.com
2025-02-05 09:11:26,153 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Professor Admin, Email: newprofadmin@example.com, Role: Professor
2025-02-05 09:11:26,291 - [INFO] - app.services.user_service - create_user() - User created with ID: b91e4f20-5b56-43e3-8e8a-236900b53243
2025-02-05 09:11:26,293 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: b91e4f20-5b56-43e3-8e8a-236900b53243
2025-02-05 09:11:26,369 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:26,370 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:26,374 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:26,375 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:26,953 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 9266e2f0-001f-4f5c-9cd8-de0b51e70563
2025-02-05 09:11:26,953 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 9266e2f0-001f-4f5c-9cd8-de0b51e70563)
2025-02-05 09:11:26,953 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-05 09:11:26,959 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: conflict@example.com
2025-02-05 09:11:26,959 - [DEBUG] - app.services.user_service - create_user() - Creating user: Conflict User, Email: conflict@example.com, Role: Student
2025-02-05 09:11:27,093 - [INFO] - app.services.user_service - create_user() - User created with ID: 18197419-eca9-421b-8d14-e621131702ab
2025-02-05 09:11:27,093 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: 18197419-eca9-421b-8d14-e621131702ab
2025-02-05 09:11:27,094 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 9266e2f0-001f-4f5c-9cd8-de0b51e70563
2025-02-05 09:11:27,096 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 9266e2f0-001f-4f5c-9cd8-de0b51e70563)
2025-02-05 09:11:27,096 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-05 09:11:27,097 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: Conflict User (ID: 18197419-eca9-421b-8d14-e621131702ab)
2025-02-05 09:11:27,097 - [WARNING] - app.controllers.auth_controller - register() - Email already in use during registration.
2025-02-05 09:11:27,164 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:27,165 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:27,169 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:27,170 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:27,741 - [WARNING] - app.controllers.auth_controller - login() - Login failed: Missing credentials.
2025-02-05 09:11:27,815 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:27,816 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:27,820 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:27,820 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:28,414 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: doesnotexist@example.com
2025-02-05 09:11:28,415 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: doesnotexist@example.com
2025-02-05 09:11:28,419 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: doesnotexist@example.com
2025-02-05 09:11:28,420 - [WARNING] - app.services.auth_service - authenticate_user() - No user found with email: doesnotexist@example.com
2025-02-05 09:11:28,420 - [WARNING] - app.controllers.auth_controller - login() - Invalid credentials during login.
2025-02-05 09:11:28,499 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:28,501 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:28,505 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:28,505 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:29,099 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-05 09:11:29,100 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:11:29,105 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 836b06b6-2faf-4758-90e9-9b23d861dc77)
2025-02-05 09:11:29,240 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: 836b06b6-2faf-4758-90e9-9b23d861dc77) authenticated successfully.
2025-02-05 09:11:29,240 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: 836b06b6-2faf-4758-90e9-9b23d861dc77
2025-02-05 09:11:29,241 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '836b06b6-2faf-4758-90e9-9b23d861dc77', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:11:29', 'updated_at': '2025-02-05T08:11:29', 'courses_enrolled': []}
2025-02-05 09:11:29,315 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:29,316 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:29,320 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:29,320 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:29,899 - [WARNING] - app.controllers.auth_controller - change_password() - Change password failed: Missing required fields.
2025-02-05 09:11:29,972 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:29,973 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:29,977 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:29,978 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:30,563 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:11:30,569 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 9e9948c2-3c20-47f6-8403-2e905ea41e67)
2025-02-05 09:11:30,702 - [WARNING] - app.controllers.auth_controller - change_password() - Incorrect current password during password change.
2025-02-05 09:11:30,779 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:30,780 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:30,784 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:30,784 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:31,479 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:11:31,485 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 8dc513cb-8fc4-4a07-9549-526d18a97451)
2025-02-05 09:11:31,631 - [WARNING] - app.controllers.auth_controller - change_password() - New password requirements not met.
2025-02-05 09:11:31,716 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:31,718 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:31,721 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:31,721 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:32,310 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:11:32,316 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: e8a23602-dfa9-4663-8e06-e52efdc1b473)
2025-02-05 09:11:32,432 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: e8a23602-dfa9-4663-8e06-e52efdc1b473
2025-02-05 09:11:32,680 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: e8a23602-dfa9-4663-8e06-e52efdc1b473
2025-02-05 09:11:32,680 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: e8a23602-dfa9-4663-8e06-e52efdc1b473
2025-02-05 09:11:32,682 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-05 09:11:32,682 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:11:32,683 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: e8a23602-dfa9-4663-8e06-e52efdc1b473)
2025-02-05 09:11:32,799 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: e8a23602-dfa9-4663-8e06-e52efdc1b473) authenticated successfully.
2025-02-05 09:11:32,799 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: e8a23602-dfa9-4663-8e06-e52efdc1b473
2025-02-05 09:11:32,799 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'e8a23602-dfa9-4663-8e06-e52efdc1b473', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:11:32', 'updated_at': '2025-02-05T08:11:33', 'courses_enrolled': []}
2025-02-05 09:11:32,801 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:11:32,803 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: e8a23602-dfa9-4663-8e06-e52efdc1b473)
2025-02-05 09:11:32,925 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: e8a23602-dfa9-4663-8e06-e52efdc1b473
2025-02-05 09:11:33,214 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: e8a23602-dfa9-4663-8e06-e52efdc1b473
2025-02-05 09:11:33,214 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: e8a23602-dfa9-4663-8e06-e52efdc1b473
2025-02-05 09:11:33,291 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:33,292 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:33,296 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:33,296 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:33,964 - [INFO] - app.controllers.course_controller - list_courses() - Listing courses - Page: 1, Per Page: 10
2025-02-05 09:11:33,964 - [DEBUG] - app.services.course_service - get_all_courses_paginated() - Fetching courses - Page: 1, Per Page: 10
2025-02-05 09:11:33,969 - [INFO] - app.services.course_service - get_all_courses_paginated() - Retrieved 1 courses on page 1.
2025-02-05 09:11:33,970 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: bb6d3d86-15ce-43d9-82f6-9653eb7c9a2d
2025-02-05 09:11:33,970 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'bb6d3d86-15ce-43d9-82f6-9653eb7c9a2d', 'name': 'Test Course', 'professor_id': '095003d3-ddee-4be0-a43e-194180577def', 'created_at': '2025-02-05T08:11:34', 'updated_at': '2025-02-05T08:11:34'}
2025-02-05 09:11:34,047 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:34,048 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:34,052 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:34,053 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:34,639 - [INFO] - app.controllers.course_controller - get_course() - Retrieving course with ID: 3a86e1bd-2f48-4377-a428-674cb63f892f
2025-02-05 09:11:34,639 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 3a86e1bd-2f48-4377-a428-674cb63f892f
2025-02-05 09:11:34,639 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 3a86e1bd-2f48-4377-a428-674cb63f892f)
2025-02-05 09:11:34,640 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 3a86e1bd-2f48-4377-a428-674cb63f892f
2025-02-05 09:11:34,640 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '3a86e1bd-2f48-4377-a428-674cb63f892f', 'name': 'Test Course', 'professor_id': '8d174e59-317e-4313-aa74-6e0d9583c10a', 'created_at': '2025-02-05T08:11:35', 'updated_at': '2025-02-05T08:11:35'}
2025-02-05 09:11:34,722 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:34,723 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:34,726 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:34,727 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:35,351 - [INFO] - app.controllers.course_controller - search_courses() - Searching courses with query: 'Test'
2025-02-05 09:11:35,351 - [DEBUG] - app.services.course_service - search_courses_by_name() - Searching courses with name containing: Test
2025-02-05 09:11:35,353 - [INFO] - app.services.course_service - search_courses_by_name() - Found 1 courses matching query 'Test'.
2025-02-05 09:11:35,353 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: b4b58c84-c34f-457d-9d72-de740bc92a24
2025-02-05 09:11:35,353 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'b4b58c84-c34f-457d-9d72-de740bc92a24', 'name': 'Test Course', 'professor_id': 'd854a0c0-7caa-48e6-8180-3f791da8572d', 'created_at': '2025-02-05T08:11:35', 'updated_at': '2025-02-05T08:11:35'}
2025-02-05 09:11:35,427 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:35,428 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:35,432 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:35,432 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:36,091 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 26507710-14ff-40fb-9649-43c56f8969e0
2025-02-05 09:11:36,091 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 26507710-14ff-40fb-9649-43c56f8969e0)
2025-02-05 09:11:36,091 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 3209ecdf-9df4-4bca-b3d2-8fd0bb904b7a
2025-02-05 09:11:36,091 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 3209ecdf-9df4-4bca-b3d2-8fd0bb904b7a)
2025-02-05 09:11:36,091 - [DEBUG] - app.services.course_service - get_students_in_course() - Fetching students in course ID: 3209ecdf-9df4-4bca-b3d2-8fd0bb904b7a
2025-02-05 09:11:36,094 - [INFO] - app.services.course_service - get_students_in_course() - Retrieved 0 students for course ID: 3209ecdf-9df4-4bca-b3d2-8fd0bb904b7a.
2025-02-05 09:11:36,176 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:36,178 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:36,182 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:36,183 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:36,786 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 302b8ec8-1a8f-411d-a737-3fbf48594f07
2025-02-05 09:11:36,786 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 302b8ec8-1a8f-411d-a737-3fbf48594f07)
2025-02-05 09:11:36,786 - [WARNING] - app.controllers.course_controller - create_course() - Unauthorized course creation attempt by user ID: 302b8ec8-1a8f-411d-a737-3fbf48594f07
2025-02-05 09:11:37,717 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:37,718 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:37,723 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:37,723 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:38,330 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 91b617c6-995f-4a61-a71e-5e04ceca4aa0
2025-02-05 09:11:38,330 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 91b617c6-995f-4a61-a71e-5e04ceca4aa0)
2025-02-05 09:11:38,330 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 44ae3023-f512-43ed-b471-73f00caaa5fa
2025-02-05 09:11:38,331 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 44ae3023-f512-43ed-b471-73f00caaa5fa)
2025-02-05 09:11:38,331 - [DEBUG] - app.services.course_service - update_course() - Updating course ID: 44ae3023-f512-43ed-b471-73f00caaa5fa with new name: Updated Test Course
2025-02-05 09:11:38,335 - [INFO] - app.services.course_service - update_course() - Course ID: 44ae3023-f512-43ed-b471-73f00caaa5fa updated successfully.
2025-02-05 09:11:38,336 - [INFO] - app.controllers.course_controller - update_course() - Course updated successfully with ID: 44ae3023-f512-43ed-b471-73f00caaa5fa
2025-02-05 09:11:38,336 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 44ae3023-f512-43ed-b471-73f00caaa5fa
2025-02-05 09:11:38,336 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '44ae3023-f512-43ed-b471-73f00caaa5fa', 'name': 'Updated Test Course', 'professor_id': '91b617c6-995f-4a61-a71e-5e04ceca4aa0', 'created_at': '2025-02-05T08:11:38', 'updated_at': '2025-02-05T08:11:38'}
2025-02-05 09:11:38,409 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:38,410 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:38,413 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:38,414 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:39,062 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0667e67d-ffb0-4968-83f2-86fa7ae22bac
2025-02-05 09:11:39,062 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 0667e67d-ffb0-4968-83f2-86fa7ae22bac)
2025-02-05 09:11:39,063 - [WARNING] - app.controllers.course_controller - delete_course() - Unauthorized course deletion attempt by user ID: 0667e67d-ffb0-4968-83f2-86fa7ae22bac
2025-02-05 09:11:39,135 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:39,137 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:39,140 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:39,141 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:39,807 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 688943c0-7439-43e6-a0dc-fdb606f8fa2f
2025-02-05 09:11:39,807 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 688943c0-7439-43e6-a0dc-fdb606f8fa2f)
2025-02-05 09:11:39,808 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 4ea05c33-df49-4c9f-83a3-d7d7cd7a8d04
2025-02-05 09:11:39,808 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 4ea05c33-df49-4c9f-83a3-d7d7cd7a8d04)
2025-02-05 09:11:39,808 - [DEBUG] - app.services.course_service - delete_course() - Deleting course ID: 4ea05c33-df49-4c9f-83a3-d7d7cd7a8d04
2025-02-05 09:11:39,821 - [INFO] - app.services.course_service - delete_course() - Course ID: 4ea05c33-df49-4c9f-83a3-d7d7cd7a8d04 deleted successfully.
2025-02-05 09:11:39,822 - [INFO] - app.controllers.course_controller - delete_course() - Course deleted successfully with ID: 4ea05c33-df49-4c9f-83a3-d7d7cd7a8d04
2025-02-05 09:11:40,046 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:40,048 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:40,052 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:40,052 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:40,677 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 1323595f-8b96-4bcb-ac0c-90bb9049a54a
2025-02-05 09:11:40,677 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 1323595f-8b96-4bcb-ac0c-90bb9049a54a)
2025-02-05 09:11:40,677 - [WARNING] - app.controllers.grade_controller - list_grades() - Unauthorized access attempt by user ID: 1323595f-8b96-4bcb-ac0c-90bb9049a54a
2025-02-05 09:11:40,749 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:40,750 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:40,755 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:40,755 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:41,355 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3c52a0a6-1809-4a86-a357-5f9079cd74dd
2025-02-05 09:11:41,355 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 3c52a0a6-1809-4a86-a357-5f9079cd74dd)
2025-02-05 09:11:41,355 - [DEBUG] - app.services.grade_service - list_grades() - Retrieving all grades from the database.
2025-02-05 09:11:41,356 - [INFO] - app.services.grade_service - list_grades() - Retrieved 1 grades.
2025-02-05 09:11:41,356 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 2f275039-613f-4111-a11e-89c10764091f
2025-02-05 09:11:41,357 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '2f275039-613f-4111-a11e-89c10764091f', 'course_id': 'a2d1ad4f-2091-4043-9fad-99ffbaad06f0', 'student_id': '07783c04-50d1-4d30-ba8a-64df46819fa6', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-05T08:11:41', 'updated_at': '2025-02-05T08:11:41'}
2025-02-05 09:11:41,433 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:41,435 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:41,439 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:41,439 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:42,003 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ee799822-b8a8-464f-aab7-8fc73e3f2975
2025-02-05 09:11:42,003 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: ee799822-b8a8-464f-aab7-8fc73e3f2975)
2025-02-05 09:11:42,003 - [WARNING] - app.controllers.grade_controller - assign_grade() - Missing required fields in grade assignment: {}
2025-02-05 09:11:42,072 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:42,073 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:42,078 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:42,078 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:42,673 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: bc7a4ac6-2889-4059-906b-88be1ffe9e64
2025-02-05 09:11:42,673 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: bc7a4ac6-2889-4059-906b-88be1ffe9e64)
2025-02-05 09:11:42,673 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 2376806b-335a-4afb-963e-857de3135f53
2025-02-05 09:11:42,674 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 2376806b-335a-4afb-963e-857de3135f53)
2025-02-05 09:11:42,674 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: invalid_student_id
2025-02-05 09:11:42,680 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: invalid_student_id
2025-02-05 09:11:42,681 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=2376806b-335a-4afb-963e-857de3135f53, student_id=invalid_student_id
2025-02-05 09:11:42,756 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:42,757 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:42,761 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:42,762 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:43,360 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c5988bf2-f0b0-45cb-99c8-7b367a6f10b5
2025-02-05 09:11:43,361 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: c5988bf2-f0b0-45cb-99c8-7b367a6f10b5)
2025-02-05 09:11:43,361 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: invalid_course_id
2025-02-05 09:11:43,362 - [DEBUG] - app.services.course_service - get_course_by_id() - No course found with ID: invalid_course_id
2025-02-05 09:11:43,362 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 625d0ac0-c793-4c86-a00b-645a2d61dfa9
2025-02-05 09:11:43,362 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 625d0ac0-c793-4c86-a00b-645a2d61dfa9)
2025-02-05 09:11:43,362 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=invalid_course_id, student_id=625d0ac0-c793-4c86-a00b-645a2d61dfa9
2025-02-05 09:11:43,432 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:43,433 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:43,437 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:43,437 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:44,080 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 9e5eb87d-c84c-403c-933d-3b4a58474c04
2025-02-05 09:11:44,080 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 9e5eb87d-c84c-403c-933d-3b4a58474c04)
2025-02-05 09:11:44,081 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 5c50c082-1ddc-412c-bece-b7eb32eee091
2025-02-05 09:11:44,081 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 5c50c082-1ddc-412c-bece-b7eb32eee091)
2025-02-05 09:11:44,081 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0fcfbc4e-0c66-4da8-96b7-409dd3fec678
2025-02-05 09:11:44,081 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 0fcfbc4e-0c66-4da8-96b7-409dd3fec678)
2025-02-05 09:11:44,081 - [DEBUG] - app.services.grade_service - assign_grade() - Assigning grade 90 to student 0fcfbc4e-0c66-4da8-96b7-409dd3fec678 for course 5c50c082-1ddc-412c-bece-b7eb32eee091.
2025-02-05 09:11:44,087 - [INFO] - app.services.grade_service - assign_grade() - Grade assigned: 3857cc04-d320-499b-ba0c-9aecaaf0a88a, Value: 90.0
2025-02-05 09:11:44,088 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 3857cc04-d320-499b-ba0c-9aecaaf0a88a
2025-02-05 09:11:44,088 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '3857cc04-d320-499b-ba0c-9aecaaf0a88a', 'course_id': '5c50c082-1ddc-412c-bece-b7eb32eee091', 'student_id': '0fcfbc4e-0c66-4da8-96b7-409dd3fec678', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-05T08:11:44', 'updated_at': '2025-02-05T08:11:44'}
2025-02-05 09:11:44,159 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:44,161 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:44,165 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:44,165 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:44,749 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: faf48a13-674f-441c-91f8-08cf3fc2d682
2025-02-05 09:11:44,749 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: faf48a13-674f-441c-91f8-08cf3fc2d682)
2025-02-05 09:11:44,749 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 1ed90a9f-a685-4524-8cb6-15fa59979c28
2025-02-05 09:11:44,749 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 1ed90a9f-a685-4524-8cb6-15fa59979c28, Grade Value: 90.0
2025-02-05 09:11:44,749 - [WARNING] - app.controllers.grade_controller - get_grade() - Unauthorized grade access attempt by user ID: faf48a13-674f-441c-91f8-08cf3fc2d682
2025-02-05 09:11:44,821 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:44,822 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:44,826 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:44,827 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:45,376 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ce250866-5b7c-4fbb-b114-77270420ad00
2025-02-05 09:11:45,376 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: ce250866-5b7c-4fbb-b114-77270420ad00)
2025-02-05 09:11:45,376 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 758fbc00-4ba4-4f5e-9b9a-3af956ae024c
2025-02-05 09:11:45,376 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 758fbc00-4ba4-4f5e-9b9a-3af956ae024c, Grade Value: 90.0
2025-02-05 09:11:45,376 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 758fbc00-4ba4-4f5e-9b9a-3af956ae024c
2025-02-05 09:11:45,376 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '758fbc00-4ba4-4f5e-9b9a-3af956ae024c', 'course_id': '7cd0db2f-ec0b-4b8d-989e-2aaa218f2d67', 'student_id': 'd840b7dc-7498-4ef6-a906-adac5d13d4a3', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-05T08:11:45', 'updated_at': '2025-02-05T08:11:45'}
2025-02-05 09:11:45,478 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:45,479 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:45,483 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:45,483 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:46,064 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 58246303-4f68-421e-8a5d-5f9585ec5fa6
2025-02-05 09:11:46,065 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 58246303-4f68-421e-8a5d-5f9585ec5fa6)
2025-02-05 09:11:46,065 - [WARNING] - app.controllers.grade_controller - update_grade() - Unauthorized grade update attempt by user ID: 58246303-4f68-421e-8a5d-5f9585ec5fa6
2025-02-05 09:11:46,136 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:46,137 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:46,141 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:46,141 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:46,702 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 032f7bf3-0913-4aca-91d9-0d3b98159ca5
2025-02-05 09:11:46,702 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 032f7bf3-0913-4aca-91d9-0d3b98159ca5)
2025-02-05 09:11:46,702 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 98c032ab-e7c6-4a29-82fb-99eb79e4663a
2025-02-05 09:11:46,702 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 98c032ab-e7c6-4a29-82fb-99eb79e4663a, Grade Value: 90.0
2025-02-05 09:11:46,702 - [WARNING] - app.controllers.grade_controller - update_grade() - Missing grade value for update: {}
2025-02-05 09:11:46,772 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:46,773 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:46,777 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:46,777 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:47,349 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e1e3148c-5c96-4b9f-b8e4-3897ecbbb104
2025-02-05 09:11:47,349 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: e1e3148c-5c96-4b9f-b8e4-3897ecbbb104)
2025-02-05 09:11:47,349 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 4880815f-d75a-4dcf-96be-1e8ee25800a6
2025-02-05 09:11:47,349 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 4880815f-d75a-4dcf-96be-1e8ee25800a6, Grade Value: 90.0
2025-02-05 09:11:47,349 - [DEBUG] - app.services.grade_service - update_grade() - Updating grade ID: 4880815f-d75a-4dcf-96be-1e8ee25800a6 to new value: 95.
2025-02-05 09:11:47,354 - [INFO] - app.services.grade_service - update_grade() - Grade ID: 4880815f-d75a-4dcf-96be-1e8ee25800a6 updated to value: 95.
2025-02-05 09:11:47,355 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 4880815f-d75a-4dcf-96be-1e8ee25800a6
2025-02-05 09:11:47,355 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '4880815f-d75a-4dcf-96be-1e8ee25800a6', 'course_id': '4b998814-1816-461e-a418-2f3da7659085', 'student_id': 'aacdddf5-b4b7-4d55-9497-f64a526dfcdf', 'grade': 95.0, 'name': 'DM', 'created_at': '2025-02-05T08:11:47', 'updated_at': '2025-02-05T08:11:47'}
2025-02-05 09:11:47,433 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:47,435 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:47,438 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:47,439 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:47,985 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 363d078d-1326-4226-b6b9-dcaf41205d3a
2025-02-05 09:11:47,985 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 363d078d-1326-4226-b6b9-dcaf41205d3a)
2025-02-05 09:11:47,986 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: a2c00c3f-9d4a-4066-b9ec-65e8add4d918
2025-02-05 09:11:47,986 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: a2c00c3f-9d4a-4066-b9ec-65e8add4d918)
2025-02-05 09:11:47,986 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: fe225a51-d8a4-4a9b-bb76-026628f00587
2025-02-05 09:11:47,986 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: fe225a51-d8a4-4a9b-bb76-026628f00587)
2025-02-05 09:11:47,986 - [DEBUG] - app.services.grade_service - get_student_grades() - Fetching grades for student ID: fe225a51-d8a4-4a9b-bb76-026628f00587 in course ID: a2c00c3f-9d4a-4066-b9ec-65e8add4d918.
2025-02-05 09:11:47,987 - [INFO] - app.services.grade_service - get_student_grades() - Retrieved 1 grades for student ID: fe225a51-d8a4-4a9b-bb76-026628f00587 in course ID: a2c00c3f-9d4a-4066-b9ec-65e8add4d918.
2025-02-05 09:11:47,987 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 9bb80253-d7fe-454a-a3ac-695c1fa0b741
2025-02-05 09:11:47,987 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '9bb80253-d7fe-454a-a3ac-695c1fa0b741', 'course_id': 'a2c00c3f-9d4a-4066-b9ec-65e8add4d918', 'student_id': 'fe225a51-d8a4-4a9b-bb76-026628f00587', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-05T08:11:48', 'updated_at': '2025-02-05T08:11:48'}
2025-02-05 09:11:48,067 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:48,068 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:48,072 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:48,072 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:48,621 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5167f7e1-aa44-4211-8ce7-a1526fb11c3c
2025-02-05 09:11:48,621 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 5167f7e1-aa44-4211-8ce7-a1526fb11c3c)
2025-02-05 09:11:48,621 - [WARNING] - app.controllers.grade_controller - delete_grade() - Unauthorized grade deletion attempt by user ID: 5167f7e1-aa44-4211-8ce7-a1526fb11c3c
2025-02-05 09:11:48,694 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:48,696 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:48,700 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:48,700 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:49,246 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7f43a08d-0c1d-4faa-97d2-e36660bcc395
2025-02-05 09:11:49,246 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 7f43a08d-0c1d-4faa-97d2-e36660bcc395)
2025-02-05 09:11:49,246 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 4fc82b2f-d848-4981-b344-ff3651104d88
2025-02-05 09:11:49,246 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 4fc82b2f-d848-4981-b344-ff3651104d88, Grade Value: 90.0
2025-02-05 09:11:49,246 - [DEBUG] - app.services.grade_service - delete_grade() - Deleting grade ID: 4fc82b2f-d848-4981-b344-ff3651104d88.
2025-02-05 09:11:49,251 - [INFO] - app.services.grade_service - delete_grade() - Grade ID: 4fc82b2f-d848-4981-b344-ff3651104d88 deleted successfully.
2025-02-05 09:11:49,326 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:49,328 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:49,332 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:49,332 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:49,899 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 29433265-6449-4d9a-b7e2-0987f4ffb0f9
2025-02-05 09:11:49,899 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 29433265-6449-4d9a-b7e2-0987f4ffb0f9)
2025-02-05 09:11:49,899 - [DEBUG] - app.services.user_service - get_all_users() - Fetching all users from the database.
2025-02-05 09:11:49,905 - [INFO] - app.services.user_service - get_all_users() - Fetched 3 users from the database.
2025-02-05 09:11:49,905 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '29433265-6449-4d9a-b7e2-0987f4ffb0f9', 'name': 'admin', 'email': 'admin@example.com', 'role': 'Administrator', 'created_at': '2025-02-05T08:11:50', 'updated_at': '2025-02-05T08:11:50', 'courses_enrolled': []}
2025-02-05 09:11:49,905 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '6ce13744-e956-47f5-b88e-83a40a9c22b3', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-05T08:11:50', 'updated_at': '2025-02-05T08:11:50', 'courses_enrolled': []}
2025-02-05 09:11:49,905 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'd92ee25e-2632-4149-a353-50d3a0fd15e3', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:11:50', 'updated_at': '2025-02-05T08:11:50', 'courses_enrolled': []}
2025-02-05 09:11:49,982 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:49,983 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:49,988 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:49,988 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:50,580 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: f32a6ef4-fa16-4678-9fa1-a9b3cd68735b
2025-02-05 09:11:50,580 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: f32a6ef4-fa16-4678-9fa1-a9b3cd68735b)
2025-02-05 09:11:50,580 - [WARNING] - app.controllers.user_controller - list_users() - Unauthorized access attempt by user ID: f32a6ef4-fa16-4678-9fa1-a9b3cd68735b
2025-02-05 09:11:50,651 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:50,652 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:50,655 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:50,655 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:51,229 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ea922d08-7325-400d-aa55-20903e88e57e
2025-02-05 09:11:51,229 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: ea922d08-7325-400d-aa55-20903e88e57e)
2025-02-05 09:11:51,229 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3821473f-e137-4320-af80-adb99296bd4c
2025-02-05 09:11:51,229 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 3821473f-e137-4320-af80-adb99296bd4c)
2025-02-05 09:11:51,230 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '3821473f-e137-4320-af80-adb99296bd4c', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:11:51', 'updated_at': '2025-02-05T08:11:51', 'courses_enrolled': []}
2025-02-05 09:11:51,305 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:51,306 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:51,310 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:51,310 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:51,876 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 998ad7cf-0ef0-4b15-9b70-53d98df270db
2025-02-05 09:11:51,877 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 998ad7cf-0ef0-4b15-9b70-53d98df270db)
2025-02-05 09:11:51,877 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 998ad7cf-0ef0-4b15-9b70-53d98df270db
2025-02-05 09:11:51,877 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 998ad7cf-0ef0-4b15-9b70-53d98df270db)
2025-02-05 09:11:51,877 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '998ad7cf-0ef0-4b15-9b70-53d98df270db', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-05T08:11:52', 'updated_at': '2025-02-05T08:11:52', 'courses_enrolled': []}
2025-02-05 09:11:51,968 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:51,969 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:51,972 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:51,972 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:52,531 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5cf4fd52-acb2-4e8f-881b-13b5fc0c17c6
2025-02-05 09:11:52,531 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 5cf4fd52-acb2-4e8f-881b-13b5fc0c17c6)
2025-02-05 09:11:52,531 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: nonexistent-user-id
2025-02-05 09:11:52,536 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: nonexistent-user-id
2025-02-05 09:11:52,536 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID nonexistent-user-id
2025-02-05 09:11:52,606 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:52,607 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:52,611 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:52,611 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:53,173 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 03f6fe03-d748-4a7b-9b73-f0a9ca446cfd
2025-02-05 09:11:53,173 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 03f6fe03-d748-4a7b-9b73-f0a9ca446cfd)
2025-02-05 09:11:53,173 - [DEBUG] - app.services.user_service - search_users() - Searching users with query: student
2025-02-05 09:11:53,179 - [INFO] - app.services.user_service - search_users() - Found 1 users matching query 'student'.
2025-02-05 09:11:53,179 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '303de8db-65d6-4ceb-9f55-cd2abe47130f', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:11:53', 'updated_at': '2025-02-05T08:11:53', 'courses_enrolled': []}
2025-02-05 09:11:53,257 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:53,259 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:53,262 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:53,263 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:53,829 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e44774c0-2887-409b-90e2-d035fdc24a1e
2025-02-05 09:11:53,829 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: e44774c0-2887-409b-90e2-d035fdc24a1e)
2025-02-05 09:11:53,829 - [WARNING] - app.controllers.user_controller - search_users() - Unauthorized access attempt by user ID: e44774c0-2887-409b-90e2-d035fdc24a1e
2025-02-05 09:11:53,911 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:53,912 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:53,915 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:53,915 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:54,491 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 1904bb60-d450-4300-97eb-0bbfac08e897
2025-02-05 09:11:54,491 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 1904bb60-d450-4300-97eb-0bbfac08e897)
2025-02-05 09:11:54,492 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Missing fields.
2025-02-05 09:11:54,568 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:54,569 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:54,572 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:54,573 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:55,131 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8a642c60-0fac-42f8-90b2-951b6a847ebe
2025-02-05 09:11:55,131 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 8a642c60-0fac-42f8-90b2-951b6a847ebe)
2025-02-05 09:11:55,131 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Invalid role 'Administrator'.
2025-02-05 09:11:55,215 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:55,217 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:55,220 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:55,220 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:55,802 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5731d47a-3bd0-40bc-86e4-8dabd8b44f78
2025-02-05 09:11:55,802 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 5731d47a-3bd0-40bc-86e4-8dabd8b44f78)
2025-02-05 09:11:55,802 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newstudent@example.com
2025-02-05 09:11:55,806 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newstudent@example.com
2025-02-05 09:11:55,806 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Student, Email: newstudent@example.com, Role: Student
2025-02-05 09:11:55,931 - [INFO] - app.services.user_service - create_user() - User created with ID: e82374ca-0591-4bc6-bd4e-358267234bf7
2025-02-05 09:11:55,932 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e82374ca-0591-4bc6-bd4e-358267234bf7
2025-02-05 09:11:55,932 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: e82374ca-0591-4bc6-bd4e-358267234bf7)
2025-02-05 09:11:55,932 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'e82374ca-0591-4bc6-bd4e-358267234bf7', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:11:56', 'updated_at': '2025-02-05T08:11:56', 'courses_enrolled': []}
2025-02-05 09:11:55,933 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5731d47a-3bd0-40bc-86e4-8dabd8b44f78
2025-02-05 09:11:55,934 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 5731d47a-3bd0-40bc-86e4-8dabd8b44f78)
2025-02-05 09:11:55,934 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e82374ca-0591-4bc6-bd4e-358267234bf7
2025-02-05 09:11:55,938 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: e82374ca-0591-4bc6-bd4e-358267234bf7)
2025-02-05 09:11:55,938 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'e82374ca-0591-4bc6-bd4e-358267234bf7', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:11:56', 'updated_at': '2025-02-05T08:11:56', 'courses_enrolled': []}
2025-02-05 09:11:56,012 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:56,013 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:56,017 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:56,017 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:56,579 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: bb188fd4-21d8-4d37-b3e8-c163094590f5
2025-02-05 09:11:56,579 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: bb188fd4-21d8-4d37-b3e8-c163094590f5)
2025-02-05 09:11:56,579 - [WARNING] - app.controllers.user_controller - update_user() - Unauthorized access attempt by user ID: bb188fd4-21d8-4d37-b3e8-c163094590f5
2025-02-05 09:11:56,683 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:56,684 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:56,688 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:56,688 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:57,293 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0aabe7b1-295a-4007-b847-476c921e68bb
2025-02-05 09:11:57,293 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 0aabe7b1-295a-4007-b847-476c921e68bb)
2025-02-05 09:11:57,293 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0aabe7b1-295a-4007-b847-476c921e68bb
2025-02-05 09:11:57,293 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 0aabe7b1-295a-4007-b847-476c921e68bb)
2025-02-05 09:11:57,293 - [DEBUG] - app.services.user_service - update_user() - Updating user ID: 0aabe7b1-295a-4007-b847-476c921e68bb with Name: Updated Professor Name, Email: unchanged
2025-02-05 09:11:57,302 - [INFO] - app.services.user_service - update_user() - User ID: 0aabe7b1-295a-4007-b847-476c921e68bb updated successfully.
2025-02-05 09:11:57,302 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0aabe7b1-295a-4007-b847-476c921e68bb
2025-02-05 09:11:57,302 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Updated Professor Name (ID: 0aabe7b1-295a-4007-b847-476c921e68bb)
2025-02-05 09:11:57,302 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '0aabe7b1-295a-4007-b847-476c921e68bb', 'name': 'Updated Professor Name', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-05T08:11:57', 'updated_at': '2025-02-05T08:11:57', 'courses_enrolled': []}
2025-02-05 09:11:57,378 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:11:57,379 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:11:57,383 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:11:57,384 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:11:57,962 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5b7db4ef-86fc-45af-b4f0-873675f44f3c
2025-02-05 09:11:57,962 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 5b7db4ef-86fc-45af-b4f0-873675f44f3c)
2025-02-05 09:11:57,962 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: tempstudent@example.com
2025-02-05 09:11:57,967 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: tempstudent@example.com
2025-02-05 09:11:57,967 - [DEBUG] - app.services.user_service - create_user() - Creating user: Temp Student, Email: tempstudent@example.com, Role: Student
2025-02-05 09:11:58,094 - [INFO] - app.services.user_service - create_user() - User created with ID: 0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347
2025-02-05 09:11:58,094 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347
2025-02-05 09:11:58,095 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: 0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347)
2025-02-05 09:11:58,095 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347', 'name': 'Temp Student', 'email': 'tempstudent@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:11:58', 'updated_at': '2025-02-05T08:11:58', 'courses_enrolled': []}
2025-02-05 09:11:58,096 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5b7db4ef-86fc-45af-b4f0-873675f44f3c
2025-02-05 09:11:58,097 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 5b7db4ef-86fc-45af-b4f0-873675f44f3c)
2025-02-05 09:11:58,097 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347
2025-02-05 09:11:58,102 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: 0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347)
2025-02-05 09:11:58,102 - [DEBUG] - app.services.user_service - delete_user() - Deleting user ID: 0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347
2025-02-05 09:11:58,105 - [INFO] - app.services.user_service - delete_user() - User ID: 0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347 deleted successfully.
2025-02-05 09:11:58,106 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5b7db4ef-86fc-45af-b4f0-873675f44f3c
2025-02-05 09:11:58,108 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 5b7db4ef-86fc-45af-b4f0-873675f44f3c)
2025-02-05 09:11:58,108 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347
2025-02-05 09:11:58,108 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: 0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347
2025-02-05 09:11:58,109 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID 0b84c2ca-1cce-4bb2-8293-b1b6aaa2e347
2025-02-05 09:12:25,581 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:25,624 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:25,634 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:25,634 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:25,641 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-05 09:12:25,644 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-05 09:12:25,646 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-05 09:12:25,648 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-05 09:12:26,263 - [WARNING] - app.controllers.auth_controller - register() - Missing fields: ['role']
2025-02-05 09:12:26,347 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:26,348 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:26,351 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:26,351 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:26,947 - [WARNING] - app.controllers.auth_controller - register() - Invalid email format during registration.
2025-02-05 09:12:27,016 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:27,017 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:27,020 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:27,020 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:27,579 - [WARNING] - app.controllers.auth_controller - register() - Password requirements not met during registration.
2025-02-05 09:12:27,649 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:27,650 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:27,653 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:27,653 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:28,181 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7d7a4219-6f3b-4661-9ce8-b98b122b8bf8
2025-02-05 09:12:28,181 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 7d7a4219-6f3b-4661-9ce8-b98b122b8bf8)
2025-02-05 09:12:28,182 - [WARNING] - app.controllers.auth_controller - register() - Unauthorized registration attempt by user ID: 7d7a4219-6f3b-4661-9ce8-b98b122b8bf8
2025-02-05 09:12:28,257 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:28,258 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:28,261 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:28,261 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:28,845 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 484637cf-ff46-48f1-ad3d-12abd2092067
2025-02-05 09:12:28,845 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 484637cf-ff46-48f1-ad3d-12abd2092067)
2025-02-05 09:12:28,845 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newprofadmin@example.com
2025-02-05 09:12:28,851 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newprofadmin@example.com
2025-02-05 09:12:28,851 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Professor Admin, Email: newprofadmin@example.com, Role: Professor
2025-02-05 09:12:28,979 - [INFO] - app.services.user_service - create_user() - User created with ID: 58982868-a6f3-4f3f-bab1-445a2cb3bb7b
2025-02-05 09:12:28,980 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: 58982868-a6f3-4f3f-bab1-445a2cb3bb7b
2025-02-05 09:12:29,050 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:29,051 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:29,055 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:29,055 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:29,637 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4bfda87e-8a58-45cd-8013-7572deb55ea2
2025-02-05 09:12:29,637 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 4bfda87e-8a58-45cd-8013-7572deb55ea2)
2025-02-05 09:12:29,637 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-05 09:12:29,643 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: conflict@example.com
2025-02-05 09:12:29,643 - [DEBUG] - app.services.user_service - create_user() - Creating user: Conflict User, Email: conflict@example.com, Role: Student
2025-02-05 09:12:29,771 - [INFO] - app.services.user_service - create_user() - User created with ID: a89fe97d-0b20-4112-a78d-a389d63eb1f8
2025-02-05 09:12:29,771 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: a89fe97d-0b20-4112-a78d-a389d63eb1f8
2025-02-05 09:12:29,773 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4bfda87e-8a58-45cd-8013-7572deb55ea2
2025-02-05 09:12:29,775 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 4bfda87e-8a58-45cd-8013-7572deb55ea2)
2025-02-05 09:12:29,775 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-05 09:12:29,776 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: Conflict User (ID: a89fe97d-0b20-4112-a78d-a389d63eb1f8)
2025-02-05 09:12:29,776 - [WARNING] - app.controllers.auth_controller - register() - Email already in use during registration.
2025-02-05 09:12:29,845 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:29,846 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:29,849 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:29,850 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:30,400 - [WARNING] - app.controllers.auth_controller - login() - Login failed: Missing credentials.
2025-02-05 09:12:30,470 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:30,471 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:30,476 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:30,476 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:31,031 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: doesnotexist@example.com
2025-02-05 09:12:31,032 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: doesnotexist@example.com
2025-02-05 09:12:31,038 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: doesnotexist@example.com
2025-02-05 09:12:31,038 - [WARNING] - app.services.auth_service - authenticate_user() - No user found with email: doesnotexist@example.com
2025-02-05 09:12:31,038 - [WARNING] - app.controllers.auth_controller - login() - Invalid credentials during login.
2025-02-05 09:12:31,120 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:31,121 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:31,125 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:31,125 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:31,699 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-05 09:12:31,699 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:12:31,704 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: d19e5d9e-61af-4658-ba00-3409e1796141)
2025-02-05 09:12:31,825 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: d19e5d9e-61af-4658-ba00-3409e1796141) authenticated successfully.
2025-02-05 09:12:31,825 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: d19e5d9e-61af-4658-ba00-3409e1796141
2025-02-05 09:12:31,825 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'd19e5d9e-61af-4658-ba00-3409e1796141', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:12:32', 'updated_at': '2025-02-05T08:12:32', 'courses_enrolled': []}
2025-02-05 09:12:31,894 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:31,895 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:31,898 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:31,899 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:32,453 - [WARNING] - app.controllers.auth_controller - change_password() - Change password failed: Missing required fields.
2025-02-05 09:12:32,533 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:32,534 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:32,538 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:32,538 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:33,148 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:12:33,153 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 6ee39f9e-a270-4b9e-938c-940757d469f5)
2025-02-05 09:12:33,267 - [WARNING] - app.controllers.auth_controller - change_password() - Incorrect current password during password change.
2025-02-05 09:12:33,337 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:33,338 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:33,342 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:33,344 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:34,003 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:12:34,008 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 441435ca-2ac8-45e0-aaac-fe12cc26e17a)
2025-02-05 09:12:34,125 - [WARNING] - app.controllers.auth_controller - change_password() - New password requirements not met.
2025-02-05 09:12:34,201 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:34,202 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:34,205 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:34,205 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:34,767 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:12:34,771 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 16aad023-e598-4c7c-871b-c4b60689b6d9)
2025-02-05 09:12:34,891 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: 16aad023-e598-4c7c-871b-c4b60689b6d9
2025-02-05 09:12:35,135 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: 16aad023-e598-4c7c-871b-c4b60689b6d9
2025-02-05 09:12:35,135 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: 16aad023-e598-4c7c-871b-c4b60689b6d9
2025-02-05 09:12:35,137 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-05 09:12:35,137 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:12:35,139 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 16aad023-e598-4c7c-871b-c4b60689b6d9)
2025-02-05 09:12:35,260 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: 16aad023-e598-4c7c-871b-c4b60689b6d9) authenticated successfully.
2025-02-05 09:12:35,260 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: 16aad023-e598-4c7c-871b-c4b60689b6d9
2025-02-05 09:12:35,261 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '16aad023-e598-4c7c-871b-c4b60689b6d9', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:12:35', 'updated_at': '2025-02-05T08:12:35', 'courses_enrolled': []}
2025-02-05 09:12:35,262 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-05 09:12:35,263 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 16aad023-e598-4c7c-871b-c4b60689b6d9)
2025-02-05 09:12:35,381 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: 16aad023-e598-4c7c-871b-c4b60689b6d9
2025-02-05 09:12:35,667 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: 16aad023-e598-4c7c-871b-c4b60689b6d9
2025-02-05 09:12:35,667 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: 16aad023-e598-4c7c-871b-c4b60689b6d9
2025-02-05 09:12:35,735 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:35,736 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:35,739 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:35,739 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:36,307 - [INFO] - app.controllers.course_controller - list_courses() - Listing courses - Page: 1, Per Page: 10
2025-02-05 09:12:36,307 - [DEBUG] - app.services.course_service - get_all_courses_paginated() - Fetching courses - Page: 1, Per Page: 10
2025-02-05 09:12:36,311 - [INFO] - app.services.course_service - get_all_courses_paginated() - Retrieved 1 courses on page 1.
2025-02-05 09:12:36,311 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 37b037d4-3558-4ed8-a950-7d658ed6d473
2025-02-05 09:12:36,311 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '37b037d4-3558-4ed8-a950-7d658ed6d473', 'name': 'Test Course', 'professor_id': '6bcbe14f-1313-4d30-a49f-6d012834f75a', 'created_at': '2025-02-05T08:12:36', 'updated_at': '2025-02-05T08:12:36'}
2025-02-05 09:12:36,392 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:36,394 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:36,398 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:36,398 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:36,933 - [INFO] - app.controllers.course_controller - get_course() - Retrieving course with ID: c3c2f587-eb57-4add-b7d4-7f96789de6ea
2025-02-05 09:12:36,933 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: c3c2f587-eb57-4add-b7d4-7f96789de6ea
2025-02-05 09:12:36,933 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: c3c2f587-eb57-4add-b7d4-7f96789de6ea)
2025-02-05 09:12:36,933 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: c3c2f587-eb57-4add-b7d4-7f96789de6ea
2025-02-05 09:12:36,933 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'c3c2f587-eb57-4add-b7d4-7f96789de6ea', 'name': 'Test Course', 'professor_id': '8d115621-4a57-4515-a65c-24194e97bd68', 'created_at': '2025-02-05T08:12:37', 'updated_at': '2025-02-05T08:12:37'}
2025-02-05 09:12:37,013 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:37,014 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:37,018 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:37,018 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:37,557 - [INFO] - app.controllers.course_controller - search_courses() - Searching courses with query: 'Test'
2025-02-05 09:12:37,557 - [DEBUG] - app.services.course_service - search_courses_by_name() - Searching courses with name containing: Test
2025-02-05 09:12:37,558 - [INFO] - app.services.course_service - search_courses_by_name() - Found 1 courses matching query 'Test'.
2025-02-05 09:12:37,558 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: fa7173f7-db1f-4993-9535-fe44bc3aeeea
2025-02-05 09:12:37,558 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'fa7173f7-db1f-4993-9535-fe44bc3aeeea', 'name': 'Test Course', 'professor_id': 'd3036522-09c8-409c-9cbd-31770672ddf7', 'created_at': '2025-02-05T08:12:38', 'updated_at': '2025-02-05T08:12:38'}
2025-02-05 09:12:37,631 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:37,633 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:37,635 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:37,636 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:38,186 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 1ddeeaf1-1911-4dad-9d70-a76fe82a3b9a
2025-02-05 09:12:38,186 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 1ddeeaf1-1911-4dad-9d70-a76fe82a3b9a)
2025-02-05 09:12:38,186 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: ab3f1749-fa10-4480-9d38-0076869927c6
2025-02-05 09:12:38,187 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: ab3f1749-fa10-4480-9d38-0076869927c6)
2025-02-05 09:12:38,187 - [DEBUG] - app.services.course_service - get_students_in_course() - Fetching students in course ID: ab3f1749-fa10-4480-9d38-0076869927c6
2025-02-05 09:12:38,188 - [INFO] - app.services.course_service - get_students_in_course() - Retrieved 0 students for course ID: ab3f1749-fa10-4480-9d38-0076869927c6.
2025-02-05 09:12:38,267 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:38,268 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:38,272 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:38,272 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:38,823 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2ac53305-0340-4c14-8e27-8cfa4aee47c7
2025-02-05 09:12:38,823 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 2ac53305-0340-4c14-8e27-8cfa4aee47c7)
2025-02-05 09:12:38,823 - [WARNING] - app.controllers.course_controller - create_course() - Unauthorized course creation attempt by user ID: 2ac53305-0340-4c14-8e27-8cfa4aee47c7
2025-02-05 09:12:38,900 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:38,901 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:38,905 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:38,906 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:39,461 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 32a30e8d-3bfe-4a9e-98b1-4706d230fa5a
2025-02-05 09:12:39,461 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 32a30e8d-3bfe-4a9e-98b1-4706d230fa5a)
2025-02-05 09:12:39,461 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 217c0ee5-15d2-498b-9b63-538f8d6e4151
2025-02-05 09:12:39,461 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 217c0ee5-15d2-498b-9b63-538f8d6e4151)
2025-02-05 09:12:39,461 - [DEBUG] - app.services.course_service - update_course() - Updating course ID: 217c0ee5-15d2-498b-9b63-538f8d6e4151 with new name: Updated Test Course
2025-02-05 09:12:39,466 - [INFO] - app.services.course_service - update_course() - Course ID: 217c0ee5-15d2-498b-9b63-538f8d6e4151 updated successfully.
2025-02-05 09:12:39,466 - [INFO] - app.controllers.course_controller - update_course() - Course updated successfully with ID: 217c0ee5-15d2-498b-9b63-538f8d6e4151
2025-02-05 09:12:39,466 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 217c0ee5-15d2-498b-9b63-538f8d6e4151
2025-02-05 09:12:39,466 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '217c0ee5-15d2-498b-9b63-538f8d6e4151', 'name': 'Updated Test Course', 'professor_id': '32a30e8d-3bfe-4a9e-98b1-4706d230fa5a', 'created_at': '2025-02-05T08:12:39', 'updated_at': '2025-02-05T08:12:39'}
2025-02-05 09:12:39,554 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:39,555 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:39,557 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:39,558 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:40,085 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 868f7775-0532-44e6-8ae8-e1e033b85905
2025-02-05 09:12:40,086 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 868f7775-0532-44e6-8ae8-e1e033b85905)
2025-02-05 09:12:40,086 - [WARNING] - app.controllers.course_controller - delete_course() - Unauthorized course deletion attempt by user ID: 868f7775-0532-44e6-8ae8-e1e033b85905
2025-02-05 09:12:40,157 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:40,158 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:40,162 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:40,162 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:40,729 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 76ae78cf-8c2a-4b03-9777-b8f6fa34bdef
2025-02-05 09:12:40,729 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 76ae78cf-8c2a-4b03-9777-b8f6fa34bdef)
2025-02-05 09:12:40,729 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 99d2d93e-4b32-4369-8d04-3dd6eca104d8
2025-02-05 09:12:40,729 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 99d2d93e-4b32-4369-8d04-3dd6eca104d8)
2025-02-05 09:12:40,729 - [DEBUG] - app.services.course_service - delete_course() - Deleting course ID: 99d2d93e-4b32-4369-8d04-3dd6eca104d8
2025-02-05 09:12:40,741 - [INFO] - app.services.course_service - delete_course() - Course ID: 99d2d93e-4b32-4369-8d04-3dd6eca104d8 deleted successfully.
2025-02-05 09:12:40,742 - [INFO] - app.controllers.course_controller - delete_course() - Course deleted successfully with ID: 99d2d93e-4b32-4369-8d04-3dd6eca104d8
2025-02-05 09:12:40,824 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:40,825 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:40,829 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:40,829 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:41,387 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: d9853254-1fbe-4f27-a830-5aeefbe69843
2025-02-05 09:12:41,387 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: d9853254-1fbe-4f27-a830-5aeefbe69843)
2025-02-05 09:12:41,387 - [WARNING] - app.controllers.grade_controller - list_grades() - Unauthorized access attempt by user ID: d9853254-1fbe-4f27-a830-5aeefbe69843
2025-02-05 09:12:41,461 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:41,462 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:41,465 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:41,466 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:42,041 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c532f85e-d89a-487d-aa74-7d6ddf1881c4
2025-02-05 09:12:42,041 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: c532f85e-d89a-487d-aa74-7d6ddf1881c4)
2025-02-05 09:12:42,041 - [DEBUG] - app.services.grade_service - list_grades() - Retrieving all grades from the database.
2025-02-05 09:12:42,043 - [INFO] - app.services.grade_service - list_grades() - Retrieved 1 grades.
2025-02-05 09:12:42,043 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: d094c675-7847-4221-991d-69afe3955530
2025-02-05 09:12:42,044 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'd094c675-7847-4221-991d-69afe3955530', 'course_id': 'fb335d90-100e-4f2e-80bf-b5306deb3af9', 'student_id': '13170641-c260-44f8-93ce-6a54ead95c2f', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-05T08:12:42', 'updated_at': '2025-02-05T08:12:42'}
2025-02-05 09:12:42,110 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:42,111 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:42,114 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:42,114 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:42,657 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: df4eb861-56c7-401d-a392-2562c2dbd2ef
2025-02-05 09:12:42,657 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: df4eb861-56c7-401d-a392-2562c2dbd2ef)
2025-02-05 09:12:42,658 - [WARNING] - app.controllers.grade_controller - assign_grade() - Missing required fields in grade assignment: {}
2025-02-05 09:12:42,730 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:42,731 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:42,735 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:42,736 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:43,355 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ce4104cd-1745-4a8d-a718-a195a0673c90
2025-02-05 09:12:43,356 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: ce4104cd-1745-4a8d-a718-a195a0673c90)
2025-02-05 09:12:43,356 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 45bdae2e-8ddb-461c-bd06-7d222c7fc986
2025-02-05 09:12:43,356 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 45bdae2e-8ddb-461c-bd06-7d222c7fc986)
2025-02-05 09:12:43,356 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: invalid_student_id
2025-02-05 09:12:43,362 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: invalid_student_id
2025-02-05 09:12:43,362 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=45bdae2e-8ddb-461c-bd06-7d222c7fc986, student_id=invalid_student_id
2025-02-05 09:12:43,443 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:43,444 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:43,448 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:43,449 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:44,063 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ee459090-81ff-45f2-a176-18e3261872e7
2025-02-05 09:12:44,063 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: ee459090-81ff-45f2-a176-18e3261872e7)
2025-02-05 09:12:44,064 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: invalid_course_id
2025-02-05 09:12:44,065 - [DEBUG] - app.services.course_service - get_course_by_id() - No course found with ID: invalid_course_id
2025-02-05 09:12:44,065 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e71b2e86-d758-4cb3-9172-170f99ba2f25
2025-02-05 09:12:44,065 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: e71b2e86-d758-4cb3-9172-170f99ba2f25)
2025-02-05 09:12:44,065 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=invalid_course_id, student_id=e71b2e86-d758-4cb3-9172-170f99ba2f25
2025-02-05 09:12:44,153 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:44,154 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:44,157 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:44,158 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:44,769 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 940f5eff-a818-4142-ae28-0c03e9e7db75
2025-02-05 09:12:44,769 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 940f5eff-a818-4142-ae28-0c03e9e7db75)
2025-02-05 09:12:44,769 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 6b08691f-ebc1-492f-b579-2cfc38c0ab86
2025-02-05 09:12:44,769 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 6b08691f-ebc1-492f-b579-2cfc38c0ab86)
2025-02-05 09:12:44,769 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: d4d73d71-3193-4354-9358-f95d5c570617
2025-02-05 09:12:44,769 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: d4d73d71-3193-4354-9358-f95d5c570617)
2025-02-05 09:12:44,770 - [DEBUG] - app.services.grade_service - assign_grade() - Assigning grade 90 to student d4d73d71-3193-4354-9358-f95d5c570617 for course 6b08691f-ebc1-492f-b579-2cfc38c0ab86.
2025-02-05 09:12:44,776 - [INFO] - app.services.grade_service - assign_grade() - Grade assigned: 6ede9181-1e43-4003-ba22-6c566830373b, Value: 90.0
2025-02-05 09:12:44,776 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 6ede9181-1e43-4003-ba22-6c566830373b
2025-02-05 09:12:44,776 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '6ede9181-1e43-4003-ba22-6c566830373b', 'course_id': '6b08691f-ebc1-492f-b579-2cfc38c0ab86', 'student_id': 'd4d73d71-3193-4354-9358-f95d5c570617', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-05T08:12:45', 'updated_at': '2025-02-05T08:12:45'}
2025-02-05 09:12:44,850 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:44,851 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:44,855 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:44,855 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:45,466 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: d2a61449-9995-40c2-b1d3-8c799deb4424
2025-02-05 09:12:45,466 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: d2a61449-9995-40c2-b1d3-8c799deb4424)
2025-02-05 09:12:45,466 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: d68e830e-5fb1-4082-b0e8-87607fe5e783
2025-02-05 09:12:45,466 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: d68e830e-5fb1-4082-b0e8-87607fe5e783, Grade Value: 90.0
2025-02-05 09:12:45,466 - [WARNING] - app.controllers.grade_controller - get_grade() - Unauthorized grade access attempt by user ID: d2a61449-9995-40c2-b1d3-8c799deb4424
2025-02-05 09:12:45,539 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:45,540 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:45,544 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:45,545 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:46,108 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 84526d1e-2989-47d8-8f07-01c1269a441d
2025-02-05 09:12:46,108 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 84526d1e-2989-47d8-8f07-01c1269a441d)
2025-02-05 09:12:46,109 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 7a89a65c-7849-4509-8053-2dfdb2ddea02
2025-02-05 09:12:46,109 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 7a89a65c-7849-4509-8053-2dfdb2ddea02, Grade Value: 90.0
2025-02-05 09:12:46,109 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 7a89a65c-7849-4509-8053-2dfdb2ddea02
2025-02-05 09:12:46,109 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '7a89a65c-7849-4509-8053-2dfdb2ddea02', 'course_id': '25ce5b51-00fe-4a3f-a328-7587ee6f2406', 'student_id': '53811135-f5a4-4e2f-9488-2a1096ba3bfb', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-05T08:12:46', 'updated_at': '2025-02-05T08:12:46'}
2025-02-05 09:12:46,181 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:46,182 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:46,186 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:46,187 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:46,762 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2342ece1-ca40-4757-833c-beae3845d331
2025-02-05 09:12:46,762 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 2342ece1-ca40-4757-833c-beae3845d331)
2025-02-05 09:12:46,762 - [WARNING] - app.controllers.grade_controller - update_grade() - Unauthorized grade update attempt by user ID: 2342ece1-ca40-4757-833c-beae3845d331
2025-02-05 09:12:46,836 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:46,837 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:46,840 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:46,841 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:47,402 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c36cba5d-ed2b-417e-99d7-0404bc8415c0
2025-02-05 09:12:47,402 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: c36cba5d-ed2b-417e-99d7-0404bc8415c0)
2025-02-05 09:12:47,402 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: c63ea122-a70b-4a2c-9c0e-c62042208a1a
2025-02-05 09:12:47,403 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: c63ea122-a70b-4a2c-9c0e-c62042208a1a, Grade Value: 90.0
2025-02-05 09:12:47,403 - [WARNING] - app.controllers.grade_controller - update_grade() - Missing grade value for update: {}
2025-02-05 09:12:47,475 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:47,476 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:47,480 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:47,480 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:48,027 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4f746d80-c741-4974-a0af-88c43c8cc246
2025-02-05 09:12:48,028 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 4f746d80-c741-4974-a0af-88c43c8cc246)
2025-02-05 09:12:48,028 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 6b1f35e1-5897-466b-8640-ec4a2fff07bb
2025-02-05 09:12:48,028 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 6b1f35e1-5897-466b-8640-ec4a2fff07bb, Grade Value: 90.0
2025-02-05 09:12:48,028 - [DEBUG] - app.services.grade_service - update_grade() - Updating grade ID: 6b1f35e1-5897-466b-8640-ec4a2fff07bb to new value: 95.
2025-02-05 09:12:48,034 - [INFO] - app.services.grade_service - update_grade() - Grade ID: 6b1f35e1-5897-466b-8640-ec4a2fff07bb updated to value: 95.
2025-02-05 09:12:48,034 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 6b1f35e1-5897-466b-8640-ec4a2fff07bb
2025-02-05 09:12:48,034 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '6b1f35e1-5897-466b-8640-ec4a2fff07bb', 'course_id': 'd0a1e703-42fb-4db8-b64b-69dc6c252a23', 'student_id': 'c457714f-c89b-4aa9-bf94-39d2d0e53b15', 'grade': 95.0, 'name': 'DM', 'created_at': '2025-02-05T08:12:48', 'updated_at': '2025-02-05T08:12:48'}
2025-02-05 09:12:48,106 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:48,107 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:48,111 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:48,111 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:48,683 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0d719a60-8fe0-4ef3-a472-d5326432ee24
2025-02-05 09:12:48,683 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 0d719a60-8fe0-4ef3-a472-d5326432ee24)
2025-02-05 09:12:48,683 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 4991faaa-ec3f-4c41-99b3-0bc24aab8b51
2025-02-05 09:12:48,683 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 4991faaa-ec3f-4c41-99b3-0bc24aab8b51)
2025-02-05 09:12:48,683 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7adc70a4-7896-496d-bcad-0e1962a9dd4c
2025-02-05 09:12:48,683 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 7adc70a4-7896-496d-bcad-0e1962a9dd4c)
2025-02-05 09:12:48,683 - [DEBUG] - app.services.grade_service - get_student_grades() - Fetching grades for student ID: 7adc70a4-7896-496d-bcad-0e1962a9dd4c in course ID: 4991faaa-ec3f-4c41-99b3-0bc24aab8b51.
2025-02-05 09:12:48,685 - [INFO] - app.services.grade_service - get_student_grades() - Retrieved 1 grades for student ID: 7adc70a4-7896-496d-bcad-0e1962a9dd4c in course ID: 4991faaa-ec3f-4c41-99b3-0bc24aab8b51.
2025-02-05 09:12:48,685 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: e5e0dc6e-c761-484b-920f-a6541c5aed43
2025-02-05 09:12:48,686 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'e5e0dc6e-c761-484b-920f-a6541c5aed43', 'course_id': '4991faaa-ec3f-4c41-99b3-0bc24aab8b51', 'student_id': '7adc70a4-7896-496d-bcad-0e1962a9dd4c', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-05T08:12:49', 'updated_at': '2025-02-05T08:12:49'}
2025-02-05 09:12:48,767 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:48,768 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:48,772 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:48,772 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:49,315 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 326d933e-8f25-4371-9692-c08e34d11b99
2025-02-05 09:12:49,315 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 326d933e-8f25-4371-9692-c08e34d11b99)
2025-02-05 09:12:49,315 - [WARNING] - app.controllers.grade_controller - delete_grade() - Unauthorized grade deletion attempt by user ID: 326d933e-8f25-4371-9692-c08e34d11b99
2025-02-05 09:12:49,389 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:49,390 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:49,394 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:49,394 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:49,923 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8ea43e7f-4814-4c08-b458-533e2651a216
2025-02-05 09:12:49,923 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 8ea43e7f-4814-4c08-b458-533e2651a216)
2025-02-05 09:12:49,923 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 174f12c8-2c59-4093-8d16-7c671278e616
2025-02-05 09:12:49,923 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 174f12c8-2c59-4093-8d16-7c671278e616, Grade Value: 90.0
2025-02-05 09:12:49,923 - [DEBUG] - app.services.grade_service - delete_grade() - Deleting grade ID: 174f12c8-2c59-4093-8d16-7c671278e616.
2025-02-05 09:12:49,927 - [INFO] - app.services.grade_service - delete_grade() - Grade ID: 174f12c8-2c59-4093-8d16-7c671278e616 deleted successfully.
2025-02-05 09:12:50,001 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:50,002 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:50,005 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:50,006 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:50,749 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 57eddfa7-f5f8-442e-a92a-eabfa1068656
2025-02-05 09:12:50,749 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 57eddfa7-f5f8-442e-a92a-eabfa1068656)
2025-02-05 09:12:50,749 - [DEBUG] - app.services.user_service - get_all_users() - Fetching all users from the database.
2025-02-05 09:12:50,758 - [INFO] - app.services.user_service - get_all_users() - Fetched 3 users from the database.
2025-02-05 09:12:50,758 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '048a82ad-86c7-4bad-9c00-2d8193ef2792', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:12:51', 'updated_at': '2025-02-05T08:12:51', 'courses_enrolled': []}
2025-02-05 09:12:50,759 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '57eddfa7-f5f8-442e-a92a-eabfa1068656', 'name': 'admin', 'email': 'admin@example.com', 'role': 'Administrator', 'created_at': '2025-02-05T08:12:51', 'updated_at': '2025-02-05T08:12:51', 'courses_enrolled': []}
2025-02-05 09:12:50,759 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '9aba7ece-0515-4499-93e9-00d2b14a603d', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-05T08:12:51', 'updated_at': '2025-02-05T08:12:51', 'courses_enrolled': []}
2025-02-05 09:12:50,839 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:50,840 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:50,845 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:50,845 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:51,668 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7490b7d1-62c5-4ab5-93cf-65bd526b64ad
2025-02-05 09:12:51,668 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 7490b7d1-62c5-4ab5-93cf-65bd526b64ad)
2025-02-05 09:12:51,668 - [WARNING] - app.controllers.user_controller - list_users() - Unauthorized access attempt by user ID: 7490b7d1-62c5-4ab5-93cf-65bd526b64ad
2025-02-05 09:12:51,751 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:51,753 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:51,757 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:51,757 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:52,558 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: f3b59909-732b-4da3-ae66-41b0cf340000
2025-02-05 09:12:52,559 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: f3b59909-732b-4da3-ae66-41b0cf340000)
2025-02-05 09:12:52,559 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 17f7c569-78f7-44b6-97d9-e89e9ade0f52
2025-02-05 09:12:52,559 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 17f7c569-78f7-44b6-97d9-e89e9ade0f52)
2025-02-05 09:12:52,559 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '17f7c569-78f7-44b6-97d9-e89e9ade0f52', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:12:53', 'updated_at': '2025-02-05T08:12:53', 'courses_enrolled': []}
2025-02-05 09:12:52,646 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:52,647 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:52,652 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:52,652 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:53,454 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: eb80d71a-6a12-4331-b384-576d17404db0
2025-02-05 09:12:53,454 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: eb80d71a-6a12-4331-b384-576d17404db0)
2025-02-05 09:12:53,454 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: eb80d71a-6a12-4331-b384-576d17404db0
2025-02-05 09:12:53,454 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: eb80d71a-6a12-4331-b384-576d17404db0)
2025-02-05 09:12:53,455 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'eb80d71a-6a12-4331-b384-576d17404db0', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-05T08:12:53', 'updated_at': '2025-02-05T08:12:53', 'courses_enrolled': []}
2025-02-05 09:12:53,546 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:53,547 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:53,552 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:53,552 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:54,375 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 1969f8ba-e874-40ae-9d7f-2792a6718eae
2025-02-05 09:12:54,375 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 1969f8ba-e874-40ae-9d7f-2792a6718eae)
2025-02-05 09:12:54,375 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: nonexistent-user-id
2025-02-05 09:12:54,382 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: nonexistent-user-id
2025-02-05 09:12:54,382 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID nonexistent-user-id
2025-02-05 09:12:54,463 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:54,465 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:54,469 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:54,469 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:55,281 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 1728f51f-1d41-4a3d-8c64-d4eda36c772b
2025-02-05 09:12:55,281 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 1728f51f-1d41-4a3d-8c64-d4eda36c772b)
2025-02-05 09:12:55,282 - [DEBUG] - app.services.user_service - search_users() - Searching users with query: student
2025-02-05 09:12:55,289 - [INFO] - app.services.user_service - search_users() - Found 1 users matching query 'student'.
2025-02-05 09:12:55,289 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '9fc3abdb-dd95-4a42-81c0-04306ef1f030', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:12:55', 'updated_at': '2025-02-05T08:12:55', 'courses_enrolled': []}
2025-02-05 09:12:55,372 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:55,374 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:55,378 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:55,379 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:56,128 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4009a249-2ae6-4e8b-8350-abe3ffe1c2eb
2025-02-05 09:12:56,129 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 4009a249-2ae6-4e8b-8350-abe3ffe1c2eb)
2025-02-05 09:12:56,129 - [WARNING] - app.controllers.user_controller - search_users() - Unauthorized access attempt by user ID: 4009a249-2ae6-4e8b-8350-abe3ffe1c2eb
2025-02-05 09:12:56,211 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:56,213 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:56,217 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:56,217 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:57,014 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6d2fe1bc-79b1-40db-8546-030ad23d681a
2025-02-05 09:12:57,015 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 6d2fe1bc-79b1-40db-8546-030ad23d681a)
2025-02-05 09:12:57,015 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Missing fields.
2025-02-05 09:12:57,097 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:57,098 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:57,103 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:57,103 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:57,933 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 73c99d84-e7d4-4725-b192-269e10ad6a14
2025-02-05 09:12:57,933 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 73c99d84-e7d4-4725-b192-269e10ad6a14)
2025-02-05 09:12:57,933 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Invalid role 'Administrator'.
2025-02-05 09:12:58,022 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:58,024 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:58,028 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:58,028 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:58,740 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6a453d42-afc1-41d4-9d3d-32265d1ca38c
2025-02-05 09:12:58,740 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 6a453d42-afc1-41d4-9d3d-32265d1ca38c)
2025-02-05 09:12:58,741 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newstudent@example.com
2025-02-05 09:12:58,749 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newstudent@example.com
2025-02-05 09:12:58,749 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Student, Email: newstudent@example.com, Role: Student
2025-02-05 09:12:58,941 - [INFO] - app.services.user_service - create_user() - User created with ID: e63172c8-32fa-413f-a2fe-16567047e9a7
2025-02-05 09:12:58,941 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e63172c8-32fa-413f-a2fe-16567047e9a7
2025-02-05 09:12:58,941 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: e63172c8-32fa-413f-a2fe-16567047e9a7)
2025-02-05 09:12:58,942 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'e63172c8-32fa-413f-a2fe-16567047e9a7', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:12:59', 'updated_at': '2025-02-05T08:12:59', 'courses_enrolled': []}
2025-02-05 09:12:58,943 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6a453d42-afc1-41d4-9d3d-32265d1ca38c
2025-02-05 09:12:58,945 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 6a453d42-afc1-41d4-9d3d-32265d1ca38c)
2025-02-05 09:12:58,945 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e63172c8-32fa-413f-a2fe-16567047e9a7
2025-02-05 09:12:58,952 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: e63172c8-32fa-413f-a2fe-16567047e9a7)
2025-02-05 09:12:58,952 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'e63172c8-32fa-413f-a2fe-16567047e9a7', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:12:59', 'updated_at': '2025-02-05T08:12:59', 'courses_enrolled': []}
2025-02-05 09:12:59,034 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:59,035 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:59,039 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:59,039 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:12:59,895 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b1c74aea-1af3-4ab7-9509-5d2dcebaa0b4
2025-02-05 09:12:59,896 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: b1c74aea-1af3-4ab7-9509-5d2dcebaa0b4)
2025-02-05 09:12:59,896 - [WARNING] - app.controllers.user_controller - update_user() - Unauthorized access attempt by user ID: b1c74aea-1af3-4ab7-9509-5d2dcebaa0b4
2025-02-05 09:12:59,983 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:12:59,985 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:12:59,990 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:12:59,990 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:13:00,810 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3de6281b-69ab-487f-9546-d07d66170d5a
2025-02-05 09:13:00,810 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 3de6281b-69ab-487f-9546-d07d66170d5a)
2025-02-05 09:13:00,810 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3de6281b-69ab-487f-9546-d07d66170d5a
2025-02-05 09:13:00,811 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 3de6281b-69ab-487f-9546-d07d66170d5a)
2025-02-05 09:13:00,811 - [DEBUG] - app.services.user_service - update_user() - Updating user ID: 3de6281b-69ab-487f-9546-d07d66170d5a with Name: Updated Professor Name, Email: unchanged
2025-02-05 09:13:00,823 - [INFO] - app.services.user_service - update_user() - User ID: 3de6281b-69ab-487f-9546-d07d66170d5a updated successfully.
2025-02-05 09:13:00,823 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3de6281b-69ab-487f-9546-d07d66170d5a
2025-02-05 09:13:00,823 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Updated Professor Name (ID: 3de6281b-69ab-487f-9546-d07d66170d5a)
2025-02-05 09:13:00,823 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '3de6281b-69ab-487f-9546-d07d66170d5a', 'name': 'Updated Professor Name', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-05T08:13:01', 'updated_at': '2025-02-05T08:13:01', 'courses_enrolled': []}
2025-02-05 09:13:00,909 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-05 09:13:00,910 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-05 09:13:00,914 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-05 09:13:00,915 - [INFO] - app - create_app() - MySQL is connected!
2025-02-05 09:13:01,702 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: a5d4a3c4-ebb7-4c32-a610-fdc47345e6f6
2025-02-05 09:13:01,703 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: a5d4a3c4-ebb7-4c32-a610-fdc47345e6f6)
2025-02-05 09:13:01,703 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: tempstudent@example.com
2025-02-05 09:13:01,714 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: tempstudent@example.com
2025-02-05 09:13:01,714 - [DEBUG] - app.services.user_service - create_user() - Creating user: Temp Student, Email: tempstudent@example.com, Role: Student
2025-02-05 09:13:01,912 - [INFO] - app.services.user_service - create_user() - User created with ID: 175e8ba8-e6e1-415a-9840-f693f66be640
2025-02-05 09:13:01,912 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 175e8ba8-e6e1-415a-9840-f693f66be640
2025-02-05 09:13:01,912 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: 175e8ba8-e6e1-415a-9840-f693f66be640)
2025-02-05 09:13:01,913 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '175e8ba8-e6e1-415a-9840-f693f66be640', 'name': 'Temp Student', 'email': 'tempstudent@example.com', 'role': 'Student', 'created_at': '2025-02-05T08:13:02', 'updated_at': '2025-02-05T08:13:02', 'courses_enrolled': []}
2025-02-05 09:13:01,915 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: a5d4a3c4-ebb7-4c32-a610-fdc47345e6f6
2025-02-05 09:13:01,916 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: a5d4a3c4-ebb7-4c32-a610-fdc47345e6f6)
2025-02-05 09:13:01,916 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 175e8ba8-e6e1-415a-9840-f693f66be640
2025-02-05 09:13:01,923 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: 175e8ba8-e6e1-415a-9840-f693f66be640)
2025-02-05 09:13:01,924 - [DEBUG] - app.services.user_service - delete_user() - Deleting user ID: 175e8ba8-e6e1-415a-9840-f693f66be640
2025-02-05 09:13:01,928 - [INFO] - app.services.user_service - delete_user() - User ID: 175e8ba8-e6e1-415a-9840-f693f66be640 deleted successfully.
2025-02-05 09:13:01,929 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: a5d4a3c4-ebb7-4c32-a610-fdc47345e6f6
2025-02-05 09:13:01,931 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: a5d4a3c4-ebb7-4c32-a610-fdc47345e6f6)
2025-02-05 09:13:01,931 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 175e8ba8-e6e1-415a-9840-f693f66be640
2025-02-05 09:13:01,932 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: 175e8ba8-e6e1-415a-9840-f693f66be640
2025-02-05 09:13:01,932 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID 175e8ba8-e6e1-415a-9840-f693f66be640
2025-02-10 23:00:05,964 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:06,055 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:06,203 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:06,203 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:06,203 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-10 23:00:06,218 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-10 23:00:06,219 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-10 23:00:06,225 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-10 23:00:07,153 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:07,154 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:07,176 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:07,177 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:07,889 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:07,890 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:07,896 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:07,896 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:08,640 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:08,640 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:08,640 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:08,640 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:09,419 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:09,419 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:09,419 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:09,419 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:10,267 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:10,267 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:10,275 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:10,276 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:10,991 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:10,991 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:10,999 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:10,999 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:11,819 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:11,820 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:11,823 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:11,824 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:12,628 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:12,628 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:12,636 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:12,636 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:13,429 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:13,429 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:13,435 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:13,435 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:14,264 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:14,265 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:14,269 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:14,269 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:15,066 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:15,066 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:15,070 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:15,070 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:15,846 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:15,846 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:15,846 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:15,852 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:16,689 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:16,689 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:16,692 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:16,692 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:17,510 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:17,511 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:17,515 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:17,515 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:18,294 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:18,295 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:18,299 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:18,299 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:19,087 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:19,088 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:19,093 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:19,093 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:19,841 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:19,841 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:19,841 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:19,841 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:20,573 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:20,574 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:20,577 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:20,579 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:21,334 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:21,334 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:21,351 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:21,351 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:22,070 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:22,070 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:22,070 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:22,070 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:22,796 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:22,796 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:22,796 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:22,796 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:23,533 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:23,534 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:23,538 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:23,538 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:24,343 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:24,343 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:24,343 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:24,343 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:25,094 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:25,096 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:25,099 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:25,100 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:25,829 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:25,831 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:25,834 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:25,835 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:26,530 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:26,530 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:26,530 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:26,530 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:27,234 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:27,235 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:27,238 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:27,238 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:27,950 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:27,950 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:27,950 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:27,950 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:28,717 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:28,717 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:28,717 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:28,717 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:29,455 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:29,455 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:29,455 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:29,455 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:30,159 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:30,159 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:30,159 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:30,159 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:30,883 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:30,883 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:30,883 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:30,883 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:31,613 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:31,613 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:31,613 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:31,613 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:32,303 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:32,303 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:32,316 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:32,317 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:33,017 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:33,018 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:33,023 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:33,023 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:33,789 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:33,790 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:33,791 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:33,791 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:34,513 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:34,513 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:34,513 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:34,513 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:35,213 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:35,214 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:35,218 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:35,219 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:35,891 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:35,891 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:35,907 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:35,907 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:36,650 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:36,650 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:36,650 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:36,650 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:37,365 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:37,367 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:37,371 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:37,371 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:38,049 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:38,065 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:38,065 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:38,065 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:38,769 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:38,769 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:38,769 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:38,769 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:39,505 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:39,507 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:39,510 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:39,511 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:40,232 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:40,232 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:40,236 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:40,236 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:40,938 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:40,938 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:40,938 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:40,938 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:00:41,734 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:00:41,734 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:00:41,750 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:00:41,750 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:01:52,203 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:01:52,246 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:01:52,256 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:01:52,257 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:01:52,282 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-10 23:01:52,306 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-10 23:01:52,306 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-10 23:01:52,314 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-10 23:01:53,179 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:01:53,195 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:01:53,195 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:01:53,195 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:01:53,891 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:01:53,906 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:01:53,906 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:01:53,906 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:01:54,662 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:01:54,663 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:01:54,666 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:01:54,666 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:01:55,412 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:01:55,418 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:01:55,419 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:01:55,419 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:01:56,220 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:01:56,236 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:01:56,236 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:01:56,236 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:01:56,978 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:01:56,978 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:01:56,982 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:01:56,983 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:01:57,802 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:01:57,802 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:01:57,802 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:01:57,802 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:01:58,677 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:01:58,677 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:01:58,690 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:01:58,690 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:01:59,564 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:01:59,564 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:01:59,564 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:01:59,564 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:00,620 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:00,620 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:00,628 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:00,629 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:01,504 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:01,504 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:01,511 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:01,511 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:02,446 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:02,446 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:02,446 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:02,446 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:03,222 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:03,223 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:03,227 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:03,228 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:04,001 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:04,001 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:04,008 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:04,008 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:04,753 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:04,753 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:04,753 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:04,768 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:05,490 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:05,490 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:05,505 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:05,506 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:06,263 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:06,264 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:06,268 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:06,268 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:07,027 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:07,028 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:07,031 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:07,031 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:07,740 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:07,740 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:07,740 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:07,740 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:08,508 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:08,508 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:08,514 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:08,514 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:09,347 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:09,348 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:09,352 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:09,352 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:10,271 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:10,271 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:10,271 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:10,271 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:11,195 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:11,196 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:11,199 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:11,199 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:12,023 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:12,039 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:12,039 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:12,039 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:12,838 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:12,839 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:12,844 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:12,844 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:13,681 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:13,682 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:13,686 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:13,686 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:14,616 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:14,617 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:14,621 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:14,621 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:15,549 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:15,550 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:15,554 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:15,554 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:16,412 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:16,413 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:16,416 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:16,416 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:17,273 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:17,274 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:17,277 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:17,278 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:18,141 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:18,142 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:18,146 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:18,147 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:19,084 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:19,085 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:19,088 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:19,088 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:19,964 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:19,971 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:19,974 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:19,974 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:20,865 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:20,867 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:20,871 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:20,871 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:21,714 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:21,715 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:21,718 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:21,718 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:22,576 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:22,577 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:22,580 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:22,580 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:23,554 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:23,554 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:23,561 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:23,561 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:24,584 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:24,585 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:24,589 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:24,589 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:25,513 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:25,514 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:25,516 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:25,518 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:26,526 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:26,528 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:26,530 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:26,531 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:27,519 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:27,520 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:27,524 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:27,525 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:28,392 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:28,393 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:28,396 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:28,396 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:29,320 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:29,321 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:29,324 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:29,325 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:30,223 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:30,224 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:30,227 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:30,228 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:31,101 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:31,102 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:31,105 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:31,106 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:31,978 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:31,979 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:31,983 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:31,983 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:02:32,871 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:02:32,872 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:02:32,875 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:02:32,875 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:00,751 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:00,791 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:00,791 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:00,791 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:00,823 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-10 23:03:00,838 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-10 23:03:00,840 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-10 23:03:00,840 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-10 23:03:01,466 - [WARNING] - app.controllers.auth_controller - register() - Missing fields: ['role']
2025-02-10 23:03:01,552 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:01,552 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:01,552 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:01,552 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:02,116 - [WARNING] - app.controllers.auth_controller - register() - Invalid email format during registration.
2025-02-10 23:03:02,178 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:02,178 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:02,178 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:02,178 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:02,732 - [WARNING] - app.controllers.auth_controller - register() - Password requirements not met during registration.
2025-02-10 23:03:02,813 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:02,813 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:02,819 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:02,819 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:03,351 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 1f979434-0e41-4728-bf63-4791abe0e399
2025-02-10 23:03:03,351 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 1f979434-0e41-4728-bf63-4791abe0e399)
2025-02-10 23:03:03,351 - [WARNING] - app.controllers.auth_controller - register() - Unauthorized registration attempt by user ID: 1f979434-0e41-4728-bf63-4791abe0e399
2025-02-10 23:03:03,422 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:03,422 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:03,422 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:03,422 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:04,059 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: a214f0cd-56db-4e7b-bd24-0ef7ad55f6a9
2025-02-10 23:03:04,059 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: a214f0cd-56db-4e7b-bd24-0ef7ad55f6a9)
2025-02-10 23:03:04,059 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newprofadmin@example.com
2025-02-10 23:03:04,061 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newprofadmin@example.com
2025-02-10 23:03:04,061 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Professor Admin, Email: newprofadmin@example.com, Role: Professor
2025-02-10 23:03:04,192 - [INFO] - app.services.user_service - create_user() - User created with ID: fb957f36-ea05-4bff-be8e-5c8649e49f49
2025-02-10 23:03:04,192 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: fb957f36-ea05-4bff-be8e-5c8649e49f49
2025-02-10 23:03:04,278 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:04,278 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:04,285 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:04,285 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:04,846 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8ed75931-1f2f-4bbf-bd6b-7b37ced0fc25
2025-02-10 23:03:04,846 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 8ed75931-1f2f-4bbf-bd6b-7b37ced0fc25)
2025-02-10 23:03:04,846 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-10 23:03:04,846 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: conflict@example.com
2025-02-10 23:03:04,846 - [DEBUG] - app.services.user_service - create_user() - Creating user: Conflict User, Email: conflict@example.com, Role: Student
2025-02-10 23:03:04,971 - [INFO] - app.services.user_service - create_user() - User created with ID: 3afda01b-813b-4642-bd2a-80e060cc6e28
2025-02-10 23:03:04,971 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: 3afda01b-813b-4642-bd2a-80e060cc6e28
2025-02-10 23:03:04,971 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8ed75931-1f2f-4bbf-bd6b-7b37ced0fc25
2025-02-10 23:03:04,971 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 8ed75931-1f2f-4bbf-bd6b-7b37ced0fc25)
2025-02-10 23:03:04,971 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-10 23:03:04,987 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: Conflict User (ID: 3afda01b-813b-4642-bd2a-80e060cc6e28)
2025-02-10 23:03:04,987 - [WARNING] - app.controllers.auth_controller - register() - Email already in use during registration.
2025-02-10 23:03:05,058 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:05,058 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:05,073 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:05,073 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:05,619 - [WARNING] - app.controllers.auth_controller - login() - Login failed: Missing credentials.
2025-02-10 23:03:05,696 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:05,696 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:05,696 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:05,696 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:06,239 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: doesnotexist@example.com
2025-02-10 23:03:06,239 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: doesnotexist@example.com
2025-02-10 23:03:06,239 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: doesnotexist@example.com
2025-02-10 23:03:06,239 - [WARNING] - app.services.auth_service - authenticate_user() - No user found with email: doesnotexist@example.com
2025-02-10 23:03:06,239 - [WARNING] - app.controllers.auth_controller - login() - Invalid credentials during login.
2025-02-10 23:03:06,316 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:06,316 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:06,316 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:06,316 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:06,926 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-10 23:03:06,926 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:03:06,933 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 17e5f01b-30d7-4913-aedf-4fbd155f1ec1)
2025-02-10 23:03:07,058 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: 17e5f01b-30d7-4913-aedf-4fbd155f1ec1) authenticated successfully.
2025-02-10 23:03:07,058 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: 17e5f01b-30d7-4913-aedf-4fbd155f1ec1
2025-02-10 23:03:07,059 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '17e5f01b-30d7-4913-aedf-4fbd155f1ec1', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:03:07', 'updated_at': '2025-02-10T22:03:07', 'courses_enrolled': []}
2025-02-10 23:03:07,133 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:07,134 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:07,138 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:07,138 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:07,755 - [WARNING] - app.controllers.auth_controller - change_password() - Change password failed: Missing required fields.
2025-02-10 23:03:07,818 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:07,818 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:07,818 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:07,818 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:08,461 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:03:08,467 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 611e5f2f-f3d5-4c9e-8af6-47579d11d1bb)
2025-02-10 23:03:08,592 - [WARNING] - app.controllers.auth_controller - change_password() - Incorrect current password during password change.
2025-02-10 23:03:08,663 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:08,665 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:08,667 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:08,667 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:09,276 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:03:09,292 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 33206a93-1561-438f-a85f-bb0219366fc7)
2025-02-10 23:03:09,399 - [WARNING] - app.controllers.auth_controller - change_password() - New password requirements not met.
2025-02-10 23:03:09,482 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:09,482 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:09,482 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:09,482 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:10,049 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:03:10,064 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 140b0362-8111-47b9-a507-0b0b6756a9b8)
2025-02-10 23:03:10,182 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: 140b0362-8111-47b9-a507-0b0b6756a9b8
2025-02-10 23:03:10,417 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: 140b0362-8111-47b9-a507-0b0b6756a9b8
2025-02-10 23:03:10,417 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: 140b0362-8111-47b9-a507-0b0b6756a9b8
2025-02-10 23:03:10,417 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-10 23:03:10,417 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:03:10,417 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 140b0362-8111-47b9-a507-0b0b6756a9b8)
2025-02-10 23:03:10,536 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: 140b0362-8111-47b9-a507-0b0b6756a9b8) authenticated successfully.
2025-02-10 23:03:10,536 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: 140b0362-8111-47b9-a507-0b0b6756a9b8
2025-02-10 23:03:10,536 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '140b0362-8111-47b9-a507-0b0b6756a9b8', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:03:10', 'updated_at': '2025-02-10T22:03:10', 'courses_enrolled': []}
2025-02-10 23:03:10,536 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:03:10,536 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 140b0362-8111-47b9-a507-0b0b6756a9b8)
2025-02-10 23:03:10,644 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: 140b0362-8111-47b9-a507-0b0b6756a9b8
2025-02-10 23:03:10,896 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: 140b0362-8111-47b9-a507-0b0b6756a9b8
2025-02-10 23:03:10,896 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: 140b0362-8111-47b9-a507-0b0b6756a9b8
2025-02-10 23:03:10,968 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:10,968 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:10,984 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:10,984 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:11,546 - [INFO] - app.controllers.course_controller - list_courses() - Listing courses - Page: 1, Per Page: 10
2025-02-10 23:03:11,546 - [DEBUG] - app.services.course_service - get_all_courses_paginated() - Fetching courses - Page: 1, Per Page: 10
2025-02-10 23:03:11,546 - [INFO] - app.services.course_service - get_all_courses_paginated() - Retrieved 1 courses on page 1.
2025-02-10 23:03:11,546 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: dbfb6b06-166f-473d-b7fe-63dcf2732cf7
2025-02-10 23:03:11,546 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'dbfb6b06-166f-473d-b7fe-63dcf2732cf7', 'name': 'Test Course', 'professor_id': '4e015fe0-bd2d-4a00-975e-1457e87e8c0d', 'created_at': '2025-02-10T22:03:12', 'updated_at': '2025-02-10T22:03:12'}
2025-02-10 23:03:11,623 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:11,623 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:11,639 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:11,639 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:12,244 - [INFO] - app.controllers.course_controller - get_course() - Retrieving course with ID: a712fe3e-4f5c-429a-904b-909faf37a4bb
2025-02-10 23:03:12,244 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: a712fe3e-4f5c-429a-904b-909faf37a4bb
2025-02-10 23:03:12,244 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: a712fe3e-4f5c-429a-904b-909faf37a4bb)
2025-02-10 23:03:12,244 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: a712fe3e-4f5c-429a-904b-909faf37a4bb
2025-02-10 23:03:12,244 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'a712fe3e-4f5c-429a-904b-909faf37a4bb', 'name': 'Test Course', 'professor_id': '9903eee7-6edf-4507-aa7e-d3d836549c07', 'created_at': '2025-02-10T22:03:12', 'updated_at': '2025-02-10T22:03:12'}
2025-02-10 23:03:12,318 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:12,319 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:12,322 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:12,322 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:12,870 - [INFO] - app.controllers.course_controller - search_courses() - Searching courses with query: 'Test'
2025-02-10 23:03:12,870 - [DEBUG] - app.services.course_service - search_courses_by_name() - Searching courses with name containing: Test
2025-02-10 23:03:12,886 - [INFO] - app.services.course_service - search_courses_by_name() - Found 1 courses matching query 'Test'.
2025-02-10 23:03:12,886 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 9d9d2ec8-ae7e-4c00-ab39-4719abf3088c
2025-02-10 23:03:12,886 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '9d9d2ec8-ae7e-4c00-ab39-4719abf3088c', 'name': 'Test Course', 'professor_id': '7980583b-9f41-4f3b-8d94-2c6b9538139e', 'created_at': '2025-02-10T22:03:13', 'updated_at': '2025-02-10T22:03:13'}
2025-02-10 23:03:12,948 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:12,948 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:12,948 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:12,948 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:13,542 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 21158b36-baf4-46ad-ba44-44a672b5c53c
2025-02-10 23:03:13,542 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 21158b36-baf4-46ad-ba44-44a672b5c53c)
2025-02-10 23:03:13,542 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 482ba087-4aca-4d43-84c8-93d4f1631f52
2025-02-10 23:03:13,542 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 482ba087-4aca-4d43-84c8-93d4f1631f52)
2025-02-10 23:03:13,542 - [DEBUG] - app.services.course_service - get_students_in_course() - Fetching students in course ID: 482ba087-4aca-4d43-84c8-93d4f1631f52
2025-02-10 23:03:13,542 - [INFO] - app.services.course_service - get_students_in_course() - Retrieved 0 students for course ID: 482ba087-4aca-4d43-84c8-93d4f1631f52.
2025-02-10 23:03:13,605 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:13,605 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:13,621 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:13,621 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:14,248 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: be9b5a5c-39d5-45f1-a4f0-f141e9a1346c
2025-02-10 23:03:14,248 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: be9b5a5c-39d5-45f1-a4f0-f141e9a1346c)
2025-02-10 23:03:14,248 - [WARNING] - app.controllers.course_controller - create_course() - Unauthorized course creation attempt by user ID: be9b5a5c-39d5-45f1-a4f0-f141e9a1346c
2025-02-10 23:03:14,313 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:14,313 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:14,329 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:14,329 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:14,899 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6de63d0e-229e-4447-bf2f-ed1e716cc34a
2025-02-10 23:03:14,899 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 6de63d0e-229e-4447-bf2f-ed1e716cc34a)
2025-02-10 23:03:14,899 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: ad7b60fb-ed9b-4de0-894e-eda6075ce904
2025-02-10 23:03:14,899 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: ad7b60fb-ed9b-4de0-894e-eda6075ce904)
2025-02-10 23:03:14,899 - [DEBUG] - app.services.course_service - update_course() - Updating course ID: ad7b60fb-ed9b-4de0-894e-eda6075ce904 with new name: Updated Test Course
2025-02-10 23:03:14,900 - [INFO] - app.services.course_service - update_course() - Course ID: ad7b60fb-ed9b-4de0-894e-eda6075ce904 updated successfully.
2025-02-10 23:03:14,900 - [INFO] - app.controllers.course_controller - update_course() - Course updated successfully with ID: ad7b60fb-ed9b-4de0-894e-eda6075ce904
2025-02-10 23:03:14,900 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: ad7b60fb-ed9b-4de0-894e-eda6075ce904
2025-02-10 23:03:14,900 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'ad7b60fb-ed9b-4de0-894e-eda6075ce904', 'name': 'Updated Test Course', 'professor_id': '6de63d0e-229e-4447-bf2f-ed1e716cc34a', 'created_at': '2025-02-10T22:03:15', 'updated_at': '2025-02-10T22:03:15'}
2025-02-10 23:03:14,972 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:14,972 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:14,979 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:14,979 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:15,528 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 688d75c2-f452-41ff-acf7-18946d861e1d
2025-02-10 23:03:15,528 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 688d75c2-f452-41ff-acf7-18946d861e1d)
2025-02-10 23:03:15,528 - [WARNING] - app.controllers.course_controller - delete_course() - Unauthorized course deletion attempt by user ID: 688d75c2-f452-41ff-acf7-18946d861e1d
2025-02-10 23:03:15,607 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:15,607 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:15,607 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:15,607 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:16,171 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 752f1794-bcc0-44fc-bbf9-1e0ffac9ea48
2025-02-10 23:03:16,171 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 752f1794-bcc0-44fc-bbf9-1e0ffac9ea48)
2025-02-10 23:03:16,171 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: eb7e875d-910d-44d6-83c8-ffbf8cfe3f9b
2025-02-10 23:03:16,171 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: eb7e875d-910d-44d6-83c8-ffbf8cfe3f9b)
2025-02-10 23:03:16,171 - [DEBUG] - app.services.course_service - delete_course() - Deleting course ID: eb7e875d-910d-44d6-83c8-ffbf8cfe3f9b
2025-02-10 23:03:16,178 - [INFO] - app.services.course_service - delete_course() - Course ID: eb7e875d-910d-44d6-83c8-ffbf8cfe3f9b deleted successfully.
2025-02-10 23:03:16,178 - [INFO] - app.controllers.course_controller - delete_course() - Course deleted successfully with ID: eb7e875d-910d-44d6-83c8-ffbf8cfe3f9b
2025-02-10 23:03:16,240 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:16,240 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:16,256 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:16,256 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:16,810 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 680e5647-16fc-494f-a895-c90dbe3611a0
2025-02-10 23:03:16,811 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 680e5647-16fc-494f-a895-c90dbe3611a0)
2025-02-10 23:03:16,811 - [WARNING] - app.controllers.grade_controller - list_grades() - Unauthorized access attempt by user ID: 680e5647-16fc-494f-a895-c90dbe3611a0
2025-02-10 23:03:16,871 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:16,871 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:16,886 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:16,886 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:17,448 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ce965976-6745-4b58-8cdf-d280b76a363a
2025-02-10 23:03:17,448 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: ce965976-6745-4b58-8cdf-d280b76a363a)
2025-02-10 23:03:17,448 - [DEBUG] - app.services.grade_service - list_grades() - Retrieving all grades from the database.
2025-02-10 23:03:17,448 - [INFO] - app.services.grade_service - list_grades() - Retrieved 1 grades.
2025-02-10 23:03:17,448 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 25f8a303-7a47-43d3-90ad-2c96e40c8084
2025-02-10 23:03:17,448 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '25f8a303-7a47-43d3-90ad-2c96e40c8084', 'course_id': '0aa5c243-40d0-4c08-815b-969edc39ea07', 'student_id': '20af6963-66f9-4b88-8057-c5c7c26eadc4', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:03:17', 'updated_at': '2025-02-10T22:03:17'}
2025-02-10 23:03:17,526 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:17,526 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:17,526 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:17,526 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:18,084 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6268e24b-cb7d-4f0b-bb73-56091ce308a4
2025-02-10 23:03:18,084 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 6268e24b-cb7d-4f0b-bb73-56091ce308a4)
2025-02-10 23:03:18,084 - [WARNING] - app.controllers.grade_controller - assign_grade() - Missing required fields in grade assignment: {}
2025-02-10 23:03:18,146 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:18,146 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:18,162 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:18,162 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:18,732 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5b4ddbe0-b3af-4037-83f3-4d32e19e7aaa
2025-02-10 23:03:18,732 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 5b4ddbe0-b3af-4037-83f3-4d32e19e7aaa)
2025-02-10 23:03:18,732 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: c7fadc6b-39be-4527-b86d-9c60e33696f1
2025-02-10 23:03:18,732 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: c7fadc6b-39be-4527-b86d-9c60e33696f1)
2025-02-10 23:03:18,732 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: invalid_student_id
2025-02-10 23:03:18,747 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: invalid_student_id
2025-02-10 23:03:18,747 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=c7fadc6b-39be-4527-b86d-9c60e33696f1, student_id=invalid_student_id
2025-02-10 23:03:18,810 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:18,810 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:18,826 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:18,826 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:19,417 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b4573c83-0e7b-4307-8a6e-09500d66d900
2025-02-10 23:03:19,417 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: b4573c83-0e7b-4307-8a6e-09500d66d900)
2025-02-10 23:03:19,417 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: invalid_course_id
2025-02-10 23:03:19,417 - [DEBUG] - app.services.course_service - get_course_by_id() - No course found with ID: invalid_course_id
2025-02-10 23:03:19,417 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ff6d23cd-91dd-4aae-b4b9-5c13dcd643f6
2025-02-10 23:03:19,417 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: ff6d23cd-91dd-4aae-b4b9-5c13dcd643f6)
2025-02-10 23:03:19,417 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=invalid_course_id, student_id=ff6d23cd-91dd-4aae-b4b9-5c13dcd643f6
2025-02-10 23:03:19,495 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:19,495 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:19,495 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:19,505 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:20,059 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e8a803e9-ce37-4143-968b-e590bbf10878
2025-02-10 23:03:20,059 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: e8a803e9-ce37-4143-968b-e590bbf10878)
2025-02-10 23:03:20,059 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: d1244573-a14b-42d5-be19-d12f105c6ae0
2025-02-10 23:03:20,059 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: d1244573-a14b-42d5-be19-d12f105c6ae0)
2025-02-10 23:03:20,059 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: a125b66f-ac30-4f39-ab58-fa69b4610ba4
2025-02-10 23:03:20,059 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: a125b66f-ac30-4f39-ab58-fa69b4610ba4)
2025-02-10 23:03:20,059 - [DEBUG] - app.services.grade_service - assign_grade() - Assigning grade 90 to student a125b66f-ac30-4f39-ab58-fa69b4610ba4 for course d1244573-a14b-42d5-be19-d12f105c6ae0.
2025-02-10 23:03:20,059 - [INFO] - app.services.grade_service - assign_grade() - Grade assigned: 6ad95c71-c8a0-4e81-a1ca-dbcadb40a845, Value: 90.0
2025-02-10 23:03:20,059 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 6ad95c71-c8a0-4e81-a1ca-dbcadb40a845
2025-02-10 23:03:20,059 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '6ad95c71-c8a0-4e81-a1ca-dbcadb40a845', 'course_id': 'd1244573-a14b-42d5-be19-d12f105c6ae0', 'student_id': 'a125b66f-ac30-4f39-ab58-fa69b4610ba4', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:03:20', 'updated_at': '2025-02-10T22:03:20'}
2025-02-10 23:03:20,137 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:20,137 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:20,137 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:20,137 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:20,719 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4040426b-02d9-4aa8-a68a-737551e31a37
2025-02-10 23:03:20,719 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 4040426b-02d9-4aa8-a68a-737551e31a37)
2025-02-10 23:03:20,719 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 523c6e12-cdfd-4df1-947f-74a6f5acc7e1
2025-02-10 23:03:20,719 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 523c6e12-cdfd-4df1-947f-74a6f5acc7e1, Grade Value: 90.0
2025-02-10 23:03:20,719 - [WARNING] - app.controllers.grade_controller - get_grade() - Unauthorized grade access attempt by user ID: 4040426b-02d9-4aa8-a68a-737551e31a37
2025-02-10 23:03:20,802 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:20,802 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:20,802 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:20,802 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:21,382 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 01e623a7-7631-49db-9526-0c3add22a882
2025-02-10 23:03:21,382 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 01e623a7-7631-49db-9526-0c3add22a882)
2025-02-10 23:03:21,382 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 687de8e5-9721-4297-b21e-8efa5aa4081c
2025-02-10 23:03:21,382 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 687de8e5-9721-4297-b21e-8efa5aa4081c, Grade Value: 90.0
2025-02-10 23:03:21,382 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 687de8e5-9721-4297-b21e-8efa5aa4081c
2025-02-10 23:03:21,382 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '687de8e5-9721-4297-b21e-8efa5aa4081c', 'course_id': 'b25111a3-d979-4fe4-810d-bb43d26cec0f', 'student_id': 'a7fcf9ce-3f22-49ff-9805-32ab42e999a1', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:03:21', 'updated_at': '2025-02-10T22:03:21'}
2025-02-10 23:03:21,466 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:21,467 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:21,472 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:21,472 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:22,127 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 81ea5b36-7093-44fc-a26a-ae39ed84b4fd
2025-02-10 23:03:22,128 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 81ea5b36-7093-44fc-a26a-ae39ed84b4fd)
2025-02-10 23:03:22,128 - [WARNING] - app.controllers.grade_controller - update_grade() - Unauthorized grade update attempt by user ID: 81ea5b36-7093-44fc-a26a-ae39ed84b4fd
2025-02-10 23:03:22,201 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:22,206 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:22,206 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:22,206 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:22,878 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6652f6b0-7ac5-4a6d-95a8-406f1607dc94
2025-02-10 23:03:22,878 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 6652f6b0-7ac5-4a6d-95a8-406f1607dc94)
2025-02-10 23:03:22,878 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 517ea770-cf78-4a2c-9804-8aea46b6a65e
2025-02-10 23:03:22,878 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 517ea770-cf78-4a2c-9804-8aea46b6a65e, Grade Value: 90.0
2025-02-10 23:03:22,878 - [WARNING] - app.controllers.grade_controller - update_grade() - Missing grade value for update: {}
2025-02-10 23:03:22,950 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:22,955 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:22,955 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:22,955 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:23,559 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7b79bbae-a81a-4e2d-b7a2-b7184043db9b
2025-02-10 23:03:23,559 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 7b79bbae-a81a-4e2d-b7a2-b7184043db9b)
2025-02-10 23:03:23,559 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 1b2200c3-ced8-4959-af02-0b79443d6488
2025-02-10 23:03:23,559 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 1b2200c3-ced8-4959-af02-0b79443d6488, Grade Value: 90.0
2025-02-10 23:03:23,559 - [DEBUG] - app.services.grade_service - update_grade() - Updating grade ID: 1b2200c3-ced8-4959-af02-0b79443d6488 to new value: 95.
2025-02-10 23:03:23,566 - [INFO] - app.services.grade_service - update_grade() - Grade ID: 1b2200c3-ced8-4959-af02-0b79443d6488 updated to value: 95.
2025-02-10 23:03:23,566 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 1b2200c3-ced8-4959-af02-0b79443d6488
2025-02-10 23:03:23,566 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '1b2200c3-ced8-4959-af02-0b79443d6488', 'course_id': '2f144742-748b-4ded-b1d2-0fd1d3c67769', 'student_id': 'a11197e4-8f77-452f-8b09-2af4deefdf0b', 'grade': 95.0, 'name': 'DM', 'created_at': '2025-02-10T22:03:24', 'updated_at': '2025-02-10T22:03:24'}
2025-02-10 23:03:23,649 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:23,649 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:23,656 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:23,656 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:24,295 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 473b99ab-2317-408f-b1f1-ce80574bf802
2025-02-10 23:03:24,295 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 473b99ab-2317-408f-b1f1-ce80574bf802)
2025-02-10 23:03:24,295 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 9ddac428-b15e-4413-9003-d1a4cf036138
2025-02-10 23:03:24,295 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 9ddac428-b15e-4413-9003-d1a4cf036138)
2025-02-10 23:03:24,302 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0cf4b6dc-dfab-435b-8445-1c4e40552c87
2025-02-10 23:03:24,302 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 0cf4b6dc-dfab-435b-8445-1c4e40552c87)
2025-02-10 23:03:24,302 - [DEBUG] - app.services.grade_service - get_student_grades() - Fetching grades for student ID: 0cf4b6dc-dfab-435b-8445-1c4e40552c87 in course ID: 9ddac428-b15e-4413-9003-d1a4cf036138.
2025-02-10 23:03:24,302 - [INFO] - app.services.grade_service - get_student_grades() - Retrieved 1 grades for student ID: 0cf4b6dc-dfab-435b-8445-1c4e40552c87 in course ID: 9ddac428-b15e-4413-9003-d1a4cf036138.
2025-02-10 23:03:24,302 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: d3626293-21a1-41f3-ae6d-d7489bd985c8
2025-02-10 23:03:24,302 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'd3626293-21a1-41f3-ae6d-d7489bd985c8', 'course_id': '9ddac428-b15e-4413-9003-d1a4cf036138', 'student_id': '0cf4b6dc-dfab-435b-8445-1c4e40552c87', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:03:24', 'updated_at': '2025-02-10T22:03:24'}
2025-02-10 23:03:24,372 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:24,372 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:24,378 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:24,378 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:24,969 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 60b70c5b-b5ee-47e6-a101-2beb1f564851
2025-02-10 23:03:24,969 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 60b70c5b-b5ee-47e6-a101-2beb1f564851)
2025-02-10 23:03:24,969 - [WARNING] - app.controllers.grade_controller - delete_grade() - Unauthorized grade deletion attempt by user ID: 60b70c5b-b5ee-47e6-a101-2beb1f564851
2025-02-10 23:03:25,038 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:25,038 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:25,045 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:25,045 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:25,639 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: cb10fc3d-52fb-4f25-adc8-d53680c34fdd
2025-02-10 23:03:25,639 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: cb10fc3d-52fb-4f25-adc8-d53680c34fdd)
2025-02-10 23:03:25,639 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 09f930cb-6571-45d2-9af3-4a25729a45e4
2025-02-10 23:03:25,639 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 09f930cb-6571-45d2-9af3-4a25729a45e4, Grade Value: 90.0
2025-02-10 23:03:25,639 - [DEBUG] - app.services.grade_service - delete_grade() - Deleting grade ID: 09f930cb-6571-45d2-9af3-4a25729a45e4.
2025-02-10 23:03:25,645 - [INFO] - app.services.grade_service - delete_grade() - Grade ID: 09f930cb-6571-45d2-9af3-4a25729a45e4 deleted successfully.
2025-02-10 23:03:25,709 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:25,709 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:25,725 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:25,725 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:26,399 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8e3e3756-b96b-4ad9-a086-aec0a6c53734
2025-02-10 23:03:26,399 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 8e3e3756-b96b-4ad9-a086-aec0a6c53734)
2025-02-10 23:03:26,399 - [DEBUG] - app.services.user_service - get_all_users() - Fetching all users from the database.
2025-02-10 23:03:26,399 - [INFO] - app.services.user_service - get_all_users() - Fetched 3 users from the database.
2025-02-10 23:03:26,399 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '2b0b5ede-7938-4bc5-b607-9b361b12bd36', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:03:26', 'updated_at': '2025-02-10T22:03:26', 'courses_enrolled': []}
2025-02-10 23:03:26,399 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '8e3e3756-b96b-4ad9-a086-aec0a6c53734', 'name': 'admin', 'email': 'admin@example.com', 'role': 'Administrator', 'created_at': '2025-02-10T22:03:26', 'updated_at': '2025-02-10T22:03:26', 'courses_enrolled': []}
2025-02-10 23:03:26,399 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'd06cf3e9-a1cf-444c-b95d-65e9a998a5b7', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-10T22:03:26', 'updated_at': '2025-02-10T22:03:26', 'courses_enrolled': []}
2025-02-10 23:03:26,477 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:26,477 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:26,477 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:26,477 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:27,048 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 26b40d31-f65f-40b2-a872-61c9b7ba460c
2025-02-10 23:03:27,048 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 26b40d31-f65f-40b2-a872-61c9b7ba460c)
2025-02-10 23:03:27,048 - [WARNING] - app.controllers.user_controller - list_users() - Unauthorized access attempt by user ID: 26b40d31-f65f-40b2-a872-61c9b7ba460c
2025-02-10 23:03:27,131 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:27,131 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:27,131 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:27,131 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:27,715 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 656c5679-68db-4c90-b9c8-1e3754617716
2025-02-10 23:03:27,715 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 656c5679-68db-4c90-b9c8-1e3754617716)
2025-02-10 23:03:27,715 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 9df6c1e4-3668-4c96-8ef2-a8178170dbea
2025-02-10 23:03:27,715 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 9df6c1e4-3668-4c96-8ef2-a8178170dbea)
2025-02-10 23:03:27,715 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '9df6c1e4-3668-4c96-8ef2-a8178170dbea', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:03:28', 'updated_at': '2025-02-10T22:03:28', 'courses_enrolled': []}
2025-02-10 23:03:27,794 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:27,794 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:27,794 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:27,794 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:28,364 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 412254d0-9db3-44ca-a52e-0d7e75387b8f
2025-02-10 23:03:28,364 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 412254d0-9db3-44ca-a52e-0d7e75387b8f)
2025-02-10 23:03:28,364 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 412254d0-9db3-44ca-a52e-0d7e75387b8f
2025-02-10 23:03:28,364 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 412254d0-9db3-44ca-a52e-0d7e75387b8f)
2025-02-10 23:03:28,364 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '412254d0-9db3-44ca-a52e-0d7e75387b8f', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-10T22:03:28', 'updated_at': '2025-02-10T22:03:28', 'courses_enrolled': []}
2025-02-10 23:03:28,447 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:28,447 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:28,447 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:28,447 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:29,051 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8988aa8c-a897-4529-bde7-319e99a95eec
2025-02-10 23:03:29,051 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 8988aa8c-a897-4529-bde7-319e99a95eec)
2025-02-10 23:03:29,051 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: nonexistent-user-id
2025-02-10 23:03:29,058 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: nonexistent-user-id
2025-02-10 23:03:29,058 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID nonexistent-user-id
2025-02-10 23:03:29,127 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:29,134 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:29,134 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:29,134 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:29,781 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 89ad40a5-5bb6-4265-b293-16b4619123af
2025-02-10 23:03:29,781 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 89ad40a5-5bb6-4265-b293-16b4619123af)
2025-02-10 23:03:29,781 - [DEBUG] - app.services.user_service - search_users() - Searching users with query: student
2025-02-10 23:03:29,797 - [INFO] - app.services.user_service - search_users() - Found 1 users matching query 'student'.
2025-02-10 23:03:29,797 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '41732d29-37c2-4951-b51b-e9ad5af470a7', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:03:30', 'updated_at': '2025-02-10T22:03:30', 'courses_enrolled': []}
2025-02-10 23:03:29,872 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:29,872 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:29,879 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:29,880 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:30,444 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2cea03bf-8ec4-49ef-8396-58fadad9e911
2025-02-10 23:03:30,444 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 2cea03bf-8ec4-49ef-8396-58fadad9e911)
2025-02-10 23:03:30,444 - [WARNING] - app.controllers.user_controller - search_users() - Unauthorized access attempt by user ID: 2cea03bf-8ec4-49ef-8396-58fadad9e911
2025-02-10 23:03:30,522 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:30,522 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:30,522 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:30,522 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:31,101 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 36f0ea6b-4754-48a5-b06a-a5552459462a
2025-02-10 23:03:31,101 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 36f0ea6b-4754-48a5-b06a-a5552459462a)
2025-02-10 23:03:31,101 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Missing fields.
2025-02-10 23:03:31,183 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:31,183 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:31,183 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:31,183 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:31,780 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 27585b60-55b3-4f8f-b5de-7c1823574fcd
2025-02-10 23:03:31,780 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 27585b60-55b3-4f8f-b5de-7c1823574fcd)
2025-02-10 23:03:31,780 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Invalid role 'Administrator'.
2025-02-10 23:03:31,849 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:31,849 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:31,856 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:31,856 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:32,436 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ab746898-2407-4ff7-ad20-e7fe4fb024f8
2025-02-10 23:03:32,436 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: ab746898-2407-4ff7-ad20-e7fe4fb024f8)
2025-02-10 23:03:32,436 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newstudent@example.com
2025-02-10 23:03:32,436 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newstudent@example.com
2025-02-10 23:03:32,436 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Student, Email: newstudent@example.com, Role: Student
2025-02-10 23:03:32,571 - [INFO] - app.services.user_service - create_user() - User created with ID: 743a2f21-36a6-470a-8ff8-7dec16e54010
2025-02-10 23:03:32,571 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 743a2f21-36a6-470a-8ff8-7dec16e54010
2025-02-10 23:03:32,571 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: 743a2f21-36a6-470a-8ff8-7dec16e54010)
2025-02-10 23:03:32,571 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '743a2f21-36a6-470a-8ff8-7dec16e54010', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:03:33', 'updated_at': '2025-02-10T22:03:33', 'courses_enrolled': []}
2025-02-10 23:03:32,571 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ab746898-2407-4ff7-ad20-e7fe4fb024f8
2025-02-10 23:03:32,571 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: ab746898-2407-4ff7-ad20-e7fe4fb024f8)
2025-02-10 23:03:32,571 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 743a2f21-36a6-470a-8ff8-7dec16e54010
2025-02-10 23:03:32,578 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: 743a2f21-36a6-470a-8ff8-7dec16e54010)
2025-02-10 23:03:32,578 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '743a2f21-36a6-470a-8ff8-7dec16e54010', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:03:33', 'updated_at': '2025-02-10T22:03:33', 'courses_enrolled': []}
2025-02-10 23:03:32,641 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:32,655 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:32,655 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:32,655 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:33,233 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 409a0f17-8f20-47ee-9943-3e58bc893ebc
2025-02-10 23:03:33,233 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 409a0f17-8f20-47ee-9943-3e58bc893ebc)
2025-02-10 23:03:33,233 - [WARNING] - app.controllers.user_controller - update_user() - Unauthorized access attempt by user ID: 409a0f17-8f20-47ee-9943-3e58bc893ebc
2025-02-10 23:03:33,307 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:33,307 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:33,307 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:33,307 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:33,893 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8d4fdc64-445f-4452-9092-f1b3f64c5ffe
2025-02-10 23:03:33,893 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 8d4fdc64-445f-4452-9092-f1b3f64c5ffe)
2025-02-10 23:03:33,893 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8d4fdc64-445f-4452-9092-f1b3f64c5ffe
2025-02-10 23:03:33,898 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 8d4fdc64-445f-4452-9092-f1b3f64c5ffe)
2025-02-10 23:03:33,898 - [DEBUG] - app.services.user_service - update_user() - Updating user ID: 8d4fdc64-445f-4452-9092-f1b3f64c5ffe with Name: Updated Professor Name, Email: unchanged
2025-02-10 23:03:33,908 - [INFO] - app.services.user_service - update_user() - User ID: 8d4fdc64-445f-4452-9092-f1b3f64c5ffe updated successfully.
2025-02-10 23:03:33,908 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8d4fdc64-445f-4452-9092-f1b3f64c5ffe
2025-02-10 23:03:33,908 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Updated Professor Name (ID: 8d4fdc64-445f-4452-9092-f1b3f64c5ffe)
2025-02-10 23:03:33,908 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '8d4fdc64-445f-4452-9092-f1b3f64c5ffe', 'name': 'Updated Professor Name', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-10T22:03:34', 'updated_at': '2025-02-10T22:03:34', 'courses_enrolled': []}
2025-02-10 23:03:33,982 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:03:33,983 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:03:33,988 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:03:33,988 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:03:34,596 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0a5b5a9e-6476-45f0-8958-76f62ec68fe6
2025-02-10 23:03:34,596 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 0a5b5a9e-6476-45f0-8958-76f62ec68fe6)
2025-02-10 23:03:34,596 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: tempstudent@example.com
2025-02-10 23:03:34,599 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: tempstudent@example.com
2025-02-10 23:03:34,599 - [DEBUG] - app.services.user_service - create_user() - Creating user: Temp Student, Email: tempstudent@example.com, Role: Student
2025-02-10 23:03:34,724 - [INFO] - app.services.user_service - create_user() - User created with ID: 86613099-9d55-4fe3-a931-c3674f640ebf
2025-02-10 23:03:34,724 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 86613099-9d55-4fe3-a931-c3674f640ebf
2025-02-10 23:03:34,724 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: 86613099-9d55-4fe3-a931-c3674f640ebf)
2025-02-10 23:03:34,724 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '86613099-9d55-4fe3-a931-c3674f640ebf', 'name': 'Temp Student', 'email': 'tempstudent@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:03:35', 'updated_at': '2025-02-10T22:03:35', 'courses_enrolled': []}
2025-02-10 23:03:34,724 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0a5b5a9e-6476-45f0-8958-76f62ec68fe6
2025-02-10 23:03:34,724 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 0a5b5a9e-6476-45f0-8958-76f62ec68fe6)
2025-02-10 23:03:34,724 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 86613099-9d55-4fe3-a931-c3674f640ebf
2025-02-10 23:03:34,738 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: 86613099-9d55-4fe3-a931-c3674f640ebf)
2025-02-10 23:03:34,738 - [DEBUG] - app.services.user_service - delete_user() - Deleting user ID: 86613099-9d55-4fe3-a931-c3674f640ebf
2025-02-10 23:03:34,738 - [INFO] - app.services.user_service - delete_user() - User ID: 86613099-9d55-4fe3-a931-c3674f640ebf deleted successfully.
2025-02-10 23:03:34,738 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0a5b5a9e-6476-45f0-8958-76f62ec68fe6
2025-02-10 23:03:34,738 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 0a5b5a9e-6476-45f0-8958-76f62ec68fe6)
2025-02-10 23:03:34,738 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 86613099-9d55-4fe3-a931-c3674f640ebf
2025-02-10 23:03:34,738 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: 86613099-9d55-4fe3-a931-c3674f640ebf
2025-02-10 23:03:34,738 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID 86613099-9d55-4fe3-a931-c3674f640ebf
2025-02-10 23:10:36,326 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:36,360 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:36,374 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:36,374 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:36,384 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-10 23:10:36,387 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-10 23:10:36,389 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-10 23:10:36,391 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-10 23:10:36,968 - [WARNING] - app.controllers.auth_controller - register() - Missing fields: ['role']
2025-02-10 23:10:37,057 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:37,058 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:37,060 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:37,060 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:37,588 - [WARNING] - app.controllers.auth_controller - register() - Invalid email format during registration.
2025-02-10 23:10:37,667 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:37,667 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:37,667 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:37,667 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:38,241 - [WARNING] - app.controllers.auth_controller - register() - Password requirements not met during registration.
2025-02-10 23:10:38,307 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:38,307 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:38,307 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:38,307 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:38,847 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4835dbd7-35f1-4076-bfa5-010e2bd8f724
2025-02-10 23:10:38,847 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 4835dbd7-35f1-4076-bfa5-010e2bd8f724)
2025-02-10 23:10:38,847 - [WARNING] - app.controllers.auth_controller - register() - Unauthorized registration attempt by user ID: 4835dbd7-35f1-4076-bfa5-010e2bd8f724
2025-02-10 23:10:38,910 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:38,910 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:38,925 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:38,925 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:39,468 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 902f6eb8-b986-47ed-b948-51f03707eed5
2025-02-10 23:10:39,468 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 902f6eb8-b986-47ed-b948-51f03707eed5)
2025-02-10 23:10:39,468 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newprofadmin@example.com
2025-02-10 23:10:39,468 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newprofadmin@example.com
2025-02-10 23:10:39,468 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Professor Admin, Email: newprofadmin@example.com, Role: Professor
2025-02-10 23:10:39,593 - [INFO] - app.services.user_service - create_user() - User created with ID: 495f4144-724b-4fc3-aab8-cee01b2ed47f
2025-02-10 23:10:39,593 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: 495f4144-724b-4fc3-aab8-cee01b2ed47f
2025-02-10 23:10:39,667 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:39,683 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:39,683 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:39,683 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:40,256 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4233f05a-13c2-456c-b83c-ae48d4b509de
2025-02-10 23:10:40,256 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 4233f05a-13c2-456c-b83c-ae48d4b509de)
2025-02-10 23:10:40,256 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-10 23:10:40,256 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: conflict@example.com
2025-02-10 23:10:40,256 - [DEBUG] - app.services.user_service - create_user() - Creating user: Conflict User, Email: conflict@example.com, Role: Student
2025-02-10 23:10:40,381 - [INFO] - app.services.user_service - create_user() - User created with ID: ab155e11-bdd6-4109-8339-105f09fe1e5c
2025-02-10 23:10:40,381 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: ab155e11-bdd6-4109-8339-105f09fe1e5c
2025-02-10 23:10:40,381 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4233f05a-13c2-456c-b83c-ae48d4b509de
2025-02-10 23:10:40,397 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 4233f05a-13c2-456c-b83c-ae48d4b509de)
2025-02-10 23:10:40,397 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-10 23:10:40,397 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: conflict@example.com
2025-02-10 23:10:40,397 - [DEBUG] - app.services.user_service - create_user() - Creating user: Conflict User, Email: conflict@example.com, Role: Student
2025-02-10 23:10:40,506 - [ERROR] - app.controllers.auth_controller - register() - Unexpected registration error: (MySQLdb.IntegrityError) (1062, "Duplicate entry 'a0c1ddfe7e7304d29b39ff274316bf038271f531da2e263d292da39c751d7e52' for key 'users.email_hash'")
[SQL: INSERT INTO users (id, name, email, email_hash, password_hash, `role`, created_at, updated_at) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)]
[parameters: ('f7f0352b-949c-4bb2-9090-9dcbdb5a15d5', b'gAAAAABnqnlgZAF-Jd01YBVEwM4lS_z23lWIvz4CfXaZblQEmN0n_I3LCyzw_2nwdxs2hV3SST-x6EFm-4OMhliYQsjDDHdm5w==', b'gAAAAABnqnlg8Nm-qDrfV63g7ym_Xucdrkl7gmyGd_oNQ6HL_gx4G68OVCSto6jvzj-CFc6sZo7KqldVU7rf6Cp7x6hpy2_HEyqr9cGiAEUIkpHfC0FaBxw=', 'a0c1ddfe7e7304d29b39ff274316bf038271f531da2e263d292da39c751d7e52', 'scrypt:32768:8:1$wT8hPa8cv82gBaUY$f9f0ebfc6c7788db981a2081483dbb84fffc6401e809479f4479970db03acddf0b2b3da469c2b70be70fa3e6b7f07e8298ec0492056b2a0349773de39d37c5cc', 'Student', datetime.datetime(2025, 2, 10, 22, 10, 40, 506667, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 2, 10, 22, 10, 40, 506667, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
Traceback (most recent call last):
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
MySQLdb.IntegrityError: (1062, "Duplicate entry 'a0c1ddfe7e7304d29b39ff274316bf038271f531da2e263d292da39c751d7e52' for key 'users.email_hash'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\cbonn\Downloads\FlaskApp\app\controllers\auth_controller.py", line 83, in register
    user = self.user_service.create_user(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\app\services\user_service.py", line 109, in create_user
    db.session.commit()
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\scoping.py", line 599, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2032, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1313, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1288, in _prepare_impl
    self.session.flush()
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4353, in flush
    self._flush(objects)
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4488, in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4449, in _flush
    flush_context.execute()
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 93, in save_obj
    _emit_insert_statements(
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 1233, in _emit_insert_statements
    result = connection.execute(
             ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\Users\cbonn\Downloads\FlaskApp\venv\Lib\site-packages\MySQLdb\connections.py", line 280, in query
    _mysql.connection.query(self, query)
sqlalchemy.exc.IntegrityError: (MySQLdb.IntegrityError) (1062, "Duplicate entry 'a0c1ddfe7e7304d29b39ff274316bf038271f531da2e263d292da39c751d7e52' for key 'users.email_hash'")
[SQL: INSERT INTO users (id, name, email, email_hash, password_hash, `role`, created_at, updated_at) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)]
[parameters: ('f7f0352b-949c-4bb2-9090-9dcbdb5a15d5', b'gAAAAABnqnlgZAF-Jd01YBVEwM4lS_z23lWIvz4CfXaZblQEmN0n_I3LCyzw_2nwdxs2hV3SST-x6EFm-4OMhliYQsjDDHdm5w==', b'gAAAAABnqnlg8Nm-qDrfV63g7ym_Xucdrkl7gmyGd_oNQ6HL_gx4G68OVCSto6jvzj-CFc6sZo7KqldVU7rf6Cp7x6hpy2_HEyqr9cGiAEUIkpHfC0FaBxw=', 'a0c1ddfe7e7304d29b39ff274316bf038271f531da2e263d292da39c751d7e52', 'scrypt:32768:8:1$wT8hPa8cv82gBaUY$f9f0ebfc6c7788db981a2081483dbb84fffc6401e809479f4479970db03acddf0b2b3da469c2b70be70fa3e6b7f07e8298ec0492056b2a0349773de39d37c5cc', 'Student', datetime.datetime(2025, 2, 10, 22, 10, 40, 506667, tzinfo=datetime.timezone.utc), datetime.datetime(2025, 2, 10, 22, 10, 40, 506667, tzinfo=datetime.timezone.utc))]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-02-10 23:10:40,743 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:40,743 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:40,743 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:40,743 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:41,296 - [WARNING] - app.controllers.auth_controller - login() - Login failed: Missing credentials.
2025-02-10 23:10:41,391 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:41,391 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:41,391 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:41,391 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:41,918 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: doesnotexist@example.com
2025-02-10 23:10:41,918 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: doesnotexist@example.com
2025-02-10 23:10:41,918 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: doesnotexist@example.com
2025-02-10 23:10:41,918 - [WARNING] - app.services.auth_service - authenticate_user() - No user found with email: doesnotexist@example.com
2025-02-10 23:10:41,918 - [WARNING] - app.controllers.auth_controller - login() - Invalid credentials during login.
2025-02-10 23:10:41,995 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:41,995 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:41,995 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:41,995 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:42,539 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-10 23:10:42,539 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:10:42,539 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: student@example.com
2025-02-10 23:10:42,539 - [WARNING] - app.services.auth_service - authenticate_user() - No user found with email: student@example.com
2025-02-10 23:10:42,539 - [WARNING] - app.controllers.auth_controller - login() - Invalid credentials during login.
2025-02-10 23:10:42,618 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:42,618 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:42,618 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:42,618 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:43,176 - [WARNING] - app.controllers.auth_controller - change_password() - Change password failed: Missing required fields.
2025-02-10 23:10:43,236 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:43,236 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:43,251 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:43,251 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:43,796 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:10:43,796 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: student@example.com
2025-02-10 23:10:43,796 - [WARNING] - app.controllers.auth_controller - change_password() - User not found for password change.
2025-02-10 23:10:43,874 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:43,874 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:43,890 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:43,890 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:44,417 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:10:44,417 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: student@example.com
2025-02-10 23:10:44,417 - [WARNING] - app.controllers.auth_controller - change_password() - User not found for password change.
2025-02-10 23:10:44,499 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:44,499 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:44,499 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:44,499 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:45,073 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:10:45,073 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: student@example.com
2025-02-10 23:10:45,073 - [WARNING] - app.controllers.auth_controller - change_password() - User not found for password change.
2025-02-10 23:10:45,152 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:45,152 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:45,152 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:45,152 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:45,679 - [INFO] - app.controllers.course_controller - list_courses() - Listing courses - Page: 1, Per Page: 10
2025-02-10 23:10:45,679 - [DEBUG] - app.services.course_service - get_all_courses_paginated() - Fetching courses - Page: 1, Per Page: 10
2025-02-10 23:10:45,695 - [INFO] - app.services.course_service - get_all_courses_paginated() - Retrieved 1 courses on page 1.
2025-02-10 23:10:45,695 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 53e2f130-eab3-4412-83d5-1779d77808ec
2025-02-10 23:10:45,695 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '53e2f130-eab3-4412-83d5-1779d77808ec', 'name': 'Test Course', 'professor_id': '17cc3341-2432-499f-b7f2-1d702ebee44e', 'created_at': '2025-02-10T22:10:46', 'updated_at': '2025-02-10T22:10:46'}
2025-02-10 23:10:45,748 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:45,748 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:45,763 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:45,763 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:46,308 - [INFO] - app.controllers.course_controller - get_course() - Retrieving course with ID: 9b8e7794-44dc-440c-8f39-e05a572beff5
2025-02-10 23:10:46,308 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 9b8e7794-44dc-440c-8f39-e05a572beff5
2025-02-10 23:10:46,308 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 9b8e7794-44dc-440c-8f39-e05a572beff5)
2025-02-10 23:10:46,308 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 9b8e7794-44dc-440c-8f39-e05a572beff5
2025-02-10 23:10:46,308 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '9b8e7794-44dc-440c-8f39-e05a572beff5', 'name': 'Test Course', 'professor_id': 'a1d9b7b1-6c65-4475-b8de-a4bde61100ef', 'created_at': '2025-02-10T22:10:46', 'updated_at': '2025-02-10T22:10:46'}
2025-02-10 23:10:46,374 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:46,374 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:46,374 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:46,374 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:46,931 - [INFO] - app.controllers.course_controller - search_courses() - Searching courses with query: 'Test'
2025-02-10 23:10:46,931 - [DEBUG] - app.services.course_service - search_courses_by_name() - Searching courses with name containing: Test
2025-02-10 23:10:46,931 - [INFO] - app.services.course_service - search_courses_by_name() - Found 1 courses matching query 'Test'.
2025-02-10 23:10:46,931 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 505a2321-df1f-41b5-9cf6-a0b48e736a3a
2025-02-10 23:10:46,931 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '505a2321-df1f-41b5-9cf6-a0b48e736a3a', 'name': 'Test Course', 'professor_id': 'ebd3ea6d-16a0-4a6e-adb0-d3a9da63efb0', 'created_at': '2025-02-10T22:10:47', 'updated_at': '2025-02-10T22:10:47'}
2025-02-10 23:10:46,999 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:46,999 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:47,014 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:47,014 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:47,528 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6ae05cdd-ea60-408b-8adf-7eb591755ddc
2025-02-10 23:10:47,528 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 6ae05cdd-ea60-408b-8adf-7eb591755ddc)
2025-02-10 23:10:47,528 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 5a83c916-2fa0-4d72-a2af-5f425bf44717
2025-02-10 23:10:47,528 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 5a83c916-2fa0-4d72-a2af-5f425bf44717)
2025-02-10 23:10:47,528 - [DEBUG] - app.services.course_service - get_students_in_course() - Fetching students in course ID: 5a83c916-2fa0-4d72-a2af-5f425bf44717
2025-02-10 23:10:47,528 - [INFO] - app.services.course_service - get_students_in_course() - Retrieved 0 students for course ID: 5a83c916-2fa0-4d72-a2af-5f425bf44717.
2025-02-10 23:10:47,610 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:47,610 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:47,610 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:47,610 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:48,190 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: de64ad73-d813-49c1-9e42-39aaa61f3e9d
2025-02-10 23:10:48,190 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: de64ad73-d813-49c1-9e42-39aaa61f3e9d)
2025-02-10 23:10:48,190 - [WARNING] - app.controllers.course_controller - create_course() - Unauthorized course creation attempt by user ID: de64ad73-d813-49c1-9e42-39aaa61f3e9d
2025-02-10 23:10:48,257 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:48,257 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:48,257 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:48,257 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:48,828 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 31b926a1-a2d0-4d77-baa2-6227b0411127
2025-02-10 23:10:48,828 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 31b926a1-a2d0-4d77-baa2-6227b0411127)
2025-02-10 23:10:48,828 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 0a0d526a-fa1a-4946-9086-52479e963888
2025-02-10 23:10:48,828 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 0a0d526a-fa1a-4946-9086-52479e963888)
2025-02-10 23:10:48,828 - [DEBUG] - app.services.course_service - update_course() - Updating course ID: 0a0d526a-fa1a-4946-9086-52479e963888 with new name: Updated Test Course
2025-02-10 23:10:48,828 - [INFO] - app.services.course_service - update_course() - Course ID: 0a0d526a-fa1a-4946-9086-52479e963888 updated successfully.
2025-02-10 23:10:48,828 - [INFO] - app.controllers.course_controller - update_course() - Course updated successfully with ID: 0a0d526a-fa1a-4946-9086-52479e963888
2025-02-10 23:10:48,828 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 0a0d526a-fa1a-4946-9086-52479e963888
2025-02-10 23:10:48,828 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '0a0d526a-fa1a-4946-9086-52479e963888', 'name': 'Updated Test Course', 'professor_id': '31b926a1-a2d0-4d77-baa2-6227b0411127', 'created_at': '2025-02-10T22:10:49', 'updated_at': '2025-02-10T22:10:49'}
2025-02-10 23:10:48,909 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:48,909 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:48,909 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:48,909 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:49,450 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 13058884-fdde-43e2-9897-6ba2ace74497
2025-02-10 23:10:49,450 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 13058884-fdde-43e2-9897-6ba2ace74497)
2025-02-10 23:10:49,450 - [WARNING] - app.controllers.course_controller - delete_course() - Unauthorized course deletion attempt by user ID: 13058884-fdde-43e2-9897-6ba2ace74497
2025-02-10 23:10:49,513 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:49,513 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:49,529 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:49,529 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:50,102 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 1c6fed66-7662-4552-ba41-a4576ea6d000
2025-02-10 23:10:50,102 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 1c6fed66-7662-4552-ba41-a4576ea6d000)
2025-02-10 23:10:50,102 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 2e973243-fbd4-4e41-87c2-3c30d6bf425a
2025-02-10 23:10:50,102 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 2e973243-fbd4-4e41-87c2-3c30d6bf425a)
2025-02-10 23:10:50,102 - [DEBUG] - app.services.course_service - delete_course() - Deleting course ID: 2e973243-fbd4-4e41-87c2-3c30d6bf425a
2025-02-10 23:10:50,118 - [INFO] - app.services.course_service - delete_course() - Course ID: 2e973243-fbd4-4e41-87c2-3c30d6bf425a deleted successfully.
2025-02-10 23:10:50,118 - [INFO] - app.controllers.course_controller - delete_course() - Course deleted successfully with ID: 2e973243-fbd4-4e41-87c2-3c30d6bf425a
2025-02-10 23:10:50,193 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:50,193 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:50,193 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:50,193 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:50,739 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 93cdbb34-57d1-42e4-94b4-0447397403d9
2025-02-10 23:10:50,739 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 93cdbb34-57d1-42e4-94b4-0447397403d9)
2025-02-10 23:10:50,739 - [WARNING] - app.controllers.grade_controller - list_grades() - Unauthorized access attempt by user ID: 93cdbb34-57d1-42e4-94b4-0447397403d9
2025-02-10 23:10:50,821 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:50,821 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:50,825 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:50,825 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:51,371 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: dc648b44-92c9-44df-96e2-a4bc97cd45c6
2025-02-10 23:10:51,371 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: dc648b44-92c9-44df-96e2-a4bc97cd45c6)
2025-02-10 23:10:51,371 - [DEBUG] - app.services.grade_service - list_grades() - Retrieving all grades from the database.
2025-02-10 23:10:51,371 - [INFO] - app.services.grade_service - list_grades() - Retrieved 1 grades.
2025-02-10 23:10:51,371 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 24f5641c-2ede-4e44-bae5-fededf460931
2025-02-10 23:10:51,371 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '24f5641c-2ede-4e44-bae5-fededf460931', 'course_id': 'fcb6075b-25f4-4c94-b1e9-623dffa2d9a5', 'student_id': '84a697c5-4e39-4b60-bcae-9d329eb31c72', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:10:51', 'updated_at': '2025-02-10T22:10:51'}
2025-02-10 23:10:51,436 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:51,436 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:51,451 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:51,451 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:51,993 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2e3976c7-2121-4ceb-a469-874ec5a0bdcc
2025-02-10 23:10:51,993 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 2e3976c7-2121-4ceb-a469-874ec5a0bdcc)
2025-02-10 23:10:51,993 - [WARNING] - app.controllers.grade_controller - assign_grade() - Missing required fields in grade assignment: {}
2025-02-10 23:10:52,074 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:52,074 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:52,074 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:52,074 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:52,672 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3441c0de-21eb-4320-8793-da85fdeb7968
2025-02-10 23:10:52,673 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 3441c0de-21eb-4320-8793-da85fdeb7968)
2025-02-10 23:10:52,673 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 44e617f1-8b80-4326-97db-7accfb69c4c5
2025-02-10 23:10:52,673 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 44e617f1-8b80-4326-97db-7accfb69c4c5)
2025-02-10 23:10:52,673 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: invalid_student_id
2025-02-10 23:10:52,678 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: invalid_student_id
2025-02-10 23:10:52,678 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=44e617f1-8b80-4326-97db-7accfb69c4c5, student_id=invalid_student_id
2025-02-10 23:10:52,746 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:52,746 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:52,753 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:52,753 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:53,326 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: f39bce6b-ce58-402d-a500-fa74af188960
2025-02-10 23:10:53,326 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: f39bce6b-ce58-402d-a500-fa74af188960)
2025-02-10 23:10:53,326 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: invalid_course_id
2025-02-10 23:10:53,329 - [DEBUG] - app.services.course_service - get_course_by_id() - No course found with ID: invalid_course_id
2025-02-10 23:10:53,329 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 03f021ce-f5a4-44ff-9b8b-5ca440b597ac
2025-02-10 23:10:53,329 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 03f021ce-f5a4-44ff-9b8b-5ca440b597ac)
2025-02-10 23:10:53,329 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=invalid_course_id, student_id=03f021ce-f5a4-44ff-9b8b-5ca440b597ac
2025-02-10 23:10:53,396 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:53,397 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:53,400 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:53,400 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:53,962 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3cf3b229-d0a8-498d-8367-82a14706396b
2025-02-10 23:10:53,962 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 3cf3b229-d0a8-498d-8367-82a14706396b)
2025-02-10 23:10:53,962 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: cb702b34-06ac-4940-bc01-91835a44c01e
2025-02-10 23:10:53,963 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: cb702b34-06ac-4940-bc01-91835a44c01e)
2025-02-10 23:10:53,963 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 1b49b8a7-46d9-4bcc-8813-20b488f638ca
2025-02-10 23:10:53,963 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 1b49b8a7-46d9-4bcc-8813-20b488f638ca)
2025-02-10 23:10:53,963 - [DEBUG] - app.services.grade_service - assign_grade() - Assigning grade 90 to student 1b49b8a7-46d9-4bcc-8813-20b488f638ca for course cb702b34-06ac-4940-bc01-91835a44c01e.
2025-02-10 23:10:53,969 - [INFO] - app.services.grade_service - assign_grade() - Grade assigned: 486ece26-7013-49fa-a32a-a48b6620b6ca, Value: 90.0
2025-02-10 23:10:53,969 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 486ece26-7013-49fa-a32a-a48b6620b6ca
2025-02-10 23:10:53,969 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '486ece26-7013-49fa-a32a-a48b6620b6ca', 'course_id': 'cb702b34-06ac-4940-bc01-91835a44c01e', 'student_id': '1b49b8a7-46d9-4bcc-8813-20b488f638ca', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:10:54', 'updated_at': '2025-02-10T22:10:54'}
2025-02-10 23:10:54,037 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:54,038 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:54,042 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:54,042 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:54,618 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: f91ebbb2-bf6f-460b-927c-c3d95520a2c6
2025-02-10 23:10:54,619 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: f91ebbb2-bf6f-460b-927c-c3d95520a2c6)
2025-02-10 23:10:54,619 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: d7789599-ac05-4be9-8d94-46531fe14615
2025-02-10 23:10:54,619 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: d7789599-ac05-4be9-8d94-46531fe14615, Grade Value: 90.0
2025-02-10 23:10:54,619 - [WARNING] - app.controllers.grade_controller - get_grade() - Unauthorized grade access attempt by user ID: f91ebbb2-bf6f-460b-927c-c3d95520a2c6
2025-02-10 23:10:54,709 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:54,710 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:54,713 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:54,713 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:55,273 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 655037d4-25a9-44ca-8170-9a2c17c4cd6e
2025-02-10 23:10:55,273 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 655037d4-25a9-44ca-8170-9a2c17c4cd6e)
2025-02-10 23:10:55,273 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 2b5ae207-7de7-47be-a007-cad78a54113d
2025-02-10 23:10:55,273 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 2b5ae207-7de7-47be-a007-cad78a54113d, Grade Value: 90.0
2025-02-10 23:10:55,273 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 2b5ae207-7de7-47be-a007-cad78a54113d
2025-02-10 23:10:55,273 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '2b5ae207-7de7-47be-a007-cad78a54113d', 'course_id': '690015b3-a966-4b6f-9a73-2fef90093b7e', 'student_id': '8f865d34-2809-4a90-a9a7-a47847ece004', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:10:55', 'updated_at': '2025-02-10T22:10:55'}
2025-02-10 23:10:55,358 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:55,358 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:55,372 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:55,372 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:55,955 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8579de22-ce4c-4129-bd84-5521a811d8cb
2025-02-10 23:10:55,955 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 8579de22-ce4c-4129-bd84-5521a811d8cb)
2025-02-10 23:10:55,955 - [WARNING] - app.controllers.grade_controller - update_grade() - Unauthorized grade update attempt by user ID: 8579de22-ce4c-4129-bd84-5521a811d8cb
2025-02-10 23:10:56,038 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:56,039 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:56,039 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:56,039 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:56,595 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b834967e-1389-468b-b3c4-98e243a99f05
2025-02-10 23:10:56,595 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: b834967e-1389-468b-b3c4-98e243a99f05)
2025-02-10 23:10:56,595 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: b9e88621-7c82-43d0-9a92-27707038257b
2025-02-10 23:10:56,595 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: b9e88621-7c82-43d0-9a92-27707038257b, Grade Value: 90.0
2025-02-10 23:10:56,595 - [WARNING] - app.controllers.grade_controller - update_grade() - Missing grade value for update: {}
2025-02-10 23:10:56,657 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:56,657 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:56,657 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:56,657 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:57,197 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 47a1f0d5-47d1-44b1-b905-587127aee57c
2025-02-10 23:10:57,197 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 47a1f0d5-47d1-44b1-b905-587127aee57c)
2025-02-10 23:10:57,197 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: ac969b49-cde4-4afb-997f-83a2743e0ca6
2025-02-10 23:10:57,197 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: ac969b49-cde4-4afb-997f-83a2743e0ca6, Grade Value: 90.0
2025-02-10 23:10:57,197 - [DEBUG] - app.services.grade_service - update_grade() - Updating grade ID: ac969b49-cde4-4afb-997f-83a2743e0ca6 to new value: 95.
2025-02-10 23:10:57,197 - [INFO] - app.services.grade_service - update_grade() - Grade ID: ac969b49-cde4-4afb-997f-83a2743e0ca6 updated to value: 95.
2025-02-10 23:10:57,197 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: ac969b49-cde4-4afb-997f-83a2743e0ca6
2025-02-10 23:10:57,197 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'ac969b49-cde4-4afb-997f-83a2743e0ca6', 'course_id': '19b731fd-5792-4e2b-b20f-ac2e37bc11fe', 'student_id': '06d3c7db-1fff-43e5-a828-6f48c1d924e8', 'grade': 95.0, 'name': 'DM', 'created_at': '2025-02-10T22:10:57', 'updated_at': '2025-02-10T22:10:57'}
2025-02-10 23:10:57,278 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:57,278 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:57,278 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:57,278 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:57,815 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4cf3641b-dd52-4f16-a5cf-6585c6ae5e5c
2025-02-10 23:10:57,815 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 4cf3641b-dd52-4f16-a5cf-6585c6ae5e5c)
2025-02-10 23:10:57,815 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 299d6845-3ef2-4ab6-bc79-d95f71588b8a
2025-02-10 23:10:57,815 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 299d6845-3ef2-4ab6-bc79-d95f71588b8a)
2025-02-10 23:10:57,815 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 479cea1f-6aa6-4514-958e-1bb2d258000c
2025-02-10 23:10:57,815 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 479cea1f-6aa6-4514-958e-1bb2d258000c)
2025-02-10 23:10:57,815 - [DEBUG] - app.services.grade_service - get_student_grades() - Fetching grades for student ID: 479cea1f-6aa6-4514-958e-1bb2d258000c in course ID: 299d6845-3ef2-4ab6-bc79-d95f71588b8a.
2025-02-10 23:10:57,815 - [INFO] - app.services.grade_service - get_student_grades() - Retrieved 1 grades for student ID: 479cea1f-6aa6-4514-958e-1bb2d258000c in course ID: 299d6845-3ef2-4ab6-bc79-d95f71588b8a.
2025-02-10 23:10:57,815 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: d29ff353-18d9-4f3b-b0e5-307a9810d417
2025-02-10 23:10:57,815 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'd29ff353-18d9-4f3b-b0e5-307a9810d417', 'course_id': '299d6845-3ef2-4ab6-bc79-d95f71588b8a', 'student_id': '479cea1f-6aa6-4514-958e-1bb2d258000c', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:10:58', 'updated_at': '2025-02-10T22:10:58'}
2025-02-10 23:10:57,893 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:57,893 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:57,893 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:57,893 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:58,456 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 405a4cb0-2847-48e0-8d03-31dddbf2d7c4
2025-02-10 23:10:58,456 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 405a4cb0-2847-48e0-8d03-31dddbf2d7c4)
2025-02-10 23:10:58,456 - [WARNING] - app.controllers.grade_controller - delete_grade() - Unauthorized grade deletion attempt by user ID: 405a4cb0-2847-48e0-8d03-31dddbf2d7c4
2025-02-10 23:10:58,518 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:58,518 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:58,518 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:58,518 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:59,099 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0791424f-031e-4c5e-9273-c777382aa970
2025-02-10 23:10:59,099 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 0791424f-031e-4c5e-9273-c777382aa970)
2025-02-10 23:10:59,099 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 5a001aa2-265f-478d-861b-08c9bd298418
2025-02-10 23:10:59,099 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 5a001aa2-265f-478d-861b-08c9bd298418, Grade Value: 90.0
2025-02-10 23:10:59,099 - [DEBUG] - app.services.grade_service - delete_grade() - Deleting grade ID: 5a001aa2-265f-478d-861b-08c9bd298418.
2025-02-10 23:10:59,099 - [INFO] - app.services.grade_service - delete_grade() - Grade ID: 5a001aa2-265f-478d-861b-08c9bd298418 deleted successfully.
2025-02-10 23:10:59,190 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:59,191 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:59,193 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:59,193 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:10:59,726 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 7234b58b-6ee3-434b-9319-7682a555098f
2025-02-10 23:10:59,726 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 7234b58b-6ee3-434b-9319-7682a555098f)
2025-02-10 23:10:59,726 - [DEBUG] - app.services.user_service - get_all_users() - Fetching all users from the database.
2025-02-10 23:10:59,726 - [INFO] - app.services.user_service - get_all_users() - Fetched 3 users from the database.
2025-02-10 23:10:59,741 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '21c18c57-f84d-4b94-b8c5-f875dfd13f9d', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-10T22:11:00', 'updated_at': '2025-02-10T22:11:00', 'courses_enrolled': []}
2025-02-10 23:10:59,741 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '7234b58b-6ee3-434b-9319-7682a555098f', 'name': 'admin', 'email': 'admin@example.com', 'role': 'Administrator', 'created_at': '2025-02-10T22:11:00', 'updated_at': '2025-02-10T22:11:00', 'courses_enrolled': []}
2025-02-10 23:10:59,741 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '84fa07ce-69b2-419b-8976-a4ce2cb51cbf', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:11:00', 'updated_at': '2025-02-10T22:11:00', 'courses_enrolled': []}
2025-02-10 23:10:59,801 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:10:59,801 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:10:59,817 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:10:59,817 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:00,364 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b1d2014f-3226-4ce3-a21a-402b7bf1b879
2025-02-10 23:11:00,364 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: b1d2014f-3226-4ce3-a21a-402b7bf1b879)
2025-02-10 23:11:00,364 - [WARNING] - app.controllers.user_controller - list_users() - Unauthorized access attempt by user ID: b1d2014f-3226-4ce3-a21a-402b7bf1b879
2025-02-10 23:11:00,427 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:00,427 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:00,443 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:00,443 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:01,016 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: dee6773a-c4c3-4c1c-9098-e95c654f6c62
2025-02-10 23:11:01,016 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: dee6773a-c4c3-4c1c-9098-e95c654f6c62)
2025-02-10 23:11:01,016 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: f7df101e-bca3-4448-95b1-80ec0162cc49
2025-02-10 23:11:01,016 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: f7df101e-bca3-4448-95b1-80ec0162cc49)
2025-02-10 23:11:01,016 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'f7df101e-bca3-4448-95b1-80ec0162cc49', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:11:01', 'updated_at': '2025-02-10T22:11:01', 'courses_enrolled': []}
2025-02-10 23:11:01,079 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:01,079 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:01,095 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:01,095 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:01,642 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5c838e7c-b28f-4ed2-a81b-63bb8da4c78e
2025-02-10 23:11:01,642 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 5c838e7c-b28f-4ed2-a81b-63bb8da4c78e)
2025-02-10 23:11:01,642 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5c838e7c-b28f-4ed2-a81b-63bb8da4c78e
2025-02-10 23:11:01,642 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 5c838e7c-b28f-4ed2-a81b-63bb8da4c78e)
2025-02-10 23:11:01,642 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '5c838e7c-b28f-4ed2-a81b-63bb8da4c78e', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-10T22:11:02', 'updated_at': '2025-02-10T22:11:02', 'courses_enrolled': []}
2025-02-10 23:11:01,720 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:01,720 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:01,720 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:01,720 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:02,298 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 275a81d2-231f-4fcc-a6f3-aba70f96c09c
2025-02-10 23:11:02,298 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 275a81d2-231f-4fcc-a6f3-aba70f96c09c)
2025-02-10 23:11:02,298 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: nonexistent-user-id
2025-02-10 23:11:02,298 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: nonexistent-user-id
2025-02-10 23:11:02,298 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID nonexistent-user-id
2025-02-10 23:11:02,360 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:02,360 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:02,376 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:02,376 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:02,923 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3315275d-3618-41aa-ae64-f64aaecce902
2025-02-10 23:11:02,923 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 3315275d-3618-41aa-ae64-f64aaecce902)
2025-02-10 23:11:02,923 - [DEBUG] - app.services.user_service - search_users() - Searching users with query: student
2025-02-10 23:11:02,923 - [ERROR] - app.controllers.user_controller - search_users() - Error searching users: 'property' object has no attribute 'ilike'
Traceback (most recent call last):
  File "C:\Users\cbonn\Downloads\FlaskApp\app\controllers\user_controller.py", line 76, in search_users
    users = self.user_service.search_users(query)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\cbonn\Downloads\FlaskApp\app\services\user_service.py", line 83, in search_users
    (User.name.ilike(f"%{query}%")) |
     ^^^^^^^^^^^^^^^
AttributeError: 'property' object has no attribute 'ilike'
2025-02-10 23:11:03,001 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:03,001 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:03,001 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:03,001 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:03,533 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8171ba65-f84c-4856-9f8e-1fa0c7133ed5
2025-02-10 23:11:03,533 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 8171ba65-f84c-4856-9f8e-1fa0c7133ed5)
2025-02-10 23:11:03,533 - [WARNING] - app.controllers.user_controller - search_users() - Unauthorized access attempt by user ID: 8171ba65-f84c-4856-9f8e-1fa0c7133ed5
2025-02-10 23:11:03,611 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:03,611 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:03,611 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:03,611 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:04,143 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ae7dfbf7-82e6-4f03-8bc2-b68712d55f75
2025-02-10 23:11:04,143 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: ae7dfbf7-82e6-4f03-8bc2-b68712d55f75)
2025-02-10 23:11:04,143 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Missing fields.
2025-02-10 23:11:04,205 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:04,221 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:04,221 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:04,221 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:04,799 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 655cf0e4-1eea-4572-bdb2-1f6a56c76d3f
2025-02-10 23:11:04,799 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 655cf0e4-1eea-4572-bdb2-1f6a56c76d3f)
2025-02-10 23:11:04,799 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Invalid role 'Administrator'.
2025-02-10 23:11:04,861 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:04,877 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:04,877 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:04,877 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:05,424 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 13b322da-f8e8-47d9-a1a5-c564f3c9b6e1
2025-02-10 23:11:05,424 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 13b322da-f8e8-47d9-a1a5-c564f3c9b6e1)
2025-02-10 23:11:05,424 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newstudent@example.com
2025-02-10 23:11:05,440 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newstudent@example.com
2025-02-10 23:11:05,440 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Student, Email: newstudent@example.com, Role: Student
2025-02-10 23:11:05,564 - [INFO] - app.services.user_service - create_user() - User created with ID: 4e1c8850-3457-43dd-9fea-3bb93b217530
2025-02-10 23:11:05,564 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4e1c8850-3457-43dd-9fea-3bb93b217530
2025-02-10 23:11:05,564 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: 4e1c8850-3457-43dd-9fea-3bb93b217530)
2025-02-10 23:11:05,564 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '4e1c8850-3457-43dd-9fea-3bb93b217530', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:11:06', 'updated_at': '2025-02-10T22:11:06', 'courses_enrolled': []}
2025-02-10 23:11:05,564 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 13b322da-f8e8-47d9-a1a5-c564f3c9b6e1
2025-02-10 23:11:05,564 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 13b322da-f8e8-47d9-a1a5-c564f3c9b6e1)
2025-02-10 23:11:05,564 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4e1c8850-3457-43dd-9fea-3bb93b217530
2025-02-10 23:11:05,580 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: 4e1c8850-3457-43dd-9fea-3bb93b217530)
2025-02-10 23:11:05,580 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '4e1c8850-3457-43dd-9fea-3bb93b217530', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:11:06', 'updated_at': '2025-02-10T22:11:06', 'courses_enrolled': []}
2025-02-10 23:11:05,661 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:05,661 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:05,667 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:05,668 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:06,210 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 84875b92-9294-428b-a38a-b10672d4dbdf
2025-02-10 23:11:06,210 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 84875b92-9294-428b-a38a-b10672d4dbdf)
2025-02-10 23:11:06,210 - [WARNING] - app.controllers.user_controller - update_user() - Unauthorized access attempt by user ID: 84875b92-9294-428b-a38a-b10672d4dbdf
2025-02-10 23:11:06,279 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:06,286 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:06,286 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:06,286 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:06,841 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8d2d5527-03a5-4409-8fe3-eb04f0ea52f1
2025-02-10 23:11:06,841 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 8d2d5527-03a5-4409-8fe3-eb04f0ea52f1)
2025-02-10 23:11:06,841 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8d2d5527-03a5-4409-8fe3-eb04f0ea52f1
2025-02-10 23:11:06,841 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 8d2d5527-03a5-4409-8fe3-eb04f0ea52f1)
2025-02-10 23:11:06,841 - [DEBUG] - app.services.user_service - update_user() - Updating user ID: 8d2d5527-03a5-4409-8fe3-eb04f0ea52f1 with Name: Updated Professor Name, Email: unchanged
2025-02-10 23:11:06,841 - [INFO] - app.services.user_service - update_user() - User ID: 8d2d5527-03a5-4409-8fe3-eb04f0ea52f1 updated successfully.
2025-02-10 23:11:06,857 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8d2d5527-03a5-4409-8fe3-eb04f0ea52f1
2025-02-10 23:11:06,857 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Updated Professor Name (ID: 8d2d5527-03a5-4409-8fe3-eb04f0ea52f1)
2025-02-10 23:11:06,857 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '8d2d5527-03a5-4409-8fe3-eb04f0ea52f1', 'name': 'Updated Professor Name', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-10T22:11:07', 'updated_at': '2025-02-10T22:11:07', 'courses_enrolled': []}
2025-02-10 23:11:06,920 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:11:06,920 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:11:06,920 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:11:06,920 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:11:07,478 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6029f947-0472-41b2-b467-c407beeaf7f8
2025-02-10 23:11:07,478 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 6029f947-0472-41b2-b467-c407beeaf7f8)
2025-02-10 23:11:07,478 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: tempstudent@example.com
2025-02-10 23:11:07,478 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: tempstudent@example.com
2025-02-10 23:11:07,478 - [DEBUG] - app.services.user_service - create_user() - Creating user: Temp Student, Email: tempstudent@example.com, Role: Student
2025-02-10 23:11:07,600 - [INFO] - app.services.user_service - create_user() - User created with ID: b8e963e4-4f6e-4d76-be74-21484e2d2abc
2025-02-10 23:11:07,600 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b8e963e4-4f6e-4d76-be74-21484e2d2abc
2025-02-10 23:11:07,600 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: b8e963e4-4f6e-4d76-be74-21484e2d2abc)
2025-02-10 23:11:07,600 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'b8e963e4-4f6e-4d76-be74-21484e2d2abc', 'name': 'Temp Student', 'email': 'tempstudent@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:11:08', 'updated_at': '2025-02-10T22:11:08', 'courses_enrolled': []}
2025-02-10 23:11:07,600 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6029f947-0472-41b2-b467-c407beeaf7f8
2025-02-10 23:11:07,600 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 6029f947-0472-41b2-b467-c407beeaf7f8)
2025-02-10 23:11:07,600 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b8e963e4-4f6e-4d76-be74-21484e2d2abc
2025-02-10 23:11:07,615 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: b8e963e4-4f6e-4d76-be74-21484e2d2abc)
2025-02-10 23:11:07,615 - [DEBUG] - app.services.user_service - delete_user() - Deleting user ID: b8e963e4-4f6e-4d76-be74-21484e2d2abc
2025-02-10 23:11:07,615 - [INFO] - app.services.user_service - delete_user() - User ID: b8e963e4-4f6e-4d76-be74-21484e2d2abc deleted successfully.
2025-02-10 23:11:07,615 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6029f947-0472-41b2-b467-c407beeaf7f8
2025-02-10 23:11:07,615 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 6029f947-0472-41b2-b467-c407beeaf7f8)
2025-02-10 23:11:07,615 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b8e963e4-4f6e-4d76-be74-21484e2d2abc
2025-02-10 23:11:07,615 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: b8e963e4-4f6e-4d76-be74-21484e2d2abc
2025-02-10 23:11:07,615 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID b8e963e4-4f6e-4d76-be74-21484e2d2abc
2025-02-10 23:14:00,282 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:00,331 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:00,338 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:00,338 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:00,352 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-10 23:14:00,352 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-10 23:14:00,359 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-10 23:14:00,359 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-10 23:14:01,164 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:01,164 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:01,171 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:01,171 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:01,768 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:01,768 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:01,775 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:01,775 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:02,386 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:02,386 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:02,395 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:02,395 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:03,018 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:03,018 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:03,025 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:03,025 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:03,657 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:03,657 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:03,666 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:03,666 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:04,268 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:04,268 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:04,275 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:04,275 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:04,886 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:04,886 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:04,893 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:04,893 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:05,511 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:05,511 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:05,511 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:05,511 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:06,136 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:06,143 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:06,143 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:06,143 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:06,799 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:06,800 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:06,804 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:06,804 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:07,552 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:07,552 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:07,559 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:07,559 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:08,309 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:08,309 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:08,309 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:08,309 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:08,941 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:08,941 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:08,948 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:08,948 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:09,649 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:09,649 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:09,649 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:09,649 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:10,316 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:10,316 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:10,322 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:10,322 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:10,975 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:10,975 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:10,982 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:10,982 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:11,678 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:11,683 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:11,684 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:11,684 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:12,322 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:12,322 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:12,322 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:12,322 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:14:12,940 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:14:12,940 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:14:12,948 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:14:12,948 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:17:42,629 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:17:42,675 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:17:42,685 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:17:42,686 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:17:42,692 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-10 23:17:42,695 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-10 23:17:42,695 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-10 23:17:42,695 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-10 23:17:43,410 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:17:43,410 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:17:43,426 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:17:43,427 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:17:44,001 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:17:44,001 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:17:44,001 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:17:44,001 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:18:57,643 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:18:57,679 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:18:57,692 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:18:57,692 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:18:57,699 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-10 23:18:57,699 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-10 23:18:57,705 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-10 23:18:57,706 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-10 23:18:58,525 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:18:58,525 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:18:58,525 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:18:58,525 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:18:59,372 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:18:59,372 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:18:59,372 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:18:59,372 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:19:00,040 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:19:00,040 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:19:00,040 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:19:00,040 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:19:00,733 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:19:00,733 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:19:00,748 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:19:00,748 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:19:01,441 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:19:01,441 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:19:01,441 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:19:01,441 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:19:02,097 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:19:02,103 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:19:02,105 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:19:02,105 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:19:02,747 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:19:02,753 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:19:02,754 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:19:02,754 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:19:03,399 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:19:03,400 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:19:03,400 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:19:03,400 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:51,433 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:51,472 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:51,484 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:51,484 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:51,509 - [DEBUG] - app.routes.auth_route - <module>() - Authentication routes have been registered.
2025-02-10 23:22:51,509 - [DEBUG] - app.routes.course_route - <module>() - Course routes have been registered.
2025-02-10 23:22:51,509 - [DEBUG] - app.routes.user_route - <module>() - User routes have been registered.
2025-02-10 23:22:51,509 - [DEBUG] - app.routes.grade_route - <module>() - Grade routes have been registered.
2025-02-10 23:22:52,086 - [WARNING] - app.controllers.auth_controller - register() - Missing fields: ['role']
2025-02-10 23:22:52,168 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:52,168 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:52,168 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:52,168 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:52,721 - [WARNING] - app.controllers.auth_controller - register() - Invalid email format during registration.
2025-02-10 23:22:52,786 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:52,786 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:52,786 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:52,786 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:53,327 - [WARNING] - app.controllers.auth_controller - register() - Password requirements not met during registration.
2025-02-10 23:22:53,406 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:53,406 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:53,406 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:53,406 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:53,964 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0f9bde1c-8920-4a81-b6ae-fd15a231463b
2025-02-10 23:22:53,964 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 0f9bde1c-8920-4a81-b6ae-fd15a231463b)
2025-02-10 23:22:53,964 - [WARNING] - app.controllers.auth_controller - register() - Unauthorized registration attempt by user ID: 0f9bde1c-8920-4a81-b6ae-fd15a231463b
2025-02-10 23:22:54,027 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:54,043 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:54,043 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:54,043 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:54,596 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 551327e9-fd68-400f-953b-274eb51bd733
2025-02-10 23:22:54,596 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 551327e9-fd68-400f-953b-274eb51bd733)
2025-02-10 23:22:54,596 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newprofadmin@example.com
2025-02-10 23:22:54,612 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newprofadmin@example.com
2025-02-10 23:22:54,612 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Professor Admin, Email: newprofadmin@example.com, Role: Professor
2025-02-10 23:22:54,721 - [INFO] - app.services.user_service - create_user() - User created with ID: e28ce3e5-2f41-4300-92cc-2b8bf3175812
2025-02-10 23:22:54,721 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: e28ce3e5-2f41-4300-92cc-2b8bf3175812
2025-02-10 23:22:54,800 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:54,800 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:54,800 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:54,800 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:55,376 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4e3890ec-586c-436e-9b2d-029d5c753c38
2025-02-10 23:22:55,376 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 4e3890ec-586c-436e-9b2d-029d5c753c38)
2025-02-10 23:22:55,376 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-10 23:22:55,376 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: conflict@example.com
2025-02-10 23:22:55,376 - [DEBUG] - app.services.user_service - create_user() - Creating user: Conflict User, Email: conflict@example.com, Role: Student
2025-02-10 23:22:55,501 - [INFO] - app.services.user_service - create_user() - User created with ID: 1994f8f3-39be-4ab6-a152-76213891b46d
2025-02-10 23:22:55,501 - [INFO] - app.controllers.auth_controller - register() - User registered successfully with ID: 1994f8f3-39be-4ab6-a152-76213891b46d
2025-02-10 23:22:55,501 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4e3890ec-586c-436e-9b2d-029d5c753c38
2025-02-10 23:22:55,501 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 4e3890ec-586c-436e-9b2d-029d5c753c38)
2025-02-10 23:22:55,501 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: conflict@example.com
2025-02-10 23:22:55,501 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: Conflict User (ID: 1994f8f3-39be-4ab6-a152-76213891b46d)
2025-02-10 23:22:55,501 - [WARNING] - app.controllers.auth_controller - register() - Email already in use during registration.
2025-02-10 23:22:55,575 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:55,575 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:55,575 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:55,575 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:56,115 - [WARNING] - app.controllers.auth_controller - login() - Login failed: Missing credentials.
2025-02-10 23:22:56,181 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:56,181 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:56,181 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:56,181 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:56,723 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: doesnotexist@example.com
2025-02-10 23:22:56,723 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: doesnotexist@example.com
2025-02-10 23:22:56,739 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: doesnotexist@example.com
2025-02-10 23:22:56,739 - [WARNING] - app.services.auth_service - authenticate_user() - No user found with email: doesnotexist@example.com
2025-02-10 23:22:56,739 - [WARNING] - app.controllers.auth_controller - login() - Invalid credentials during login.
2025-02-10 23:22:56,815 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:56,815 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:56,815 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:56,815 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:57,344 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-10 23:22:57,344 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:22:57,344 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 3f35ff6b-99bd-4223-a302-c972094b0d5e)
2025-02-10 23:22:57,453 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: 3f35ff6b-99bd-4223-a302-c972094b0d5e) authenticated successfully.
2025-02-10 23:22:57,453 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: 3f35ff6b-99bd-4223-a302-c972094b0d5e
2025-02-10 23:22:57,453 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '3f35ff6b-99bd-4223-a302-c972094b0d5e', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:22:57', 'updated_at': '2025-02-10T22:22:57', 'courses_enrolled': []}
2025-02-10 23:22:57,535 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:57,551 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:57,551 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:57,551 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:58,089 - [WARNING] - app.controllers.auth_controller - change_password() - Change password failed: Missing required fields.
2025-02-10 23:22:58,169 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:58,169 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:58,169 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:58,169 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:58,694 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:22:58,694 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: 6cb9f06e-ac8d-4a6b-be50-19ba7c7c8c36)
2025-02-10 23:22:58,800 - [WARNING] - app.controllers.auth_controller - change_password() - Incorrect current password during password change.
2025-02-10 23:22:58,883 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:58,883 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:58,883 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:58,883 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:22:59,408 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:22:59,408 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: b87fd644-7c5a-4718-8e17-69623f4a2315)
2025-02-10 23:22:59,517 - [WARNING] - app.controllers.auth_controller - change_password() - New password requirements not met.
2025-02-10 23:22:59,597 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:22:59,597 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:22:59,597 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:22:59,597 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:00,136 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:23:00,136 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: c6f93633-d319-4455-aaaa-2aa150a25479)
2025-02-10 23:23:00,245 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: c6f93633-d319-4455-aaaa-2aa150a25479
2025-02-10 23:23:00,477 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: c6f93633-d319-4455-aaaa-2aa150a25479
2025-02-10 23:23:00,477 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: c6f93633-d319-4455-aaaa-2aa150a25479
2025-02-10 23:23:00,477 - [DEBUG] - app.services.auth_service - authenticate_user() - Authenticating user with email: student@example.com
2025-02-10 23:23:00,477 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:23:00,477 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: c6f93633-d319-4455-aaaa-2aa150a25479)
2025-02-10 23:23:00,587 - [INFO] - app.services.auth_service - authenticate_user() - User (ID: c6f93633-d319-4455-aaaa-2aa150a25479) authenticated successfully.
2025-02-10 23:23:00,587 - [INFO] - app.controllers.auth_controller - login() - User logged in successfully with ID: c6f93633-d319-4455-aaaa-2aa150a25479
2025-02-10 23:23:00,587 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'c6f93633-d319-4455-aaaa-2aa150a25479', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:23:00', 'updated_at': '2025-02-10T22:23:00', 'courses_enrolled': []}
2025-02-10 23:23:00,587 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: student@example.com
2025-02-10 23:23:00,602 - [DEBUG] - app.services.user_service - get_user_by_email() - User found: student (ID: c6f93633-d319-4455-aaaa-2aa150a25479)
2025-02-10 23:23:00,696 - [DEBUG] - app.services.auth_service - update_user_password() - Attempting to update password for user ID: c6f93633-d319-4455-aaaa-2aa150a25479
2025-02-10 23:23:00,931 - [INFO] - app.services.auth_service - update_user_password() - Password updated successfully for user ID: c6f93633-d319-4455-aaaa-2aa150a25479
2025-02-10 23:23:00,931 - [INFO] - app.controllers.auth_controller - change_password() - Password updated successfully for user ID: c6f93633-d319-4455-aaaa-2aa150a25479
2025-02-10 23:23:01,008 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:01,008 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:01,008 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:01,008 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:01,564 - [INFO] - app.controllers.course_controller - list_courses() - Listing courses - Page: 1, Per Page: 10
2025-02-10 23:23:01,564 - [DEBUG] - app.services.course_service - get_all_courses_paginated() - Fetching courses - Page: 1, Per Page: 10
2025-02-10 23:23:01,579 - [INFO] - app.services.course_service - get_all_courses_paginated() - Retrieved 1 courses on page 1.
2025-02-10 23:23:01,579 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: cce709a8-6257-4a36-9c53-e4f0026f0d68
2025-02-10 23:23:01,579 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': 'cce709a8-6257-4a36-9c53-e4f0026f0d68', 'name': 'Test Course', 'professor_id': 'a688585b-789d-475e-9a57-12f447c0066f', 'created_at': '2025-02-10T22:23:02', 'updated_at': '2025-02-10T22:23:02'}
2025-02-10 23:23:01,661 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:01,661 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:01,661 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:01,661 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:02,200 - [INFO] - app.controllers.course_controller - get_course() - Retrieving course with ID: 25b23969-b516-4d3a-a97b-9601fa4bfc45
2025-02-10 23:23:02,200 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 25b23969-b516-4d3a-a97b-9601fa4bfc45
2025-02-10 23:23:02,200 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 25b23969-b516-4d3a-a97b-9601fa4bfc45)
2025-02-10 23:23:02,200 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 25b23969-b516-4d3a-a97b-9601fa4bfc45
2025-02-10 23:23:02,200 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '25b23969-b516-4d3a-a97b-9601fa4bfc45', 'name': 'Test Course', 'professor_id': 'b48d1d96-c7c5-458b-8d10-7ead68141d14', 'created_at': '2025-02-10T22:23:02', 'updated_at': '2025-02-10T22:23:02'}
2025-02-10 23:23:02,278 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:02,278 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:02,278 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:02,278 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:02,805 - [INFO] - app.controllers.course_controller - search_courses() - Searching courses with query: 'Test'
2025-02-10 23:23:02,805 - [DEBUG] - app.services.course_service - search_courses_by_name() - Searching courses with name containing: Test
2025-02-10 23:23:02,805 - [INFO] - app.services.course_service - search_courses_by_name() - Found 1 courses matching query 'Test'.
2025-02-10 23:23:02,805 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 54c3f9f0-17a6-49e5-98eb-80d3cc919df8
2025-02-10 23:23:02,805 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '54c3f9f0-17a6-49e5-98eb-80d3cc919df8', 'name': 'Test Course', 'professor_id': 'df96fea0-0799-4c42-b75c-fc8206871cfa', 'created_at': '2025-02-10T22:23:03', 'updated_at': '2025-02-10T22:23:03'}
2025-02-10 23:23:02,889 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:02,889 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:02,889 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:02,889 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:03,427 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4a2dc0b0-f4bf-429b-af77-547a266e13c0
2025-02-10 23:23:03,427 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 4a2dc0b0-f4bf-429b-af77-547a266e13c0)
2025-02-10 23:23:03,427 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: f7e399b6-2035-4291-a844-ad7214112b02
2025-02-10 23:23:03,427 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: f7e399b6-2035-4291-a844-ad7214112b02)
2025-02-10 23:23:03,427 - [DEBUG] - app.services.course_service - get_students_in_course() - Fetching students in course ID: f7e399b6-2035-4291-a844-ad7214112b02
2025-02-10 23:23:03,427 - [INFO] - app.services.course_service - get_students_in_course() - Retrieved 0 students for course ID: f7e399b6-2035-4291-a844-ad7214112b02.
2025-02-10 23:23:03,508 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:03,508 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:03,508 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:03,508 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:04,031 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 8fc3dec9-86c5-49a0-b2e6-e3fb248c2bc5
2025-02-10 23:23:04,031 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 8fc3dec9-86c5-49a0-b2e6-e3fb248c2bc5)
2025-02-10 23:23:04,031 - [WARNING] - app.controllers.course_controller - create_course() - Unauthorized course creation attempt by user ID: 8fc3dec9-86c5-49a0-b2e6-e3fb248c2bc5
2025-02-10 23:23:04,111 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:04,111 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:04,111 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:04,111 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:04,641 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2761a5dd-6764-4d53-88d4-ce686e648759
2025-02-10 23:23:04,641 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 2761a5dd-6764-4d53-88d4-ce686e648759)
2025-02-10 23:23:04,641 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 11597eac-be79-4a70-b30b-94d4afd388df
2025-02-10 23:23:04,641 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 11597eac-be79-4a70-b30b-94d4afd388df)
2025-02-10 23:23:04,641 - [DEBUG] - app.services.course_service - update_course() - Updating course ID: 11597eac-be79-4a70-b30b-94d4afd388df with new name: Updated Test Course
2025-02-10 23:23:04,641 - [INFO] - app.services.course_service - update_course() - Course ID: 11597eac-be79-4a70-b30b-94d4afd388df updated successfully.
2025-02-10 23:23:04,657 - [INFO] - app.controllers.course_controller - update_course() - Course updated successfully with ID: 11597eac-be79-4a70-b30b-94d4afd388df
2025-02-10 23:23:04,657 - [DEBUG] - app.utils.serializer - serialize_course() - Serializing course ID: 11597eac-be79-4a70-b30b-94d4afd388df
2025-02-10 23:23:04,657 - [DEBUG] - app.utils.serializer - serialize_course() - Course serialized: {'id': '11597eac-be79-4a70-b30b-94d4afd388df', 'name': 'Updated Test Course', 'professor_id': '2761a5dd-6764-4d53-88d4-ce686e648759', 'created_at': '2025-02-10T22:23:05', 'updated_at': '2025-02-10T22:23:05'}
2025-02-10 23:23:04,722 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:04,722 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:04,722 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:04,722 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:05,263 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 57ae0d38-a182-4126-8c19-aa672013798f
2025-02-10 23:23:05,263 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 57ae0d38-a182-4126-8c19-aa672013798f)
2025-02-10 23:23:05,263 - [WARNING] - app.controllers.course_controller - delete_course() - Unauthorized course deletion attempt by user ID: 57ae0d38-a182-4126-8c19-aa672013798f
2025-02-10 23:23:05,333 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:05,333 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:05,349 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:05,349 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:05,891 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 623aa4c7-5578-401a-bb4d-0ae1ef52b14d
2025-02-10 23:23:05,891 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 623aa4c7-5578-401a-bb4d-0ae1ef52b14d)
2025-02-10 23:23:05,891 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 900ff7b7-907b-4bca-b26f-e958a66284dc
2025-02-10 23:23:05,891 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 900ff7b7-907b-4bca-b26f-e958a66284dc)
2025-02-10 23:23:05,891 - [DEBUG] - app.services.course_service - delete_course() - Deleting course ID: 900ff7b7-907b-4bca-b26f-e958a66284dc
2025-02-10 23:23:05,907 - [INFO] - app.services.course_service - delete_course() - Course ID: 900ff7b7-907b-4bca-b26f-e958a66284dc deleted successfully.
2025-02-10 23:23:05,907 - [INFO] - app.controllers.course_controller - delete_course() - Course deleted successfully with ID: 900ff7b7-907b-4bca-b26f-e958a66284dc
2025-02-10 23:23:06,003 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:06,003 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:06,003 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:06,003 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:06,542 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: db3ae15d-8f80-4155-ad27-90a4d764286f
2025-02-10 23:23:06,542 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: db3ae15d-8f80-4155-ad27-90a4d764286f)
2025-02-10 23:23:06,542 - [WARNING] - app.controllers.grade_controller - list_grades() - Unauthorized access attempt by user ID: db3ae15d-8f80-4155-ad27-90a4d764286f
2025-02-10 23:23:06,618 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:06,618 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:06,618 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:06,618 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:07,165 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 44103ddd-0cff-4984-b4c5-66dce31c9f0e
2025-02-10 23:23:07,165 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 44103ddd-0cff-4984-b4c5-66dce31c9f0e)
2025-02-10 23:23:07,165 - [DEBUG] - app.services.grade_service - list_grades() - Retrieving all grades from the database.
2025-02-10 23:23:07,165 - [INFO] - app.services.grade_service - list_grades() - Retrieved 1 grades.
2025-02-10 23:23:07,165 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 7a61748f-09ee-429b-ab22-746e2ffe8821
2025-02-10 23:23:07,165 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '7a61748f-09ee-429b-ab22-746e2ffe8821', 'course_id': '5f245011-a8b5-4646-ad7d-1c6cce65270b', 'student_id': '76ef9fdb-d57c-456a-9502-8caf3a15656f', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:23:07', 'updated_at': '2025-02-10T22:23:07'}
2025-02-10 23:23:07,237 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:07,239 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:07,240 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:07,240 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:07,774 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b4002379-bfb2-46d1-8d45-3f71c21be4d0
2025-02-10 23:23:07,775 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: b4002379-bfb2-46d1-8d45-3f71c21be4d0)
2025-02-10 23:23:07,775 - [WARNING] - app.controllers.grade_controller - assign_grade() - Missing required fields in grade assignment: {}
2025-02-10 23:23:07,839 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:07,839 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:07,839 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:07,839 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:08,401 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: e019b2f0-144a-49e5-92d7-67df1816adc6
2025-02-10 23:23:08,401 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: e019b2f0-144a-49e5-92d7-67df1816adc6)
2025-02-10 23:23:08,401 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: b8c4eb35-7015-4f6f-bcd4-0c5bc45e5cb7
2025-02-10 23:23:08,401 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: b8c4eb35-7015-4f6f-bcd4-0c5bc45e5cb7)
2025-02-10 23:23:08,401 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: invalid_student_id
2025-02-10 23:23:08,401 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: invalid_student_id
2025-02-10 23:23:08,401 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=b8c4eb35-7015-4f6f-bcd4-0c5bc45e5cb7, student_id=invalid_student_id
2025-02-10 23:23:08,469 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:08,469 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:08,485 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:08,485 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:09,041 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5844864c-9cc2-42ca-8542-55b3d003631c
2025-02-10 23:23:09,041 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 5844864c-9cc2-42ca-8542-55b3d003631c)
2025-02-10 23:23:09,041 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: invalid_course_id
2025-02-10 23:23:09,041 - [DEBUG] - app.services.course_service - get_course_by_id() - No course found with ID: invalid_course_id
2025-02-10 23:23:09,041 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ed4753ec-1294-4473-afb1-2f150b0bf2a1
2025-02-10 23:23:09,041 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: ed4753ec-1294-4473-afb1-2f150b0bf2a1)
2025-02-10 23:23:09,041 - [WARNING] - app.controllers.grade_controller - assign_grade() - Course or student not found for grade assignment: course_id=invalid_course_id, student_id=ed4753ec-1294-4473-afb1-2f150b0bf2a1
2025-02-10 23:23:09,108 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:09,124 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:09,124 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:09,124 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:09,667 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b8593803-d753-4514-b27c-5f3cd3c04011
2025-02-10 23:23:09,667 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: b8593803-d753-4514-b27c-5f3cd3c04011)
2025-02-10 23:23:09,667 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: 5171003d-71e7-483b-bf29-467b3bdc9900
2025-02-10 23:23:09,667 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: 5171003d-71e7-483b-bf29-467b3bdc9900)
2025-02-10 23:23:09,667 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 9ae00ab8-46b0-40a1-a5fc-ed83696bb71d
2025-02-10 23:23:09,667 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 9ae00ab8-46b0-40a1-a5fc-ed83696bb71d)
2025-02-10 23:23:09,667 - [DEBUG] - app.services.grade_service - assign_grade() - Assigning grade 90 to student 9ae00ab8-46b0-40a1-a5fc-ed83696bb71d for course 5171003d-71e7-483b-bf29-467b3bdc9900.
2025-02-10 23:23:09,673 - [INFO] - app.services.grade_service - assign_grade() - Grade assigned: 684bc1d0-a5af-490e-a783-89fe5bc71e24, Value: 90.0
2025-02-10 23:23:09,673 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 684bc1d0-a5af-490e-a783-89fe5bc71e24
2025-02-10 23:23:09,673 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '684bc1d0-a5af-490e-a783-89fe5bc71e24', 'course_id': '5171003d-71e7-483b-bf29-467b3bdc9900', 'student_id': '9ae00ab8-46b0-40a1-a5fc-ed83696bb71d', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:23:10', 'updated_at': '2025-02-10T22:23:10'}
2025-02-10 23:23:09,744 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:09,745 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:09,749 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:09,749 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:10,298 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: dc893138-2333-4375-9ee1-d1ccfc083cd6
2025-02-10 23:23:10,298 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: dc893138-2333-4375-9ee1-d1ccfc083cd6)
2025-02-10 23:23:10,298 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 913d913e-1718-4283-b993-1a24858db920
2025-02-10 23:23:10,298 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 913d913e-1718-4283-b993-1a24858db920, Grade Value: 90.0
2025-02-10 23:23:10,298 - [WARNING] - app.controllers.grade_controller - get_grade() - Unauthorized grade access attempt by user ID: dc893138-2333-4375-9ee1-d1ccfc083cd6
2025-02-10 23:23:10,366 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:10,366 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:10,366 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:10,366 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:10,949 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 2ff13b88-607d-4704-94d2-4f52a07b7944
2025-02-10 23:23:10,949 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 2ff13b88-607d-4704-94d2-4f52a07b7944)
2025-02-10 23:23:10,950 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 4acf4903-f6b8-4eba-8ce5-124bdd3efd56
2025-02-10 23:23:10,950 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 4acf4903-f6b8-4eba-8ce5-124bdd3efd56, Grade Value: 90.0
2025-02-10 23:23:10,950 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 4acf4903-f6b8-4eba-8ce5-124bdd3efd56
2025-02-10 23:23:10,950 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '4acf4903-f6b8-4eba-8ce5-124bdd3efd56', 'course_id': 'b2fdd0a5-0820-46c8-af43-6f27473970ea', 'student_id': 'e6cef35d-e52f-4511-bf2c-36a0fd9b5afe', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:23:11', 'updated_at': '2025-02-10T22:23:11'}
2025-02-10 23:23:11,013 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:11,013 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:11,013 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:11,013 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:11,583 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 00cd8438-1311-4137-80ab-4e96291d9f91
2025-02-10 23:23:11,583 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 00cd8438-1311-4137-80ab-4e96291d9f91)
2025-02-10 23:23:11,583 - [WARNING] - app.controllers.grade_controller - update_grade() - Unauthorized grade update attempt by user ID: 00cd8438-1311-4137-80ab-4e96291d9f91
2025-02-10 23:23:11,651 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:11,651 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:11,651 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:11,651 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:12,192 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 1c64915d-1437-4e61-bb5c-ac5e951ca51e
2025-02-10 23:23:12,192 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 1c64915d-1437-4e61-bb5c-ac5e951ca51e)
2025-02-10 23:23:12,192 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 7aac1bee-4110-449c-85d9-78db571e84b8
2025-02-10 23:23:12,192 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 7aac1bee-4110-449c-85d9-78db571e84b8, Grade Value: 90.0
2025-02-10 23:23:12,192 - [WARNING] - app.controllers.grade_controller - update_grade() - Missing grade value for update: {}
2025-02-10 23:23:12,269 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:12,269 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:12,269 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:12,269 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:12,811 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: db7ff01b-0676-435f-8475-1f27f9051cdb
2025-02-10 23:23:12,811 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: db7ff01b-0676-435f-8475-1f27f9051cdb)
2025-02-10 23:23:12,811 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: b51280bf-439a-4c19-90d8-59d9df263a51
2025-02-10 23:23:12,811 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: b51280bf-439a-4c19-90d8-59d9df263a51, Grade Value: 90.0
2025-02-10 23:23:12,811 - [DEBUG] - app.services.grade_service - update_grade() - Updating grade ID: b51280bf-439a-4c19-90d8-59d9df263a51 to new value: 95.
2025-02-10 23:23:12,811 - [INFO] - app.services.grade_service - update_grade() - Grade ID: b51280bf-439a-4c19-90d8-59d9df263a51 updated to value: 95.
2025-02-10 23:23:12,811 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: b51280bf-439a-4c19-90d8-59d9df263a51
2025-02-10 23:23:12,811 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': 'b51280bf-439a-4c19-90d8-59d9df263a51', 'course_id': 'e823fe05-843b-4a72-9b60-77430149ed2d', 'student_id': '1ac02b49-28fc-492f-b795-c4f08967f9b1', 'grade': 95.0, 'name': 'DM', 'created_at': '2025-02-10T22:23:13', 'updated_at': '2025-02-10T22:23:13'}
2025-02-10 23:23:12,878 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:12,878 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:12,894 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:12,894 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:13,408 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 21b5d259-12ef-4c48-94e6-db5a0d4b7b2c
2025-02-10 23:23:13,408 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 21b5d259-12ef-4c48-94e6-db5a0d4b7b2c)
2025-02-10 23:23:13,408 - [DEBUG] - app.services.course_service - get_course_by_id() - Fetching course by ID: a8e8a449-feea-44e3-a467-06f9312ee145
2025-02-10 23:23:13,408 - [DEBUG] - app.services.course_service - get_course_by_id() - Course found: Test Course (ID: a8e8a449-feea-44e3-a467-06f9312ee145)
2025-02-10 23:23:13,408 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 11ac5233-b300-4ba6-ac5a-0c22679fc6fd
2025-02-10 23:23:13,408 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: 11ac5233-b300-4ba6-ac5a-0c22679fc6fd)
2025-02-10 23:23:13,408 - [DEBUG] - app.services.grade_service - get_student_grades() - Fetching grades for student ID: 11ac5233-b300-4ba6-ac5a-0c22679fc6fd in course ID: a8e8a449-feea-44e3-a467-06f9312ee145.
2025-02-10 23:23:13,408 - [INFO] - app.services.grade_service - get_student_grades() - Retrieved 1 grades for student ID: 11ac5233-b300-4ba6-ac5a-0c22679fc6fd in course ID: a8e8a449-feea-44e3-a467-06f9312ee145.
2025-02-10 23:23:13,424 - [DEBUG] - app.utils.serializer - serialize_grade() - Serializing grade ID: 4b51ed8f-a4b2-446b-8e6a-985d92deba62
2025-02-10 23:23:13,424 - [DEBUG] - app.utils.serializer - serialize_grade() - Grade serialized: {'id': '4b51ed8f-a4b2-446b-8e6a-985d92deba62', 'course_id': 'a8e8a449-feea-44e3-a467-06f9312ee145', 'student_id': '11ac5233-b300-4ba6-ac5a-0c22679fc6fd', 'grade': 90.0, 'name': 'DM', 'created_at': '2025-02-10T22:23:13', 'updated_at': '2025-02-10T22:23:13'}
2025-02-10 23:23:13,492 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:13,492 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:13,492 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:13,492 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:14,022 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: b196018d-0f76-408b-bb3a-97b22d79563e
2025-02-10 23:23:14,022 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: b196018d-0f76-408b-bb3a-97b22d79563e)
2025-02-10 23:23:14,022 - [WARNING] - app.controllers.grade_controller - delete_grade() - Unauthorized grade deletion attempt by user ID: b196018d-0f76-408b-bb3a-97b22d79563e
2025-02-10 23:23:14,090 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:14,090 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:14,090 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:14,090 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:14,619 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: ec5fce4c-5fba-4fa6-b23d-b60596e59517
2025-02-10 23:23:14,619 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: ec5fce4c-5fba-4fa6-b23d-b60596e59517)
2025-02-10 23:23:14,619 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Fetching grade with ID: 14a14a63-a8d0-41a5-ba26-9d23a9dc90ed
2025-02-10 23:23:14,619 - [DEBUG] - app.services.grade_service - get_grade_by_id() - Grade found: 14a14a63-a8d0-41a5-ba26-9d23a9dc90ed, Grade Value: 90.0
2025-02-10 23:23:14,619 - [DEBUG] - app.services.grade_service - delete_grade() - Deleting grade ID: 14a14a63-a8d0-41a5-ba26-9d23a9dc90ed.
2025-02-10 23:23:14,635 - [INFO] - app.services.grade_service - delete_grade() - Grade ID: 14a14a63-a8d0-41a5-ba26-9d23a9dc90ed deleted successfully.
2025-02-10 23:23:14,699 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:14,699 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:14,699 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:14,699 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:15,236 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 07af3868-9cbd-4bf7-b97f-e68bdee29aa0
2025-02-10 23:23:15,236 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 07af3868-9cbd-4bf7-b97f-e68bdee29aa0)
2025-02-10 23:23:15,236 - [DEBUG] - app.services.user_service - get_all_users() - Fetching all users from the database.
2025-02-10 23:23:15,251 - [INFO] - app.services.user_service - get_all_users() - Fetched 3 users from the database.
2025-02-10 23:23:15,251 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '07af3868-9cbd-4bf7-b97f-e68bdee29aa0', 'name': 'admin', 'email': 'admin@example.com', 'role': 'Administrator', 'created_at': '2025-02-10T22:23:15', 'updated_at': '2025-02-10T22:23:15', 'courses_enrolled': []}
2025-02-10 23:23:15,251 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'd2f12f81-d67d-48ee-8849-4241cbdd1ab8', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-10T22:23:15', 'updated_at': '2025-02-10T22:23:15', 'courses_enrolled': []}
2025-02-10 23:23:15,251 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'e5b9b37d-2f81-427b-a1b6-114ab8123258', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:23:15', 'updated_at': '2025-02-10T22:23:15', 'courses_enrolled': []}
2025-02-10 23:23:15,327 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:15,327 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:15,327 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:15,327 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:15,876 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 07f97c28-38ef-474a-b259-18fbeb96e401
2025-02-10 23:23:15,876 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 07f97c28-38ef-474a-b259-18fbeb96e401)
2025-02-10 23:23:15,876 - [WARNING] - app.controllers.user_controller - list_users() - Unauthorized access attempt by user ID: 07f97c28-38ef-474a-b259-18fbeb96e401
2025-02-10 23:23:15,943 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:15,943 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:15,943 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:15,943 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:16,494 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 0b60511b-014a-4848-a268-dee74a25d74d
2025-02-10 23:23:16,494 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 0b60511b-014a-4848-a268-dee74a25d74d)
2025-02-10 23:23:16,494 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: fec1dec3-0b9f-4b53-9bc4-6695ebecf304
2025-02-10 23:23:16,494 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: student (ID: fec1dec3-0b9f-4b53-9bc4-6695ebecf304)
2025-02-10 23:23:16,494 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': 'fec1dec3-0b9f-4b53-9bc4-6695ebecf304', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:23:16', 'updated_at': '2025-02-10T22:23:16', 'courses_enrolled': []}
2025-02-10 23:23:16,574 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:16,574 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:16,574 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:16,574 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:17,116 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 891e1709-f5e8-4632-9151-0d8d8184870e
2025-02-10 23:23:17,116 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 891e1709-f5e8-4632-9151-0d8d8184870e)
2025-02-10 23:23:17,116 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 891e1709-f5e8-4632-9151-0d8d8184870e
2025-02-10 23:23:17,116 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 891e1709-f5e8-4632-9151-0d8d8184870e)
2025-02-10 23:23:17,116 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '891e1709-f5e8-4632-9151-0d8d8184870e', 'name': 'professor', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-10T22:23:17', 'updated_at': '2025-02-10T22:23:17', 'courses_enrolled': []}
2025-02-10 23:23:17,195 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:17,195 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:17,195 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:17,195 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:17,721 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 4bd308d0-427b-4123-8bea-fa9986439eb5
2025-02-10 23:23:17,721 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 4bd308d0-427b-4123-8bea-fa9986439eb5)
2025-02-10 23:23:17,721 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: nonexistent-user-id
2025-02-10 23:23:17,721 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: nonexistent-user-id
2025-02-10 23:23:17,721 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID nonexistent-user-id
2025-02-10 23:23:17,805 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:17,805 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:17,805 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:17,805 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:18,350 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 6ada3a6b-68ea-4fe7-aae5-775713c1a5bf
2025-02-10 23:23:18,350 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 6ada3a6b-68ea-4fe7-aae5-775713c1a5bf)
2025-02-10 23:23:18,350 - [DEBUG] - app.services.user_service - search_users() - Searching users with query: student
2025-02-10 23:23:18,350 - [INFO] - app.services.user_service - search_users() - Found 1 users matching query 'student'.
2025-02-10 23:23:18,350 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '3cf20aa8-06f0-4775-826d-3039e99af980', 'name': 'student', 'email': 'student@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:23:18', 'updated_at': '2025-02-10T22:23:18', 'courses_enrolled': []}
2025-02-10 23:23:18,414 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:18,414 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:18,430 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:18,430 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:18,952 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3d0f78aa-ef03-4d03-8198-2f5793ac752c
2025-02-10 23:23:18,952 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 3d0f78aa-ef03-4d03-8198-2f5793ac752c)
2025-02-10 23:23:18,952 - [WARNING] - app.controllers.user_controller - search_users() - Unauthorized access attempt by user ID: 3d0f78aa-ef03-4d03-8198-2f5793ac752c
2025-02-10 23:23:19,019 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:19,019 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:19,035 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:19,035 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:19,565 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 9edd827d-3535-4535-93b1-5c2da4e650e8
2025-02-10 23:23:19,565 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 9edd827d-3535-4535-93b1-5c2da4e650e8)
2025-02-10 23:23:19,565 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Missing fields.
2025-02-10 23:23:19,631 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:19,631 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:19,646 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:19,646 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:20,173 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: c3828aa4-6b8b-4b91-9772-c606f124819d
2025-02-10 23:23:20,173 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: c3828aa4-6b8b-4b91-9772-c606f124819d)
2025-02-10 23:23:20,173 - [WARNING] - app.controllers.user_controller - create_user() - User creation failed: Invalid role 'Administrator'.
2025-02-10 23:23:20,231 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:20,231 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:20,247 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:20,247 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:20,761 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 252ff500-44cc-4388-9e18-57ec8dff7a4c
2025-02-10 23:23:20,761 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 252ff500-44cc-4388-9e18-57ec8dff7a4c)
2025-02-10 23:23:20,761 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: newstudent@example.com
2025-02-10 23:23:20,761 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: newstudent@example.com
2025-02-10 23:23:20,761 - [DEBUG] - app.services.user_service - create_user() - Creating user: New Student, Email: newstudent@example.com, Role: Student
2025-02-10 23:23:20,886 - [INFO] - app.services.user_service - create_user() - User created with ID: 3c52f606-4702-4470-87ab-ffcdfd5fba11
2025-02-10 23:23:20,886 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3c52f606-4702-4470-87ab-ffcdfd5fba11
2025-02-10 23:23:20,886 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: 3c52f606-4702-4470-87ab-ffcdfd5fba11)
2025-02-10 23:23:20,886 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '3c52f606-4702-4470-87ab-ffcdfd5fba11', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:23:21', 'updated_at': '2025-02-10T22:23:21', 'courses_enrolled': []}
2025-02-10 23:23:20,886 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 252ff500-44cc-4388-9e18-57ec8dff7a4c
2025-02-10 23:23:20,886 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 252ff500-44cc-4388-9e18-57ec8dff7a4c)
2025-02-10 23:23:20,886 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 3c52f606-4702-4470-87ab-ffcdfd5fba11
2025-02-10 23:23:20,886 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: New Student (ID: 3c52f606-4702-4470-87ab-ffcdfd5fba11)
2025-02-10 23:23:20,886 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '3c52f606-4702-4470-87ab-ffcdfd5fba11', 'name': 'New Student', 'email': 'newstudent@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:23:21', 'updated_at': '2025-02-10T22:23:21', 'courses_enrolled': []}
2025-02-10 23:23:20,964 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:20,964 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:20,964 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:20,964 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:21,517 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 26a602a8-072d-446e-9a33-c4b0d94b50df
2025-02-10 23:23:21,518 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 26a602a8-072d-446e-9a33-c4b0d94b50df)
2025-02-10 23:23:21,518 - [WARNING] - app.controllers.user_controller - update_user() - Unauthorized access attempt by user ID: 26a602a8-072d-446e-9a33-c4b0d94b50df
2025-02-10 23:23:21,578 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:21,578 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:21,594 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:21,594 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:22,129 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 625ce9e6-902c-4c1e-8d60-3dc0734b24f7
2025-02-10 23:23:22,129 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 625ce9e6-902c-4c1e-8d60-3dc0734b24f7)
2025-02-10 23:23:22,129 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 625ce9e6-902c-4c1e-8d60-3dc0734b24f7
2025-02-10 23:23:22,129 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: professor (ID: 625ce9e6-902c-4c1e-8d60-3dc0734b24f7)
2025-02-10 23:23:22,129 - [DEBUG] - app.services.user_service - update_user() - Updating user ID: 625ce9e6-902c-4c1e-8d60-3dc0734b24f7 with Name: Updated Professor Name, Email: None
2025-02-10 23:23:22,129 - [INFO] - app.services.user_service - update_user() - User ID: 625ce9e6-902c-4c1e-8d60-3dc0734b24f7 updated successfully.
2025-02-10 23:23:22,129 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 625ce9e6-902c-4c1e-8d60-3dc0734b24f7
2025-02-10 23:23:22,129 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Updated Professor Name (ID: 625ce9e6-902c-4c1e-8d60-3dc0734b24f7)
2025-02-10 23:23:22,129 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '625ce9e6-902c-4c1e-8d60-3dc0734b24f7', 'name': 'Updated Professor Name', 'email': 'professor@example.com', 'role': 'Professor', 'created_at': '2025-02-10T22:23:22', 'updated_at': '2025-02-10T22:23:22', 'courses_enrolled': []}
2025-02-10 23:23:22,207 - [INFO] - app - configure_logging() - Logging has been configured via configure_logging.
2025-02-10 23:23:22,208 - [DEBUG] - app.middlewares.auth_middleware - register_auth_middleware() - JWT Manager initialized and attached to the Flask app.
2025-02-10 23:23:22,211 - [INFO] - app.config.database - initialize_database() - Database connection successful!
2025-02-10 23:23:22,212 - [INFO] - app - create_app() - MySQL is connected!
2025-02-10 23:23:22,764 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5d0060b1-802c-4945-82cd-6ca84ae5bd4d
2025-02-10 23:23:22,764 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 5d0060b1-802c-4945-82cd-6ca84ae5bd4d)
2025-02-10 23:23:22,764 - [DEBUG] - app.services.user_service - get_user_by_email() - Fetching user by email: tempstudent@example.com
2025-02-10 23:23:22,769 - [DEBUG] - app.services.user_service - get_user_by_email() - No user found with email: tempstudent@example.com
2025-02-10 23:23:22,769 - [DEBUG] - app.services.user_service - create_user() - Creating user: Temp Student, Email: tempstudent@example.com, Role: Student
2025-02-10 23:23:22,891 - [INFO] - app.services.user_service - create_user() - User created with ID: 31a6071e-966f-4e18-b9f7-e2115df31588
2025-02-10 23:23:22,891 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 31a6071e-966f-4e18-b9f7-e2115df31588
2025-02-10 23:23:22,891 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: 31a6071e-966f-4e18-b9f7-e2115df31588)
2025-02-10 23:23:22,891 - [DEBUG] - app.utils.serializer - serialize_user() - User serialized: {'id': '31a6071e-966f-4e18-b9f7-e2115df31588', 'name': 'Temp Student', 'email': 'tempstudent@example.com', 'role': 'Student', 'created_at': '2025-02-10T22:23:23', 'updated_at': '2025-02-10T22:23:23', 'courses_enrolled': []}
2025-02-10 23:23:22,891 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5d0060b1-802c-4945-82cd-6ca84ae5bd4d
2025-02-10 23:23:22,891 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 5d0060b1-802c-4945-82cd-6ca84ae5bd4d)
2025-02-10 23:23:22,891 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 31a6071e-966f-4e18-b9f7-e2115df31588
2025-02-10 23:23:22,900 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: Temp Student (ID: 31a6071e-966f-4e18-b9f7-e2115df31588)
2025-02-10 23:23:22,900 - [DEBUG] - app.services.user_service - delete_user() - Deleting user ID: 31a6071e-966f-4e18-b9f7-e2115df31588
2025-02-10 23:23:22,904 - [INFO] - app.services.user_service - delete_user() - User ID: 31a6071e-966f-4e18-b9f7-e2115df31588 deleted successfully.
2025-02-10 23:23:22,905 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 5d0060b1-802c-4945-82cd-6ca84ae5bd4d
2025-02-10 23:23:22,906 - [DEBUG] - app.services.user_service - get_user_by_id() - User found: admin (ID: 5d0060b1-802c-4945-82cd-6ca84ae5bd4d)
2025-02-10 23:23:22,906 - [DEBUG] - app.services.user_service - get_user_by_id() - Fetching user by ID: 31a6071e-966f-4e18-b9f7-e2115df31588
2025-02-10 23:23:22,907 - [DEBUG] - app.services.user_service - get_user_by_id() - No user found with ID: 31a6071e-966f-4e18-b9f7-e2115df31588
2025-02-10 23:23:22,907 - [WARNING] - app.controllers.user_controller - get_user() - User not found: ID 31a6071e-966f-4e18-b9f7-e2115df31588
